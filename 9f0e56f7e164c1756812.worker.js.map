{"version":3,"sources":["webpack:///9f0e56f7e164c1756812.worker.js","webpack:///webpack/bootstrap 9f0e56f7e164c1756812","webpack:///./src/Worker.ts","webpack:///./node_modules/acorn/dist/acorn.js","webpack:///./node_modules/base64-js/index.js","webpack:///../src/program/Node.js","webpack:///../src/utils/spread.js","webpack:///../src/utils/locate.js","webpack:///../src/utils/getSnippet.js","webpack:///../src/utils/array.js","webpack:///../src/utils/deindent.js","webpack:///../src/program/extractNames.js","webpack:///../src/utils/destructure.js","webpack:///../src/utils/isReference.js","webpack:///../src/program/types/JSXClosingElement.js","webpack:///../src/program/types/JSXElement.js","webpack:///../src/program/wrap.js","webpack:///../src/program/Scope.js","webpack:///../src/program/BlockStatement.js","webpack:///../src/program/Program.js","webpack:///../src/index.js","webpack:///../node_modules/acorn-jsx/xhtml.js","webpack:///../node_modules/acorn-jsx/inject.js","webpack:///../node_modules/acorn-object-spread/inject.js","webpack:///../src/program/keys.js","webpack:///../src/program/types/ArrayExpression.js","webpack:///../src/program/types/ArrowFunctionExpression.js","webpack:///../src/utils/CompileError.js","webpack:///../src/program/types/AssignmentExpression.js","webpack:///../src/program/types/BinaryExpression.js","webpack:///../src/utils/patterns.js","webpack:///../src/program/types/BreakStatement.js","webpack:///../src/program/types/CallExpression.js","webpack:///../src/utils/reserved.js","webpack:///../src/program/types/ClassBody.js","webpack:///../src/program/types/ClassDeclaration.js","webpack:///../src/program/types/ClassExpression.js","webpack:///../src/program/types/ContinueStatement.js","webpack:///../src/program/types/ExportDefaultDeclaration.js","webpack:///../src/program/types/ExportNamedDeclaration.js","webpack:///../src/program/types/shared/LoopStatement.js","webpack:///../src/program/types/ForStatement.js","webpack:///../src/program/types/ForInStatement.js","webpack:///../src/program/types/ForOfStatement.js","webpack:///../src/program/types/FunctionDeclaration.js","webpack:///../src/program/types/FunctionExpression.js","webpack:///../src/program/types/Identifier.js","webpack:///../src/program/types/IfStatement.js","webpack:///../src/program/types/ImportDeclaration.js","webpack:///../src/program/types/ImportDefaultSpecifier.js","webpack:///../src/program/types/ImportSpecifier.js","webpack:///../src/program/types/JSXAttribute.js","webpack:///../src/program/types/JSXExpressionContainer.js","webpack:///../src/program/types/JSXOpeningElement.js","webpack:///../src/program/types/JSXSpreadAttribute.js","webpack:///../node_modules/regenerate/regenerate.js","webpack:///../node_modules/regexpu-core/data/character-class-escape-sets.js","webpack:///../node_modules/regjsparser/parser.js","webpack:///../node_modules/regjsgen/regjsgen.js","webpack:///../node_modules/regexpu-core/rewrite-pattern.js","webpack:///../src/program/types/Literal.js","webpack:///../src/program/types/MemberExpression.js","webpack:///../src/program/types/NewExpression.js","webpack:///../src/program/types/ObjectExpression.js","webpack:///../src/program/types/Property.js","webpack:///../src/program/types/ReturnStatement.js","webpack:///../src/program/types/SpreadProperty.js","webpack:///../src/program/types/Super.js","webpack:///../src/program/types/TaggedTemplateExpression.js","webpack:///../src/program/types/TemplateElement.js","webpack:///../src/program/types/TemplateLiteral.js","webpack:///../src/program/types/ThisExpression.js","webpack:///../src/program/types/UpdateExpression.js","webpack:///../src/program/types/VariableDeclaration.js","webpack:///../src/program/types/VariableDeclarator.js","webpack:///../src/program/types/index.js","webpack:///../src/support.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/isarray/index.js","webpack:///../src/Chunk.js","webpack:///../src/utils/SourceMap.js","webpack:///../src/utils/guessIndent.js","webpack:///../src/utils/getLocator.js","webpack:///../src/utils/encodeMappings.js","webpack:///../src/utils/getRelativePath.js","webpack:///../src/utils/isObject.js","webpack:///../src/MagicString.js","webpack:///../src/Bundle.js","webpack:///../src/utils/btoa.js","webpack:///../src/utils/hasOwnProp.js","webpack:///./node_modules/node-libs-browser/node_modules/buffer/index.js","webpack:///./node_modules/vlq/src/vlq.js","webpack:///(webpack)/buildin/global.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","/home/travis/build/DSchau/css-in-js-playground/node_modules/awesome-typescript-loader/dist/entry.js!/home/travis/build/DSchau/css-in-js-playground/src/Worker.ts","__webpack_exports__","value","__WEBPACK_IMPORTED_MODULE_0_buble__","onmessage","ev","data","code","transformed","transforms","templateString","postMessage","e","console","warn","/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/acorn/dist/acorn.js","global","factory","this","isInAstralSet","set","pos","length","isIdentifierStart","astral","nonASCIIidentifierStart","test","String","fromCharCode","astralIdentifierStartCodes","isIdentifierChar","nonASCIIidentifier","astralIdentifierCodes","binop","prec","TokenType","beforeExpr","kw","options","keyword","keywordTypes","isNewLine","isArray","obj","toString","has","propName","getLineInfo","input","offset","line","cur","lineBreakG","lastIndex","match","exec","index","Position","getOptions","opts","opt","defaultOptions","allowReserved","ecmaVersion","onToken","tokens","token","push","onComment","pushComment","array","block","text","start","end","startLoc","endLoc","comment","type","locations","loc","SourceLocation","ranges","range","keywordRegexp","words","RegExp","replace","finishNodeAt","node","tryCreateRegexp","src","flags","throwErrorAt","parser","undefined","SyntaxError","raise","message","codePointToString","parse","Parser","parseExpressionAt","nextToken","parseExpression","tokenizer","reservedWords","3","5","6","7","strict","strictBind","ecma5AndLessKeywords","keywords","nonASCIIidentifierStartChars","nonASCIIidentifierChars","label","conf","startsExpr","isLoop","isAssign","prefix","postfix","updateContext","tt","num","regexp","string","eof","bracketL","bracketR","braceL","braceR","parenL","parenR","comma","semi","colon","dot","question","arrow","template","ellipsis","backQuote","dollarBraceL","eq","assign","incDec","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","starstar","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","source","nonASCIIwhitespace","skipWhiteSpace","col","column","sourceFile","sourceType","onInsertedSemicolon","onTrailingComma","allowReturnOutsideFunction","allowImportExportEverywhere","allowHashBang","program","directSourceFile","preserveParens","plugins","startPos","reserved","reservedStrict","reservedWordsStrict","reservedWordsStrictBind","containsEsc","loadPlugins","lineStart","Math","max","lastIndexOf","curLine","slice","split","curPosition","lastTokEndLoc","lastTokStartLoc","lastTokStart","lastTokEnd","context","initialContext","exprAllowed","inModule","potentialArrowAt","inFunction","inGenerator","labels","skipLineComment","isKeyword","word","isReservedWord","extend","f","pluginConfigs","this$1","plugin","Error","startNode","parseTopLevel","pp","isUseStrict","stmt","expression","raw","eat","next","isContextual","eatContextual","expectContextual","unexpected","canInsertSemicolon","insertSemicolon","semicolon","afterTrailingComma","tokType","expect","DestructuringErrors","shorthandAssign","trailingComma","checkPatternErrors","refDestructuringErrors","andThrow","trailing","checkExpressionErrors","pp$1","first","body","parseStatement","setStrict","finishNode","loopLabel","kind","switchLabel","isLet","skip","nextCh","charCodeAt","ident","declaration","topLevel","starttype","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseFunctionStatement","parseClass","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVarStatement","parseWhileStatement","parseWithStatement","parseBlock","parseEmptyStatement","parseImport","parseExport","maybeName","expr","parseLabeledStatement","parseExpressionStatement","isBreak","parseIdent","lab","pop","parseParenExpression","parseFor","init$1","parseVar","declarations","init","parseForIn","toAssignable","checkLVal","parseFunction","consequent","alternate","argument","discriminant","cases","sawDefault","isCase","raiseRecoverable","empty","handler","clause","param","parseBindingAtom","finalizer","i$1","statementStart","allowStrict","oldStrict","update","left","right","isFor","decl","parseVarId","parseMaybeAssign","id","isStatement","allowExpressionBody","initFunction","generator","oldInGen","parseFunctionParams","parseFunctionBody","params","parseBindingList","parseClassId","parseClassSuper","classBody","hadConstructor","method","isGenerator","isMaybeStatic","parsePropertyName","static","isGetSet","computed","key","parseClassMethod","paramCount","parseMethod","superClass","parseExprSubscripts","parseExprAtom","parens","needsSemi","shouldParseExportStatement","specifiers","parseExportSpecifiers","local","nodes","exported","parseImportSpecifiers","node$1","node$2","imported","pp$2","isBinding","properties","prop","toAssignableList","elements","operator","exprList","last","arg","elt","parseSpread","parseRest","allowNonIdent","parseObj","close","allowEmpty","allowTrailingComma","elts","rest","parseBindingListItem","elem","parseMaybeDefault","startNodeAt","checkClashes","pp$3","checkPropClash","propHash","shorthand","proto","other","noIn","expressions","afterLeftParse","parseYield","ownDestructuringErrors","parseMaybeConditional","parseExprOps","parseMaybeUnary","parseExprOp","leftStartPos","leftStartLoc","minPrec","logical","op","buildBinary","sawUnary","skipArrowSubscripts","parseSubscripts","base","noCalls","callee","arguments","parseExprList","node$3","tag","quasi","parseTemplate","canBeArrow","parseArrowExpression","parseLiteral","regex","pattern","parseParenAndDistinguishExpression","parseNew","val","spreadStart","innerParenStart","innerStartPos","innerStartLoc","parseParenItem","innerEndPos","innerEndLoc","parseParenArrowList","par","item","empty$1","meta","parseTemplateElement","cooked","tail","curElt","quasis","isPattern","parsePropertyValue","isArrowFunction","isExpression","oldInFunc","oldLabels","useStrict","checkParams","nameHash","liberal","indexOf","delegate","pp$4","err","raisedAt","Node","pp$5","TokContext","isExpr","preserveSpace","override","types","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","readTmplToken","f_expr","pp$6","braceIsBlock","prevType","parent","curContext","out","statementParens","Token","pp$7","isRhino","Packages","getToken","Symbol","iterator","self","done","skipSpace","finishToken","readToken","fullCharCodeAtPos","readWord","getTokenFromCode","skipBlockComment","startSkip","ch","loop","readToken_dot","readNumber","next2","readToken_slash","readRegexp","finishOp","readToken_mult_modulo_exp","size","tokentype","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","readToken_eq_excl","readRadixNumber","readString","str","regexpUnicodeSupport","escaped","inClass","charAt","content","mods","readWord1","tmp","tmpFlags","validFlags","_match","Number","readInt","radix","len","total","Infinity","startsWithDot","isFloat","octal","parseFloat","parseInt","readCodePoint","codePos","readHexChar","quote","chunkStart","readEscapedChar","inTemplate","octalStr","substr","escStart","esc","version","tokTypes","tokContexts","/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/base64-js/index.js","placeHoldersCount","b64","byteLength","toByteArray","placeHolders","arr","Arr","L","revLookup","tripletToBase64","lookup","encodeChunk","uint8","output","join","fromByteArray","extraBytes","parts","len2","Uint8Array","Array","/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/buble/dist/buble.umd.js","__WEBPACK_AMD_DEFINE_RESULT__","acorn","MagicString","__commonjs","fn","__commonjs_global","toJSON","keys","forEach","map","isArguments","spread","argumentsArrayAlias","isNew","let","firstSpreadIndex","const","element","overwrite","remove","insertRight","previousElement","insertLeft","locate","lines","lineEnd","char","pad","result","repeat","times","getSnippet","numDigits","lastLine","snippet","findIndex","deindent","indentStr","getIndentString","indentStrLen","indentStart","indentExclusions","original","removeStart","extractNames","names","extractors","destructure","scope","ref","inline","statementGenerators","handlers","destructureIdentifier","suffix","move","destructureAssignmentPattern","isIdentifier","destructureArrayPattern","handleProperty","destructureObjectPattern","findDeclaration","createIdentifier","value_suffix","filter","Boolean","ref$1","isReference","containsNewLine","normalise","removeTrailingWhitespace","JSON","stringify","wrap","__wrapped","bodyType","statementsWithBlocks","synthetic","BlockStatement","__proto__","Scope","isBlockScope","functionScope","identifiers","create","references","blockScopedDeclarations","aliases","Program","ast","jsx","magicString","depth","indentExclusionElements","initialise","list","transpile","target","targets","bitmask","0b1111111111111111111111111111111","0b1000000000000000000000000000000","environment","versions","matrix","targetVersion","support","features","dangerousTransforms","transform","objectSpread","moduleImport","moduleExport","export","window","xhtml","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","tilde","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","require$$0","inject","XHTMLEntities","hexNumber","decimalNumber","getQualifiedJSXName","namespace","tc","j_oTag","j_cTag","j_expr","jsxName","jsxText","jsxTagStart","jsxTagEnd","jsx_readToken","jsx_readEntity","jsx_readNewLine","normalizeCRLF","jsx_readString","entity","count","jsx_readWord","jsx_parseIdentifier","jsx_parseNamespacedName","allowNamespaces","jsx_parseElementName","allowNamespacedObjects","newNode","jsx_parseAttributeValue","jsx_parseExpressionContainer","jsx_parseEmptyExpression","jsx_parseAttribute","jsx_parseOpeningElementAt","attributes","selfClosing","jsx_parseClosingElementAt","jsx_parseElementAt","children","openingElement","closingElement","contents","jsx_parseElement","instance","inner","refShortHandDefaultPos","acornJsx","inject$1","acornObjectSpread","Literal","indentation","addSourcemapLocation","ancestor","level","contains","findLexicalBoundary","findNearest","unparenthesizedParent","unparenthesize","findScope","getIndentation","ArrayExpression","apply","constructor","spreadRest","lexicalBoundary","getArgumentsArrayAlias","super","lastElement","ArrowFunctionExpression","createScope","charIndex","CompileError","stack","AssignmentExpression","statement","reassigned","exponentiation","transpileExponentiation","destructuring","transpileDestructuring","use","write","mayDuplicate","temporaries","temp","props","getAlias","needsObjectVar","needsPropertyVar","i0","declarators","BinaryExpression","loopStatement","BreakStatement","switchCase","canBreak","shouldRewriteAsFunction","CallExpression","hasSpreadElements","firstArgument","callExpression","enclosure","lastStatementInBlock","noCall","ClassBody","inFunctionExpression","superName","classes","i1","constructorIndex","introBlock","outroBlock","isConstructorBody","previousMethod","nextMethod","namedFunctions","namedFunctionExpressions","namedConstructor","inheritanceBlock","prototypeAccessors","staticAccessors","prototypeGettersAndSetters","staticGettersAndSetters","constructorName","lhs","isAccessor","methodName","fake_computed","funcName","rhs","intro","outro","ClassDeclaration","addDeclaration","syntheticDefaultExport","ClassExpression","ContinueStatement","ExportDefaultDeclaration","ExportNamedDeclaration","LoopStatement","createdScope","letConst","j","instances","nearestFunctionExpression","needsBlock","argString","args","paramString","before","after","canReturn","returned","insert","Identifier","ObjectPattern","ArrayPattern","RestElement","AssignmentPattern","ForStatement","concat","declarator","outer","updates","lastStatement","ForInStatement","ForOfStatement","forOf","dangerousForOf","bodyStart","FunctionDeclaration","FunctionExpression","conciseMethodProperty","alias","list$1","identifier","arrowFunction","getArgumentsAlias","addReference","IfStatement","ImportDeclaration","ImportDefaultSpecifier","ImportSpecifier","IS_DATA_ATTRIBUTE","JSXAttribute","JSXClosingElement","spaceBeforeParen","lastChild","JSXElement","child","JSXExpressionContainer","JSXOpeningElement","html","toLowerCase","hasSpread","attr","lastAttr","nextAttr","objectAssign","JSXSpreadAttribute","regenerate","root","freeExports","freeGlobal","ERRORS","rangeOrder","codePointRange","regexNull","callback","isNumber","number","totalCharacters","hex","toUpperCase","dataFromCodePoints","codePoints","isStart","previous","dataRemove","codePoint","splice","dataRemoveRange","rangeStart","rangeEnd","dataAdd","RangeError","dataAddData","dataA","dataB","dataAddRange","dataRemoveData","added","dataContains","dataIntersection","dataIsEmpty","dataIsSingleton","dataToArray","floor","highSurrogate","lowSurrogate","stringFromCharCode","codePointToStringUnicode","symbolToCodePoint","symbol","second","createBMPCharacterClasses","createUnicodeCharacterClasses","splitAtBMP","loneHighSurrogates","loneLowSurrogates","bmp","HIGH_SURROGATE_MAX","LOW_SURROGATE_MAX","optimizeSurrogateMappings","surrogateMappings","mapping","nextMapping","highSurrogates","lowSurrogates","nextHighSurrogates","nextLowSurrogates","tmpLow","addLow","optimizeByLowSurrogates","innerIndex","lowSurrogateStart","lowSurrogateEnd","otherMapping","otherLowSurrogates","otherLowSurrogateStart","otherLowSurrogateEnd","surrogateSet","startHigh","startLow","endHigh","endLow","startsWithLowestLowSurrogate","endsWithHighestLowSurrogate","complete","createSurrogateCharacterClasses","surrogateMapping","createCharacterClassesFromData","bmpOnly","hasUnicodeFlag","hasLoneHighSurrogates","hasLoneLowSurrogates","add","destination","$this","addRange","removeRange","startCodePoint","endCodePoint","intersection","clone","toRegExp","valueOf","toArray","require$$0$2","characterClassEscapeSets","REGULAR","D","S","w","W","UNICODE","UNICODE_IGNORE_CASE","require$$0$1","require$$1","75","83","107","115","181","197","383","452","453","455","456","458","459","497","498","837","914","917","920","921","922","924","928","929","931","934","937","962","976","977","981","982","1008","1009","1012","1013","7776","7835","8126","8486","8490","8491","66560","66561","66562","66563","66564","66565","66566","66567","66568","66569","66570","66571","66572","66573","66574","66575","66576","66577","66578","66579","66580","66581","66582","66583","66584","66585","66586","66587","66588","66589","66590","66591","66592","66593","66594","66595","66596","66597","66598","66599","66600","66601","66602","66603","66604","66605","66606","66607","66608","66609","66610","66611","66612","66613","66614","66615","66616","66617","66618","66619","66620","66621","66622","66623","66624","66625","66626","66627","66628","66629","66630","66631","66632","66633","66634","66635","66636","66637","66638","66639","68736","68737","68738","68739","68740","68741","68742","68743","68744","68745","68746","68747","68748","68749","68750","68751","68752","68753","68754","68755","68756","68757","68758","68759","68760","68761","68762","68763","68764","68765","68766","68767","68768","68769","68770","68771","68772","68773","68774","68775","68776","68777","68778","68779","68780","68781","68782","68783","68784","68785","68786","68800","68801","68802","68803","68804","68805","68806","68807","68808","68809","68810","68811","68812","68813","68814","68815","68816","68817","68818","68819","68820","68821","68822","68823","68824","68825","68826","68827","68828","68829","68830","68831","68832","68833","68834","68835","68836","68837","68838","68839","68840","68841","68842","68843","68844","68845","68846","68847","68848","68849","68850","71840","71841","71842","71843","71844","71845","71846","71847","71848","71849","71850","71851","71852","71853","71854","71855","71856","71857","71858","71859","71860","71861","71862","71863","71864","71865","71866","71867","71868","71869","71870","71871","71872","71873","71874","71875","71876","71877","71878","71879","71880","71881","71882","71883","71884","71885","71886","71887","71888","71889","71890","71891","71892","71893","71894","71895","71896","71897","71898","71899","71900","71901","71902","71903","addRaw","substring","updateRawStart","createAnchor","rawLength","createValue","from","to","createEscaped","fromOffset","createCharacter","matches","_char","lookahead","createDisjunction","alternatives","createDot","createCharacterClassEscape","createReference","matchIndex","createGroup","behavior","disjunction","createQuantifier","min","greedy","createAlternative","terms","createCharacterClass","classRanges","negative","createClassRange","bail","flattenBody","incr","amount","res","current","matchReg","regExp","subStr","parseDisjunction","parseAlternative","term","parseTerm","anchor","parseAnchor","atom","parseAtom","quantifier","parseQuantifier","parseGroup","matchA","typeA","matchB","typeB","group","firstIteration","closedCaptureCounter","parseAtomEscape","parseCharacterClass","parseUnicodeSurrogatePairEscape","firstEscape","prevPos","secondEscape","parseClassEscape","insideCharacterClass","parseDecimalEscape","parseCharacterEscape","refIdx","backrefDenied","parseIdentityEscape","isIdentifierPart","NonAsciiIdentifierPart","parseClassRanges","parseNonemptyClassRanges","parseHelperClassRanges","parseClassAtom","parseNonemptyClassRangesNoDash","parseClassAtomNoDash","details","contextStart","contextEnd","pointer","regjsparser","require$$3","regjsgen","fromCodePoint","codeUnits","isFinite","assertType","expected","generate","generateAlternative","generateTerm","generateAnchor","generateAtom","generateCharacterClass","generateClassAtom","generateCharacterClassEscape","generateCharacterClassRange","generateDisjunction","generateDot","generateGroup","behaviour","generateQuantifier","generateReference","generateValue","objectTypes","function","freeModule","nodeType","alternative","characterClass","characterClassEscape","characterClassRange","reference","require$$4","rewritePattern","getCharacterClassEscapeSet","character","unicode","ignoreCase","ESCAPE_SETS","tree","caseFold","iuMappings","processCharacterClass","characterClassItem","folded","iuAddRange","UNICODE_SET","BMP_SET","processTerm","DOT_SET_UNICODE","DOT_SET","require$$2","rewritePattern$1","numericLiteral","leading","stickyRegExp","unicodeRegExp","MemberExpression","reservedProperties","NewExpression","ObjectExpression","firstPropertyStart","regularPropertyCount","spreadPropertyCount","computedPropertyCount","i$2","lastProp","nextProp","computedProperty","isSimpleAssignment","lastComputedProp","sawNonComputedProperty","moveStart","propId","Property","ReturnStatement","nearestFunction","shouldWrap","SpreadProperty","Super","parentClass","superClassName","isCalled","isMember","thisAlias","getThisAlias","TaggedTemplateExpression","dangerousTaggedTemplateString","ordered","sort","a","b","templateStrings","TemplateElement","TemplateLiteral","third","shift","parenthesise","replacement","ThisExpression","UpdateExpression","VariableDeclaration","lastDeclaratorIsPattern","simple","rewritten","VariableDeclarator","inLoop","isLeftDeclaratorOfLoop","DoWhileStatement","WhileStatement","existingDeclaration","consolidated","consolidateReference","consolidate","counter","parentIsFunction","isFunctionBlock","argumentsAlias","defaultParameters","useOuter","indentString","introStatementGenerators","assignment","transpileParameters","transpileBlockScopedIdentifiers","defaultParameter","penultimateParam","parameterDestructuring","cont","forStatement","outerAlias","innerAlias","list$2","generateMap","file","includeContent","chrome","48","0b1001111011111100111110101111101","49","0b1001111111111100111111111111111","50","0b1011111111111100111111111111111","51","52","0b1111111111111100111111111111111","firefox","43","0b1000111111101100000110111011101","44","45","46","0b1010111111111100000110111011101","47","0b1010111111111100111111111011111","safari","8","9","0b1001111001101100000011101011110","ie","0b0000000000000000000000000000000","10","11","0b1000000000000000111000001100000","edge","12","0b1011110110111100011010001011101","13","0b1011111110111100011111001011111","0.10","0b1000000000101000000000001000000","0.12","0b1000001000101000000010001000100","4","0b1001111000111100111111001111111","reduce","final","VERSION","/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/ieee754/index.js","read","buffer","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","pow","rt","abs","isNaN","log","LN2","/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/isarray/index.js","/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/magic-string/dist/magic-string.cjs.js","Buffer","Chunk","storeName","edited","defineProperties","writable","SourceMap","sources","sourcesContent","mappings","guessIndent","tabbed","spaced","numSpaces","getLocator","rangeContains","getLocation","originalLines","lineRanges","encodeMappings","chunk","hires","sourcemapLocations","sourceIndex","offsets","addEdit","nameIndex","rawSegments","generatedCodeLine","generatedCodeColumn","sourceCodeLine","sourceCodeColumn","sourceCodeName","rawLines","originalCharIndex","segments","segment","encode","getRelativePath","fromParts","toParts","isObject","thing","firstChunk","lastChunk","lastSearchedChunk","byStart","byEnd","filename","indentExclusionRanges","storedNames","Bundle","separator","uniqueSources","uniqueSourceIndexByFilename","getSemis","vlq","append","eachNext","eachPrevious","edit","prepend","sliceIndex","originalBefore","originalAfter","newChunk","trimEnd","rx","trimmed","trimStart","_btoa","btoa","toUrl","TypeError","cloned","originalChunk","clonedChunk","nextOriginalChunk","nextClonedChunk","getMappings","indent","isExcluded","exclude","exclusion","shouldIndentNextCharacter","replacer","_split","oldLeft","oldRight","newRight","newLeft","startChunk","containsEnd","sliceStart","sliceEnd","snip","searchForward","_splitChunk","trimLines","trim","charType","aborted","hasOwnProp","addSource","option","uniqueSource","bundle","encoded","indentStringCounts","trailingNewline","/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/node-libs-browser/node_modules/buffer/index.js","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","encodingOrOffset","allocUnsafe","ArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","alloc","fill","encoding","checked","isEncoding","actual","fromArrayLike","byteOffset","isBuffer","isnan","SlowBuffer","isView","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","buf","indexSize","readUInt16BE","arrLength","valLength","foundIndex","found","hexWrite","remaining","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","latin1Write","base64Write","ucs2Write","utf16leToBytes","base64","firstByte","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","ret","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","stringtrim","INVALID_BASE64_RE","units","leadSurrogate","byteArray","hi","lo","dst","INSPECT_MAX_BYTES","foo","subarray","poolSize","_augment","species","allocUnsafeSlow","_isBuffer","compare","x","y","swap16","swap32","swap64","equals","inspect","thisStart","thisEnd","thisCopy","targetCopy","includes","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/vlq/src/vlq.js","decode","integer","charToInteger","hasContinuationBit","shouldNegate","encodeInteger","clamped","integerToChar","/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/webpack/buildin/global.js","g","Function","eval"],"mappings":"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MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,MACTC,MAAS,M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","file":"9f0e56f7e164c1756812.worker.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/css-in-js-playground/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"/home/travis/build/DSchau/css-in-js-playground/node_modules/awesome-typescript-loader/dist/entry.js!/home/travis/build/DSchau/css-in-js-playground/src/Worker.ts\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"/home/travis/build/DSchau/css-in-js-playground/node_modules/awesome-typescript-loader/dist/entry.js!/home/travis/build/DSchau/css-in-js-playground/src/Worker.ts\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_buble__ = __webpack_require__(\"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/buble/dist/buble.umd.js\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_buble___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_buble__);\n\r\nonmessage = function (ev) {\r\n    var data = ev.data;\r\n    var code = data.code;\r\n    try {\r\n        var transformed = __WEBPACK_IMPORTED_MODULE_0_buble__[\"transform\"](code, {\r\n            transforms: {\r\n                modules: false,\r\n                templateString: false\r\n            }\r\n        }).code;\r\n        postMessage(transformed);\r\n    }\r\n    catch (e) {\r\n        console.warn(e);\r\n    }\r\n};\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (function () { });; // only to get around annoying typescript errors\r\n\n\n/***/ }),\n\n/***/ \"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/acorn/dist/acorn.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n(function (global, factory) {\n   true ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.acorn = global.acorn || {})));\n}(this, function (exports) { 'use strict';\n\n  // Reserved word lists for various dialects of the language\n\n  var reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    7: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n  }\n\n  // And the keywords\n\n  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\"\n\n  var keywords = {\n    5: ecma5AndLessKeywords,\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\n  }\n\n  // ## Character categories\n\n  // Big ugly regular expressions that match characters in the\n  // whitespace, identifier, and identifier-start categories. These\n  // are only applied when a character is found to actually have a\n  // code point above 128.\n  // Generated by `bin/generate-identifier-regex.js`.\n\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fd5\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ae\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\"\n  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d4-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d01-\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf8\\u1cf9\\u1dc0-\\u1df5\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\"\n\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\")\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\")\n\n  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null\n\n  // These are a run-length and offset encoded representation of the\n  // >0xffff code points that are a valid part of identifiers. The\n  // offset starts at 0x10000, and each pair of numbers represents an\n  // offset to the next range, and then a size of the range. They were\n  // generated by bin/generate-identifier-regex.js\n  var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,17,26,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,449,56,264,8,2,36,18,0,50,29,881,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,0,32,6124,20,754,9486,1,3071,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,10591,541]\n  var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,838,7,2,7,17,9,57,21,2,13,19882,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239]\n\n  // This has a complexity linear to the value of the code. The\n  // assumption is that looking up astral identifier characters is\n  // rare.\n  function isInAstralSet(code, set) {\n    var pos = 0x10000\n    for (var i = 0; i < set.length; i += 2) {\n      pos += set[i]\n      if (pos > code) return false\n      pos += set[i + 1]\n      if (pos >= code) return true\n    }\n  }\n\n  // Test whether a given character code starts an identifier.\n\n  function isIdentifierStart(code, astral) {\n    if (code < 65) return code === 36\n    if (code < 91) return true\n    if (code < 97) return code === 95\n    if (code < 123) return true\n    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    if (astral === false) return false\n    return isInAstralSet(code, astralIdentifierStartCodes)\n  }\n\n  // Test whether a given character is part of an identifier.\n\n  function isIdentifierChar(code, astral) {\n    if (code < 48) return code === 36\n    if (code < 58) return true\n    if (code < 65) return false\n    if (code < 91) return true\n    if (code < 97) return code === 95\n    if (code < 123) return true\n    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))\n    if (astral === false) return false\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n  }\n\n  // ## Token types\n\n  // The assignment of fine-grained, information-carrying type objects\n  // allows the tokenizer to store the information it has about a\n  // token in a way that is very cheap for the parser to look up.\n\n  // All token type variables start with an underscore, to make them\n  // easy to recognize.\n\n  // The `beforeExpr` property is used to disambiguate between regular\n  // expressions and divisions. It is set on all token types that can\n  // be followed by an expression (thus, a slash after them would be a\n  // regular expression).\n  //\n  // The `startsExpr` property is used to check if the token ends a\n  // `yield` expression. It is set on all token types that either can\n  // directly start an expression (like a quotation mark) or can\n  // continue an expression (like the body of a string).\n  //\n  // `isLoop` marks a keyword as starting a loop, which is important\n  // to know when parsing a label, in order to allow or disallow\n  // continue jumps to that label.\n\n  var TokenType = function TokenType(label, conf) {\n    if ( conf === void 0 ) conf = {};\n\n    this.label = label\n    this.keyword = conf.keyword\n    this.beforeExpr = !!conf.beforeExpr\n    this.startsExpr = !!conf.startsExpr\n    this.isLoop = !!conf.isLoop\n    this.isAssign = !!conf.isAssign\n    this.prefix = !!conf.prefix\n    this.postfix = !!conf.postfix\n    this.binop = conf.binop || null\n    this.updateContext = null\n  };\n\n  function binop(name, prec) {\n    return new TokenType(name, {beforeExpr: true, binop: prec})\n  }\n  var beforeExpr = {beforeExpr: true};\n  var startsExpr = {startsExpr: true};\n  // Map keyword names to token types.\n\n  var keywordTypes = {}\n\n  // Succinct definitions of keyword token types\n  function kw(name, options) {\n    if ( options === void 0 ) options = {};\n\n    options.keyword = name\n    return keywordTypes[name] = new TokenType(name, options)\n  }\n\n  var tt = {\n    num: new TokenType(\"num\", startsExpr),\n    regexp: new TokenType(\"regexp\", startsExpr),\n    string: new TokenType(\"string\", startsExpr),\n    name: new TokenType(\"name\", startsExpr),\n    eof: new TokenType(\"eof\"),\n\n    // Punctuation token types.\n    bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n    braceR: new TokenType(\"}\"),\n    parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", beforeExpr),\n    semi: new TokenType(\";\", beforeExpr),\n    colon: new TokenType(\":\", beforeExpr),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", beforeExpr),\n    arrow: new TokenType(\"=>\", beforeExpr),\n    template: new TokenType(\"template\"),\n    ellipsis: new TokenType(\"...\", beforeExpr),\n    backQuote: new TokenType(\"`\", startsExpr),\n    dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n    // Operators. These carry several kinds of properties to help the\n    // parser use them properly (the presence of these properties is\n    // what categorizes them as operators).\n    //\n    // `binop`, when present, specifies that this operator is a binary\n    // operator, and will refer to its precedence.\n    //\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\n    // unary operator.\n    //\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n    // binary operators with a very low precedence, that should result\n    // in AssignmentExpression nodes.\n\n    eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n    assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n    incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n    prefix: new TokenType(\"prefix\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    logicalOR: binop(\"||\", 1),\n    logicalAND: binop(\"&&\", 2),\n    bitwiseOR: binop(\"|\", 3),\n    bitwiseXOR: binop(\"^\", 4),\n    bitwiseAND: binop(\"&\", 5),\n    equality: binop(\"==/!=\", 6),\n    relational: binop(\"</>\", 7),\n    bitShift: binop(\"<</>>\", 8),\n    plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n    modulo: binop(\"%\", 10),\n    star: binop(\"*\", 10),\n    slash: binop(\"/\", 10),\n    starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n    // Keyword token types.\n    _break: kw(\"break\"),\n    _case: kw(\"case\", beforeExpr),\n    _catch: kw(\"catch\"),\n    _continue: kw(\"continue\"),\n    _debugger: kw(\"debugger\"),\n    _default: kw(\"default\", beforeExpr),\n    _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n    _else: kw(\"else\", beforeExpr),\n    _finally: kw(\"finally\"),\n    _for: kw(\"for\", {isLoop: true}),\n    _function: kw(\"function\", startsExpr),\n    _if: kw(\"if\"),\n    _return: kw(\"return\", beforeExpr),\n    _switch: kw(\"switch\"),\n    _throw: kw(\"throw\", beforeExpr),\n    _try: kw(\"try\"),\n    _var: kw(\"var\"),\n    _const: kw(\"const\"),\n    _while: kw(\"while\", {isLoop: true}),\n    _with: kw(\"with\"),\n    _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n    _this: kw(\"this\", startsExpr),\n    _super: kw(\"super\", startsExpr),\n    _class: kw(\"class\"),\n    _extends: kw(\"extends\", beforeExpr),\n    _export: kw(\"export\"),\n    _import: kw(\"import\"),\n    _null: kw(\"null\", startsExpr),\n    _true: kw(\"true\", startsExpr),\n    _false: kw(\"false\", startsExpr),\n    _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n    _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n    _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n  }\n\n  // Matches a whole line break (where CRLF is considered a single\n  // line break). Used to count lines.\n\n  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/\n  var lineBreakG = new RegExp(lineBreak.source, \"g\")\n\n  function isNewLine(code) {\n    return code === 10 || code === 13 || code === 0x2028 || code == 0x2029\n  }\n\n  var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/\n\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g\n\n  function isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\"\n  }\n\n  // Checks if an object has a property.\n\n  function has(obj, propName) {\n    return Object.prototype.hasOwnProperty.call(obj, propName)\n  }\n\n  // These are used when `options.locations` is on, for the\n  // `startLoc` and `endLoc` properties.\n\n  var Position = function Position(line, col) {\n    this.line = line\n    this.column = col\n  };\n\n  Position.prototype.offset = function offset (n) {\n    return new Position(this.line, this.column + n)\n  };\n\n  var SourceLocation = function SourceLocation(p, start, end) {\n    this.start = start\n    this.end = end\n    if (p.sourceFile !== null) this.source = p.sourceFile\n  };\n\n  // The `getLineInfo` function is mostly useful when the\n  // `locations` option is off (for performance reasons) and you\n  // want to find the line/column position for a given character\n  // offset. `input` should be the code string that the offset refers\n  // into.\n\n  function getLineInfo(input, offset) {\n    for (var line = 1, cur = 0;;) {\n      lineBreakG.lastIndex = cur\n      var match = lineBreakG.exec(input)\n      if (match && match.index < offset) {\n        ++line\n        cur = match.index + match[0].length\n      } else {\n        return new Position(line, offset - cur)\n      }\n    }\n  }\n\n  // A second optional argument can be given to further configure\n  // the parser process. These options are recognized:\n\n  var defaultOptions = {\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must\n    // be either 3, or 5, or 6. This influences support for strict\n    // mode, the set of reserved words, support for getters and\n    // setters and other features. The default is 6.\n    ecmaVersion: 6,\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // `onInsertedSemicolon` can be a callback that will be called\n    // when a semicolon is automatically inserted. It will be passed\n    // th position of the comma as an offset, and if `locations` is\n    // enabled, it is given the location as a `{line, column}` object\n    // as second argument.\n    onInsertedSemicolon: null,\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n    // trailing commas.\n    onTrailingComma: null,\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\n    // Set `allowReserved` to a boolean value to explicitly turn this on\n    // an off. When this option has the value \"never\", reserved words\n    // and keywords can also not be used as property names.\n    allowReserved: null,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // When enabled, hashbang directive in the beginning of file\n    // is allowed and treated as a line comment.\n    allowHashBang: false,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onToken` option, which will\n    // cause Acorn to call that function with object in the same\n    // format as tokens returned from `tokenizer().getToken()`. Note\n    // that you are not allowed to call the parser from the\n    // callback—that will corrupt its internal state.\n    onToken: null,\n    // A function can be passed as `onComment` option, which will\n    // cause Acorn to call that function with `(block, text, start,\n    // end)` parameters whenever a comment is skipped. `block` is a\n    // boolean indicating whether this is a block (`/* */`) comment,\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback—that will corrupt its internal state.\n    onComment: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // When enabled, parenthesized expressions are represented by\n    // (non-standard) ParenthesizedExpression nodes\n    preserveParens: false,\n    plugins: {}\n  }\n\n  // Interpret and default an options object\n\n  function getOptions(opts) {\n    var options = {}\n    for (var opt in defaultOptions)\n      options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]\n    if (options.allowReserved == null)\n      options.allowReserved = options.ecmaVersion < 5\n\n    if (isArray(options.onToken)) {\n      var tokens = options.onToken\n      options.onToken = function (token) { return tokens.push(token); }\n    }\n    if (isArray(options.onComment))\n      options.onComment = pushComment(options, options.onComment)\n\n    return options\n  }\n\n  function pushComment(options, array) {\n    return function (block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? 'Block' : 'Line',\n        value: text,\n        start: start,\n        end: end\n      }\n      if (options.locations)\n        comment.loc = new SourceLocation(this, startLoc, endLoc)\n      if (options.ranges)\n        comment.range = [start, end]\n      array.push(comment)\n    }\n  }\n\n  // Registered plugins\n  var plugins = {}\n\n  function keywordRegexp(words) {\n    return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\")\n  }\n\n  var Parser = function Parser(options, input, startPos) {\n    this.options = options = getOptions(options)\n    this.sourceFile = options.sourceFile\n    this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5])\n    var reserved = options.allowReserved ? \"\" :\n        reservedWords[options.ecmaVersion] + (options.sourceType == \"module\" ? \" await\" : \"\")\n    this.reservedWords = keywordRegexp(reserved)\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict\n    this.reservedWordsStrict = keywordRegexp(reservedStrict)\n    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind)\n    this.input = String(input)\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false\n\n    // Load plugins\n    this.loadPlugins(options.plugins)\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos\n      this.lineStart = Math.max(0, this.input.lastIndexOf(\"\\n\", startPos))\n      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length\n    } else {\n      this.pos = this.lineStart = 0\n      this.curLine = 1\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = tt.eof\n    // For tokens that include more information than their type, the value\n    this.value = null\n    // Its start and end offset\n    this.start = this.end = this.pos\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition()\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null\n    this.lastTokStart = this.lastTokEnd = this.pos\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext()\n    this.exprAllowed = true\n\n    // Figure out if it's a module code.\n    this.strict = this.inModule = options.sourceType === \"module\"\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1\n\n    // Flags to track whether we are in a function, a generator.\n    this.inFunction = this.inGenerator = false\n    // Labels in scope.\n    this.labels = []\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!')\n      this.skipLineComment(2)\n  };\n\n  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n  Parser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };\n  Parser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };\n\n  Parser.prototype.extend = function extend (name, f) {\n    this[name] = f(this[name])\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n      var this$1 = this;\n\n    for (var name in pluginConfigs) {\n      var plugin = plugins[name]\n      if (!plugin) throw new Error(\"Plugin '\" + name + \"' not found\")\n      plugin(this$1, pluginConfigs[name])\n    }\n  };\n\n  Parser.prototype.parse = function parse () {\n    var node = this.options.program || this.startNode()\n    this.nextToken()\n    return this.parseTopLevel(node)\n  };\n\n  var pp = Parser.prototype\n\n  // ## Parser utilities\n\n  // Test whether a statement node is the string literal `\"use strict\"`.\n\n  pp.isUseStrict = function(stmt) {\n    return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"Literal\" &&\n      stmt.expression.raw.slice(1, -1) === \"use strict\"\n  }\n\n  // Predicate that tests whether the next token is of the given\n  // type, and if yes, consumes it as a side effect.\n\n  pp.eat = function(type) {\n    if (this.type === type) {\n      this.next()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  pp.isContextual = function(name) {\n    return this.type === tt.name && this.value === name\n  }\n\n  // Consumes contextual keyword if possible.\n\n  pp.eatContextual = function(name) {\n    return this.value === name && this.eat(tt.name)\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  pp.expectContextual = function(name) {\n    if (!this.eatContextual(name)) this.unexpected()\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  pp.canInsertSemicolon = function() {\n    return this.type === tt.eof ||\n      this.type === tt.braceR ||\n      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  }\n\n  pp.insertSemicolon = function() {\n    if (this.canInsertSemicolon()) {\n      if (this.options.onInsertedSemicolon)\n        this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc)\n      return true\n    }\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  pp.semicolon = function() {\n    if (!this.eat(tt.semi) && !this.insertSemicolon()) this.unexpected()\n  }\n\n  pp.afterTrailingComma = function(tokType) {\n    if (this.type == tokType) {\n      if (this.options.onTrailingComma)\n        this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc)\n      this.next()\n      return true\n    }\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error.\n\n  pp.expect = function(type) {\n    this.eat(type) || this.unexpected()\n  }\n\n  // Raise an unexpected token error.\n\n  pp.unexpected = function(pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\")\n  }\n\n  var DestructuringErrors = function DestructuringErrors() {\n    this.shorthandAssign = 0\n    this.trailingComma = 0\n  };\n\n  pp.checkPatternErrors = function(refDestructuringErrors, andThrow) {\n    var trailing = refDestructuringErrors && refDestructuringErrors.trailingComma\n    if (!andThrow) return !!trailing\n    if (trailing) this.raise(trailing, \"Comma is not permitted after the rest element\")\n  }\n\n  pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n    var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign\n    if (!andThrow) return !!pos\n    if (pos) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\")\n  }\n\n  var pp$1 = Parser.prototype\n\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  pp$1.parseTopLevel = function(node) {\n    var this$1 = this;\n\n    var first = true\n    if (!node.body) node.body = []\n    while (this.type !== tt.eof) {\n      var stmt = this$1.parseStatement(true, true)\n      node.body.push(stmt)\n      if (first) {\n        if (this$1.isUseStrict(stmt)) this$1.setStrict(true)\n        first = false\n      }\n    }\n    this.next()\n    if (this.options.ecmaVersion >= 6) {\n      node.sourceType = this.options.sourceType\n    }\n    return this.finishNode(node, \"Program\")\n  }\n\n  var loopLabel = {kind: \"loop\"};\n  var switchLabel = {kind: \"switch\"};\n  pp$1.isLet = function() {\n    if (this.type !== tt.name || this.options.ecmaVersion < 6 || this.value != \"let\") return false\n    skipWhiteSpace.lastIndex = this.pos\n    var skip = skipWhiteSpace.exec(this.input)\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next)\n    if (nextCh === 91 || nextCh == 123) return true // '{' and '['\n    if (isIdentifierStart(nextCh, true)) {\n      for (var pos = next + 1; isIdentifierChar(this.input.charCodeAt(pos), true); ++pos) {}\n      var ident = this.input.slice(next, pos)\n      if (!this.isKeyword(ident)) return true\n    }\n    return false\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  pp$1.parseStatement = function(declaration, topLevel) {\n    var starttype = this.type, node = this.startNode(), kind\n\n    if (this.isLet()) {\n      starttype = tt._var\n      kind = \"let\"\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n    case tt._break: case tt._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n    case tt._debugger: return this.parseDebuggerStatement(node)\n    case tt._do: return this.parseDoStatement(node)\n    case tt._for: return this.parseForStatement(node)\n    case tt._function:\n      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected()\n      return this.parseFunctionStatement(node)\n    case tt._class:\n      if (!declaration) this.unexpected()\n      return this.parseClass(node, true)\n    case tt._if: return this.parseIfStatement(node)\n    case tt._return: return this.parseReturnStatement(node)\n    case tt._switch: return this.parseSwitchStatement(node)\n    case tt._throw: return this.parseThrowStatement(node)\n    case tt._try: return this.parseTryStatement(node)\n    case tt._const: case tt._var:\n      kind = kind || this.value\n      if (!declaration && kind != \"var\") this.unexpected()\n      return this.parseVarStatement(node, kind)\n    case tt._while: return this.parseWhileStatement(node)\n    case tt._with: return this.parseWithStatement(node)\n    case tt.braceL: return this.parseBlock()\n    case tt.semi: return this.parseEmptyStatement(node)\n    case tt._export:\n    case tt._import:\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel)\n          this.raise(this.start, \"'import' and 'export' may only appear at the top level\")\n        if (!this.inModule)\n          this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\")\n      }\n      return starttype === tt._import ? this.parseImport(node) : this.parseExport(node)\n\n      // If the statement does not start with a statement keyword or a\n      // brace, it's an ExpressionStatement or LabeledStatement. We\n      // simply start parsing an expression, and afterwards, if the\n      // next token is a colon and the expression was a simple\n      // Identifier node, we switch to interpreting it as a label.\n    default:\n      var maybeName = this.value, expr = this.parseExpression()\n      if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon))\n        return this.parseLabeledStatement(node, maybeName, expr)\n      else return this.parseExpressionStatement(node, expr)\n    }\n  }\n\n  pp$1.parseBreakContinueStatement = function(node, keyword) {\n    var this$1 = this;\n\n    var isBreak = keyword == \"break\"\n    this.next()\n    if (this.eat(tt.semi) || this.insertSemicolon()) node.label = null\n    else if (this.type !== tt.name) this.unexpected()\n    else {\n      node.label = this.parseIdent()\n      this.semicolon()\n    }\n\n    // Verify that there is an actual destination to break or\n    // continue to.\n    for (var i = 0; i < this.labels.length; ++i) {\n      var lab = this$1.labels[i]\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break\n        if (node.label && isBreak) break\n      }\n    }\n    if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword)\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n  }\n\n  pp$1.parseDebuggerStatement = function(node) {\n    this.next()\n    this.semicolon()\n    return this.finishNode(node, \"DebuggerStatement\")\n  }\n\n  pp$1.parseDoStatement = function(node) {\n    this.next()\n    this.labels.push(loopLabel)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    this.expect(tt._while)\n    node.test = this.parseParenExpression()\n    if (this.options.ecmaVersion >= 6)\n      this.eat(tt.semi)\n    else\n      this.semicolon()\n    return this.finishNode(node, \"DoWhileStatement\")\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  pp$1.parseForStatement = function(node) {\n    this.next()\n    this.labels.push(loopLabel)\n    this.expect(tt.parenL)\n    if (this.type === tt.semi) return this.parseFor(node, null)\n    var isLet = this.isLet()\n    if (this.type === tt._var || this.type === tt._const || isLet) {\n      var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value\n      this.next()\n      this.parseVar(init$1, true, kind)\n      this.finishNode(init$1, \"VariableDeclaration\")\n      if ((this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n          !(kind !== \"var\" && init$1.declarations[0].init))\n        return this.parseForIn(node, init$1)\n      return this.parseFor(node, init$1)\n    }\n    var refDestructuringErrors = new DestructuringErrors\n    var init = this.parseExpression(true, refDestructuringErrors)\n    if (this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      this.checkPatternErrors(refDestructuringErrors, true)\n      this.toAssignable(init)\n      this.checkLVal(init)\n      return this.parseForIn(node, init)\n    } else {\n      this.checkExpressionErrors(refDestructuringErrors, true)\n    }\n    return this.parseFor(node, init)\n  }\n\n  pp$1.parseFunctionStatement = function(node) {\n    this.next()\n    return this.parseFunction(node, true)\n  }\n\n  pp$1.parseIfStatement = function(node) {\n    this.next()\n    node.test = this.parseParenExpression()\n    node.consequent = this.parseStatement(false)\n    node.alternate = this.eat(tt._else) ? this.parseStatement(false) : null\n    return this.finishNode(node, \"IfStatement\")\n  }\n\n  pp$1.parseReturnStatement = function(node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n      this.raise(this.start, \"'return' outside of function\")\n    this.next()\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.eat(tt.semi) || this.insertSemicolon()) node.argument = null\n    else { node.argument = this.parseExpression(); this.semicolon() }\n    return this.finishNode(node, \"ReturnStatement\")\n  }\n\n  pp$1.parseSwitchStatement = function(node) {\n    var this$1 = this;\n\n    this.next()\n    node.discriminant = this.parseParenExpression()\n    node.cases = []\n    this.expect(tt.braceL)\n    this.labels.push(switchLabel)\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    for (var cur, sawDefault = false; this.type != tt.braceR;) {\n      if (this$1.type === tt._case || this$1.type === tt._default) {\n        var isCase = this$1.type === tt._case\n        if (cur) this$1.finishNode(cur, \"SwitchCase\")\n        node.cases.push(cur = this$1.startNode())\n        cur.consequent = []\n        this$1.next()\n        if (isCase) {\n          cur.test = this$1.parseExpression()\n        } else {\n          if (sawDefault) this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\")\n          sawDefault = true\n          cur.test = null\n        }\n        this$1.expect(tt.colon)\n      } else {\n        if (!cur) this$1.unexpected()\n        cur.consequent.push(this$1.parseStatement(true))\n      }\n    }\n    if (cur) this.finishNode(cur, \"SwitchCase\")\n    this.next() // Closing brace\n    this.labels.pop()\n    return this.finishNode(node, \"SwitchStatement\")\n  }\n\n  pp$1.parseThrowStatement = function(node) {\n    this.next()\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n      this.raise(this.lastTokEnd, \"Illegal newline after throw\")\n    node.argument = this.parseExpression()\n    this.semicolon()\n    return this.finishNode(node, \"ThrowStatement\")\n  }\n\n  // Reused empty array added for node fields that are always empty.\n\n  var empty = []\n\n  pp$1.parseTryStatement = function(node) {\n    this.next()\n    node.block = this.parseBlock()\n    node.handler = null\n    if (this.type === tt._catch) {\n      var clause = this.startNode()\n      this.next()\n      this.expect(tt.parenL)\n      clause.param = this.parseBindingAtom()\n      this.checkLVal(clause.param, true)\n      this.expect(tt.parenR)\n      clause.body = this.parseBlock()\n      node.handler = this.finishNode(clause, \"CatchClause\")\n    }\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n    if (!node.handler && !node.finalizer)\n      this.raise(node.start, \"Missing catch or finally clause\")\n    return this.finishNode(node, \"TryStatement\")\n  }\n\n  pp$1.parseVarStatement = function(node, kind) {\n    this.next()\n    this.parseVar(node, false, kind)\n    this.semicolon()\n    return this.finishNode(node, \"VariableDeclaration\")\n  }\n\n  pp$1.parseWhileStatement = function(node) {\n    this.next()\n    node.test = this.parseParenExpression()\n    this.labels.push(loopLabel)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, \"WhileStatement\")\n  }\n\n  pp$1.parseWithStatement = function(node) {\n    if (this.strict) this.raise(this.start, \"'with' in strict mode\")\n    this.next()\n    node.object = this.parseParenExpression()\n    node.body = this.parseStatement(false)\n    return this.finishNode(node, \"WithStatement\")\n  }\n\n  pp$1.parseEmptyStatement = function(node) {\n    this.next()\n    return this.finishNode(node, \"EmptyStatement\")\n  }\n\n  pp$1.parseLabeledStatement = function(node, maybeName, expr) {\n    var this$1 = this;\n\n    for (var i = 0; i < this.labels.length; ++i)\n      if (this$1.labels[i].name === maybeName) this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\")\n    var kind = this.type.isLoop ? \"loop\" : this.type === tt._switch ? \"switch\" : null\n    for (var i$1 = this.labels.length - 1; i$1 >= 0; i$1--) {\n      var label = this$1.labels[i$1]\n      if (label.statementStart == node.start) {\n        label.statementStart = this$1.start\n        label.kind = kind\n      } else break\n    }\n    this.labels.push({name: maybeName, kind: kind, statementStart: this.start})\n    node.body = this.parseStatement(true)\n    this.labels.pop()\n    node.label = expr\n    return this.finishNode(node, \"LabeledStatement\")\n  }\n\n  pp$1.parseExpressionStatement = function(node, expr) {\n    node.expression = expr\n    this.semicolon()\n    return this.finishNode(node, \"ExpressionStatement\")\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  pp$1.parseBlock = function(allowStrict) {\n    var this$1 = this;\n\n    var node = this.startNode(), first = true, oldStrict\n    node.body = []\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      var stmt = this$1.parseStatement(true)\n      node.body.push(stmt)\n      if (first && allowStrict && this$1.isUseStrict(stmt)) {\n        oldStrict = this$1.strict\n        this$1.setStrict(this$1.strict = true)\n      }\n      first = false\n    }\n    if (oldStrict === false) this.setStrict(false)\n    return this.finishNode(node, \"BlockStatement\")\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  pp$1.parseFor = function(node, init) {\n    node.init = init\n    this.expect(tt.semi)\n    node.test = this.type === tt.semi ? null : this.parseExpression()\n    this.expect(tt.semi)\n    node.update = this.type === tt.parenR ? null : this.parseExpression()\n    this.expect(tt.parenR)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, \"ForStatement\")\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  pp$1.parseForIn = function(node, init) {\n    var type = this.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n    this.next()\n    node.left = init\n    node.right = this.parseExpression()\n    this.expect(tt.parenR)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, type)\n  }\n\n  // Parse a list of variable declarations.\n\n  pp$1.parseVar = function(node, isFor, kind) {\n    var this$1 = this;\n\n    node.declarations = []\n    node.kind = kind\n    for (;;) {\n      var decl = this$1.startNode()\n      this$1.parseVarId(decl)\n      if (this$1.eat(tt.eq)) {\n        decl.init = this$1.parseMaybeAssign(isFor)\n      } else if (kind === \"const\" && !(this$1.type === tt._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n        this$1.unexpected()\n      } else if (decl.id.type != \"Identifier\" && !(isFor && (this$1.type === tt._in || this$1.isContextual(\"of\")))) {\n        this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\")\n      } else {\n        decl.init = null\n      }\n      node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"))\n      if (!this$1.eat(tt.comma)) break\n    }\n    return node\n  }\n\n  pp$1.parseVarId = function(decl) {\n    decl.id = this.parseBindingAtom()\n    this.checkLVal(decl.id, true)\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$1.parseFunction = function(node, isStatement, allowExpressionBody) {\n    this.initFunction(node)\n    if (this.options.ecmaVersion >= 6)\n      node.generator = this.eat(tt.star)\n    var oldInGen = this.inGenerator\n    this.inGenerator = node.generator\n    if (isStatement || this.type === tt.name)\n      node.id = this.parseIdent()\n    this.parseFunctionParams(node)\n    this.parseFunctionBody(node, allowExpressionBody)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  }\n\n  pp$1.parseFunctionParams = function(node) {\n    this.expect(tt.parenL)\n    node.params = this.parseBindingList(tt.parenR, false, false, true)\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$1.parseClass = function(node, isStatement) {\n    var this$1 = this;\n\n    this.next()\n    this.parseClassId(node, isStatement)\n    this.parseClassSuper(node)\n    var classBody = this.startNode()\n    var hadConstructor = false\n    classBody.body = []\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (this$1.eat(tt.semi)) continue\n      var method = this$1.startNode()\n      var isGenerator = this$1.eat(tt.star)\n      var isMaybeStatic = this$1.type === tt.name && this$1.value === \"static\"\n      this$1.parsePropertyName(method)\n      method.static = isMaybeStatic && this$1.type !== tt.parenL\n      if (method.static) {\n        if (isGenerator) this$1.unexpected()\n        isGenerator = this$1.eat(tt.star)\n        this$1.parsePropertyName(method)\n      }\n      method.kind = \"method\"\n      var isGetSet = false\n      if (!method.computed) {\n        var key = method.key;\n        if (!isGenerator && key.type === \"Identifier\" && this$1.type !== tt.parenL && (key.name === \"get\" || key.name === \"set\")) {\n          isGetSet = true\n          method.kind = key.name\n          key = this$1.parsePropertyName(method)\n        }\n        if (!method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n            key.type === \"Literal\" && key.value === \"constructor\")) {\n          if (hadConstructor) this$1.raise(key.start, \"Duplicate constructor in the same class\")\n          if (isGetSet) this$1.raise(key.start, \"Constructor can't have get/set modifier\")\n          if (isGenerator) this$1.raise(key.start, \"Constructor can't be a generator\")\n          method.kind = \"constructor\"\n          hadConstructor = true\n        }\n      }\n      this$1.parseClassMethod(classBody, method, isGenerator)\n      if (isGetSet) {\n        var paramCount = method.kind === \"get\" ? 0 : 1\n        if (method.value.params.length !== paramCount) {\n          var start = method.value.start\n          if (method.kind === \"get\")\n            this$1.raiseRecoverable(start, \"getter should have no params\")\n          else\n            this$1.raiseRecoverable(start, \"setter should have exactly one param\")\n        }\n        if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n          this$1.raise(method.value.params[0].start, \"Setter cannot use rest params\")\n      }\n    }\n    node.body = this.finishNode(classBody, \"ClassBody\")\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  }\n\n  pp$1.parseClassMethod = function(classBody, method, isGenerator) {\n    method.value = this.parseMethod(isGenerator)\n    classBody.body.push(this.finishNode(method, \"MethodDefinition\"))\n  }\n\n  pp$1.parseClassId = function(node, isStatement) {\n    node.id = this.type === tt.name ? this.parseIdent() : isStatement ? this.unexpected() : null\n  }\n\n  pp$1.parseClassSuper = function(node) {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null\n  }\n\n  // Parses module export declaration.\n\n  pp$1.parseExport = function(node) {\n    var this$1 = this;\n\n    this.next()\n    // export * from '...'\n    if (this.eat(tt.star)) {\n      this.expectContextual(\"from\")\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n      this.semicolon()\n      return this.finishNode(node, \"ExportAllDeclaration\")\n    }\n    if (this.eat(tt._default)) { // export default ...\n      var parens = this.type == tt.parenL\n      var expr = this.parseMaybeAssign()\n      var needsSemi = true\n      if (!parens && (expr.type == \"FunctionExpression\" ||\n                      expr.type == \"ClassExpression\")) {\n        needsSemi = false\n        if (expr.id) {\n          expr.type = expr.type == \"FunctionExpression\"\n            ? \"FunctionDeclaration\"\n            : \"ClassDeclaration\"\n        }\n      }\n      node.declaration = expr\n      if (needsSemi) this.semicolon()\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    // export var|const|let|function|class ...\n    if (this.shouldParseExportStatement()) {\n      node.declaration = this.parseStatement(true)\n      node.specifiers = []\n      node.source = null\n    } else { // export { x, y as z } [from '...']\n      node.declaration = null\n      node.specifiers = this.parseExportSpecifiers()\n      if (this.eatContextual(\"from\")) {\n        node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n      } else {\n        // check for keywords used as local names\n        for (var i = 0; i < node.specifiers.length; i++) {\n          if (this$1.keywords.test(node.specifiers[i].local.name) || this$1.reservedWords.test(node.specifiers[i].local.name)) {\n            this$1.unexpected(node.specifiers[i].local.start)\n          }\n        }\n\n        node.source = null\n      }\n      this.semicolon()\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  }\n\n  pp$1.shouldParseExportStatement = function() {\n    return this.type.keyword || this.isLet()\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  pp$1.parseExportSpecifiers = function() {\n    var this$1 = this;\n\n    var nodes = [], first = true\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var node = this$1.startNode()\n      node.local = this$1.parseIdent(this$1.type === tt._default)\n      node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local\n      nodes.push(this$1.finishNode(node, \"ExportSpecifier\"))\n    }\n    return nodes\n  }\n\n  // Parses import declaration.\n\n  pp$1.parseImport = function(node) {\n    this.next()\n    // import '...'\n    if (this.type === tt.string) {\n      node.specifiers = empty\n      node.source = this.parseExprAtom()\n    } else {\n      node.specifiers = this.parseImportSpecifiers()\n      this.expectContextual(\"from\")\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n    }\n    this.semicolon()\n    return this.finishNode(node, \"ImportDeclaration\")\n  }\n\n  // Parses a comma-separated list of module imports.\n\n  pp$1.parseImportSpecifiers = function() {\n    var this$1 = this;\n\n    var nodes = [], first = true\n    if (this.type === tt.name) {\n      // import defaultObj, { x, y as z } from '...'\n      var node = this.startNode()\n      node.local = this.parseIdent()\n      this.checkLVal(node.local, true)\n      nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"))\n      if (!this.eat(tt.comma)) return nodes\n    }\n    if (this.type === tt.star) {\n      var node$1 = this.startNode()\n      this.next()\n      this.expectContextual(\"as\")\n      node$1.local = this.parseIdent()\n      this.checkLVal(node$1.local, true)\n      nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"))\n      return nodes\n    }\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var node$2 = this$1.startNode()\n      node$2.imported = this$1.parseIdent(true)\n      if (this$1.eatContextual(\"as\")) {\n        node$2.local = this$1.parseIdent()\n      } else {\n        node$2.local = node$2.imported\n        if (this$1.isKeyword(node$2.local.name)) this$1.unexpected(node$2.local.start)\n        if (this$1.reservedWordsStrict.test(node$2.local.name)) this$1.raise(node$2.local.start, \"The keyword '\" + node$2.local.name + \"' is reserved\")\n      }\n      this$1.checkLVal(node$2.local, true)\n      nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"))\n    }\n    return nodes\n  }\n\n  var pp$2 = Parser.prototype\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  pp$2.toAssignable = function(node, isBinding) {\n    var this$1 = this;\n\n    if (this.options.ecmaVersion >= 6 && node) {\n      switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n        break\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\"\n        for (var i = 0; i < node.properties.length; i++) {\n          var prop = node.properties[i]\n          if (prop.kind !== \"init\") this$1.raise(prop.key.start, \"Object pattern can't contain getter or setter\")\n          this$1.toAssignable(prop.value, isBinding)\n        }\n        break\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\"\n        this.toAssignableList(node.elements, isBinding)\n        break\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\"\n          delete node.operator\n          // falls through to AssignmentPattern\n        } else {\n          this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\")\n          break\n        }\n\n      case \"AssignmentPattern\":\n        if (node.right.type === \"YieldExpression\")\n          this.raise(node.right.start, \"Yield expression cannot be a default value\")\n        break\n\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isBinding)\n        break\n\n      case \"MemberExpression\":\n        if (!isBinding) break\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\")\n      }\n    }\n    return node\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  pp$2.toAssignableList = function(exprList, isBinding) {\n    var this$1 = this;\n\n    var end = exprList.length\n    if (end) {\n      var last = exprList[end - 1]\n      if (last && last.type == \"RestElement\") {\n        --end\n      } else if (last && last.type == \"SpreadElement\") {\n        last.type = \"RestElement\"\n        var arg = last.argument\n        this.toAssignable(arg, isBinding)\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\")\n          this.unexpected(arg.start)\n        --end\n      }\n\n      if (isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n        this.unexpected(last.argument.start)\n    }\n    for (var i = 0; i < end; i++) {\n      var elt = exprList[i]\n      if (elt) this$1.toAssignable(elt, isBinding)\n    }\n    return exprList\n  }\n\n  // Parses spread element.\n\n  pp$2.parseSpread = function(refDestructuringErrors) {\n    var node = this.startNode()\n    this.next()\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors)\n    return this.finishNode(node, \"SpreadElement\")\n  }\n\n  pp$2.parseRest = function(allowNonIdent) {\n    var node = this.startNode()\n    this.next()\n\n    // RestElement inside of a function parameter must be an identifier\n    if (allowNonIdent) node.argument = this.type === tt.name ? this.parseIdent() : this.unexpected()\n    else node.argument = this.type === tt.name || this.type === tt.bracketL ? this.parseBindingAtom() : this.unexpected()\n\n    return this.finishNode(node, \"RestElement\")\n  }\n\n  // Parses lvalue (assignable) atom.\n\n  pp$2.parseBindingAtom = function() {\n    if (this.options.ecmaVersion < 6) return this.parseIdent()\n    switch (this.type) {\n    case tt.name:\n      return this.parseIdent()\n\n    case tt.bracketL:\n      var node = this.startNode()\n      this.next()\n      node.elements = this.parseBindingList(tt.bracketR, true, true)\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case tt.braceL:\n      return this.parseObj(true)\n\n    default:\n      this.unexpected()\n    }\n  }\n\n  pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowNonIdent) {\n    var this$1 = this;\n\n    var elts = [], first = true\n    while (!this.eat(close)) {\n      if (first) first = false\n      else this$1.expect(tt.comma)\n      if (allowEmpty && this$1.type === tt.comma) {\n        elts.push(null)\n      } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n        break\n      } else if (this$1.type === tt.ellipsis) {\n        var rest = this$1.parseRest(allowNonIdent)\n        this$1.parseBindingListItem(rest)\n        elts.push(rest)\n        if (this$1.type === tt.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\")\n        this$1.expect(close)\n        break\n      } else {\n        var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc)\n        this$1.parseBindingListItem(elem)\n        elts.push(elem)\n      }\n    }\n    return elts\n  }\n\n  pp$2.parseBindingListItem = function(param) {\n    return param\n  }\n\n  // Parses assignment pattern around given atom if possible.\n\n  pp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n    left = left || this.parseBindingAtom()\n    if (this.options.ecmaVersion < 6 || !this.eat(tt.eq)) return left\n    var node = this.startNodeAt(startPos, startLoc)\n    node.left = left\n    node.right = this.parseMaybeAssign()\n    return this.finishNode(node, \"AssignmentPattern\")\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  pp$2.checkLVal = function(expr, isBinding, checkClashes) {\n    var this$1 = this;\n\n    switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n        this.raiseRecoverable(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\")\n      if (checkClashes) {\n        if (has(checkClashes, expr.name))\n          this.raiseRecoverable(expr.start, \"Argument name clash\")\n        checkClashes[expr.name] = true\n      }\n      break\n\n    case \"MemberExpression\":\n      if (isBinding) this.raiseRecoverable(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\")\n      break\n\n    case \"ObjectPattern\":\n      for (var i = 0; i < expr.properties.length; i++)\n        this$1.checkLVal(expr.properties[i].value, isBinding, checkClashes)\n      break\n\n    case \"ArrayPattern\":\n      for (var i$1 = 0; i$1 < expr.elements.length; i$1++) {\n        var elem = expr.elements[i$1]\n        if (elem) this$1.checkLVal(elem, isBinding, checkClashes)\n      }\n      break\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes)\n      break\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes)\n      break\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, isBinding, checkClashes)\n      break\n\n    default:\n      this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\")\n    }\n  }\n\n  var pp$3 = Parser.prototype\n\n  // Check if property name clashes with already added.\n  // Object/class getters and setters are not allowed to clash —\n  // either with each other or with an init property — and in\n  // strict mode, init properties are also not allowed to be repeated.\n\n  pp$3.checkPropClash = function(prop, propHash) {\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n      return\n    var key = prop.key;\n    var name\n    switch (key.type) {\n    case \"Identifier\": name = key.name; break\n    case \"Literal\": name = String(key.value); break\n    default: return\n    }\n    var kind = prop.kind;\n    if (this.options.ecmaVersion >= 6) {\n      if (name === \"__proto__\" && kind === \"init\") {\n        if (propHash.proto) this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\")\n        propHash.proto = true\n      }\n      return\n    }\n    name = \"$\" + name\n    var other = propHash[name]\n    if (other) {\n      var isGetSet = kind !== \"init\"\n      if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init))\n        this.raiseRecoverable(key.start, \"Redefinition of property\")\n    } else {\n      other = propHash[name] = {\n        init: false,\n        get: false,\n        set: false\n      }\n    }\n    other[kind] = true\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function(s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression. The optional arguments are used to\n  // forbid the `in` operator (in for loops initalization expressions)\n  // and provide reference for storing '=' operator inside shorthand\n  // property assignment in contexts where both object expression\n  // and object pattern might appear (so it's possible to raise\n  // delayed syntax error at correct position).\n\n  pp$3.parseExpression = function(noIn, refDestructuringErrors) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseMaybeAssign(noIn, refDestructuringErrors)\n    if (this.type === tt.comma) {\n      var node = this.startNodeAt(startPos, startLoc)\n      node.expressions = [expr]\n      while (this.eat(tt.comma)) node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors))\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n    if (this.inGenerator && this.isContextual(\"yield\")) return this.parseYield()\n\n    var ownDestructuringErrors = false\n    if (!refDestructuringErrors) {\n      refDestructuringErrors = new DestructuringErrors\n      ownDestructuringErrors = true\n    }\n    var startPos = this.start, startLoc = this.startLoc\n    if (this.type == tt.parenL || this.type == tt.name)\n      this.potentialArrowAt = this.start\n    var left = this.parseMaybeConditional(noIn, refDestructuringErrors)\n    if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc)\n    if (this.type.isAssign) {\n      this.checkPatternErrors(refDestructuringErrors, true)\n      if (!ownDestructuringErrors) DestructuringErrors.call(refDestructuringErrors)\n      var node = this.startNodeAt(startPos, startLoc)\n      node.operator = this.value\n      node.left = this.type === tt.eq ? this.toAssignable(left) : left\n      refDestructuringErrors.shorthandAssign = 0 // reset because shorthand default was used correctly\n      this.checkLVal(left)\n      this.next()\n      node.right = this.parseMaybeAssign(noIn)\n      return this.finishNode(node, \"AssignmentExpression\")\n    } else {\n      if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true)\n    }\n    return left\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseExprOps(noIn, refDestructuringErrors)\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n    if (this.eat(tt.question)) {\n      var node = this.startNodeAt(startPos, startLoc)\n      node.test = expr\n      node.consequent = this.parseMaybeAssign()\n      this.expect(tt.colon)\n      node.alternate = this.parseMaybeAssign(noIn)\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  }\n\n  // Start the precedence parser.\n\n  pp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false)\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    var prec = this.type.binop\n    if (prec != null && (!noIn || this.type !== tt._in)) {\n      if (prec > minPrec) {\n        var logical = this.type === tt.logicalOR || this.type === tt.logicalAND\n        var op = this.value\n        this.next()\n        var startPos = this.start, startLoc = this.startLoc\n        var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn)\n        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical)\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n      }\n    }\n    return left\n  }\n\n  pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n    var node = this.startNodeAt(startPos, startLoc)\n    node.left = left\n    node.operator = op\n    node.right = right\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n  }\n\n  // Parse unary operators, both prefix and postfix.\n\n  pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc, expr\n    if (this.type.prefix) {\n      var node = this.startNode(), update = this.type === tt.incDec\n      node.operator = this.value\n      node.prefix = true\n      this.next()\n      node.argument = this.parseMaybeUnary(null, true)\n      this.checkExpressionErrors(refDestructuringErrors, true)\n      if (update) this.checkLVal(node.argument)\n      else if (this.strict && node.operator === \"delete\" &&\n               node.argument.type === \"Identifier\")\n        this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\")\n      else sawUnary = true\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n    } else {\n      expr = this.parseExprSubscripts(refDestructuringErrors)\n      if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n      while (this.type.postfix && !this.canInsertSemicolon()) {\n        var node$1 = this$1.startNodeAt(startPos, startLoc)\n        node$1.operator = this$1.value\n        node$1.prefix = false\n        node$1.argument = expr\n        this$1.checkLVal(expr)\n        this$1.next()\n        expr = this$1.finishNode(node$1, \"UpdateExpression\")\n      }\n    }\n\n    if (!sawUnary && this.eat(tt.starstar))\n      return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false)\n    else\n      return expr\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  pp$3.parseExprSubscripts = function(refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseExprAtom(refDestructuringErrors)\n    var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\"\n    if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr\n    return this.parseSubscripts(expr, startPos, startLoc)\n  }\n\n  pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n    var this$1 = this;\n\n    for (;;) {\n      if (this$1.eat(tt.dot)) {\n        var node = this$1.startNodeAt(startPos, startLoc)\n        node.object = base\n        node.property = this$1.parseIdent(true)\n        node.computed = false\n        base = this$1.finishNode(node, \"MemberExpression\")\n      } else if (this$1.eat(tt.bracketL)) {\n        var node$1 = this$1.startNodeAt(startPos, startLoc)\n        node$1.object = base\n        node$1.property = this$1.parseExpression()\n        node$1.computed = true\n        this$1.expect(tt.bracketR)\n        base = this$1.finishNode(node$1, \"MemberExpression\")\n      } else if (!noCalls && this$1.eat(tt.parenL)) {\n        var node$2 = this$1.startNodeAt(startPos, startLoc)\n        node$2.callee = base\n        node$2.arguments = this$1.parseExprList(tt.parenR, false)\n        base = this$1.finishNode(node$2, \"CallExpression\")\n      } else if (this$1.type === tt.backQuote) {\n        var node$3 = this$1.startNodeAt(startPos, startLoc)\n        node$3.tag = base\n        node$3.quasi = this$1.parseTemplate()\n        base = this$1.finishNode(node$3, \"TaggedTemplateExpression\")\n      } else {\n        return base\n      }\n    }\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  pp$3.parseExprAtom = function(refDestructuringErrors) {\n    var node, canBeArrow = this.potentialArrowAt == this.start\n    switch (this.type) {\n    case tt._super:\n      if (!this.inFunction)\n        this.raise(this.start, \"'super' outside of function or class\")\n\n    case tt._this:\n      var type = this.type === tt._this ? \"ThisExpression\" : \"Super\"\n      node = this.startNode()\n      this.next()\n      return this.finishNode(node, type)\n\n    case tt.name:\n      var startPos = this.start, startLoc = this.startLoc\n      var id = this.parseIdent(this.type !== tt.name)\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow))\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id])\n      return id\n\n    case tt.regexp:\n      var value = this.value\n      node = this.parseLiteral(value.value)\n      node.regex = {pattern: value.pattern, flags: value.flags}\n      return node\n\n    case tt.num: case tt.string:\n      return this.parseLiteral(this.value)\n\n    case tt._null: case tt._true: case tt._false:\n      node = this.startNode()\n      node.value = this.type === tt._null ? null : this.type === tt._true\n      node.raw = this.type.keyword\n      this.next()\n      return this.finishNode(node, \"Literal\")\n\n    case tt.parenL:\n      return this.parseParenAndDistinguishExpression(canBeArrow)\n\n    case tt.bracketL:\n      node = this.startNode()\n      this.next()\n      node.elements = this.parseExprList(tt.bracketR, true, true, refDestructuringErrors)\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case tt.braceL:\n      return this.parseObj(false, refDestructuringErrors)\n\n    case tt._function:\n      node = this.startNode()\n      this.next()\n      return this.parseFunction(node, false)\n\n    case tt._class:\n      return this.parseClass(this.startNode(), false)\n\n    case tt._new:\n      return this.parseNew()\n\n    case tt.backQuote:\n      return this.parseTemplate()\n\n    default:\n      this.unexpected()\n    }\n  }\n\n  pp$3.parseLiteral = function(value) {\n    var node = this.startNode()\n    node.value = value\n    node.raw = this.input.slice(this.start, this.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n  }\n\n  pp$3.parseParenExpression = function() {\n    this.expect(tt.parenL)\n    var val = this.parseExpression()\n    this.expect(tt.parenR)\n    return val\n  }\n\n  pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc, val\n    if (this.options.ecmaVersion >= 6) {\n      this.next()\n\n      var innerStartPos = this.start, innerStartLoc = this.startLoc\n      var exprList = [], first = true\n      var refDestructuringErrors = new DestructuringErrors, spreadStart, innerParenStart\n      while (this.type !== tt.parenR) {\n        first ? first = false : this$1.expect(tt.comma)\n        if (this$1.type === tt.ellipsis) {\n          spreadStart = this$1.start\n          exprList.push(this$1.parseParenItem(this$1.parseRest()))\n          break\n        } else {\n          if (this$1.type === tt.parenL && !innerParenStart) {\n            innerParenStart = this$1.start\n          }\n          exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem))\n        }\n      }\n      var innerEndPos = this.start, innerEndLoc = this.startLoc\n      this.expect(tt.parenR)\n\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, true)\n        if (innerParenStart) this.unexpected(innerParenStart)\n        return this.parseParenArrowList(startPos, startLoc, exprList)\n      }\n\n      if (!exprList.length) this.unexpected(this.lastTokStart)\n      if (spreadStart) this.unexpected(spreadStart)\n      this.checkExpressionErrors(refDestructuringErrors, true)\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc)\n        val.expressions = exprList\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc)\n      } else {\n        val = exprList[0]\n      }\n    } else {\n      val = this.parseParenExpression()\n    }\n\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(startPos, startLoc)\n      par.expression = val\n      return this.finishNode(par, \"ParenthesizedExpression\")\n    } else {\n      return val\n    }\n  }\n\n  pp$3.parseParenItem = function(item) {\n    return item\n  }\n\n  pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  var empty$1 = []\n\n  pp$3.parseNew = function() {\n    var node = this.startNode()\n    var meta = this.parseIdent(true)\n    if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n      node.meta = meta\n      node.property = this.parseIdent(true)\n      if (node.property.name !== \"target\")\n        this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\")\n      if (!this.inFunction)\n        this.raiseRecoverable(node.start, \"new.target can only be used in functions\")\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var startPos = this.start, startLoc = this.startLoc\n    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true)\n    if (this.eat(tt.parenL)) node.arguments = this.parseExprList(tt.parenR, false)\n    else node.arguments = empty$1\n    return this.finishNode(node, \"NewExpression\")\n  }\n\n  // Parse template expression.\n\n  pp$3.parseTemplateElement = function() {\n    var elem = this.startNode()\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n      cooked: this.value\n    }\n    this.next()\n    elem.tail = this.type === tt.backQuote\n    return this.finishNode(elem, \"TemplateElement\")\n  }\n\n  pp$3.parseTemplate = function() {\n    var this$1 = this;\n\n    var node = this.startNode()\n    this.next()\n    node.expressions = []\n    var curElt = this.parseTemplateElement()\n    node.quasis = [curElt]\n    while (!curElt.tail) {\n      this$1.expect(tt.dollarBraceL)\n      node.expressions.push(this$1.parseExpression())\n      this$1.expect(tt.braceR)\n      node.quasis.push(curElt = this$1.parseTemplateElement())\n    }\n    this.next()\n    return this.finishNode(node, \"TemplateLiteral\")\n  }\n\n  // Parse an object literal or binding pattern.\n\n  pp$3.parseObj = function(isPattern, refDestructuringErrors) {\n    var this$1 = this;\n\n    var node = this.startNode(), first = true, propHash = {}\n    node.properties = []\n    this.next()\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var prop = this$1.startNode(), isGenerator, startPos, startLoc\n      if (this$1.options.ecmaVersion >= 6) {\n        prop.method = false\n        prop.shorthand = false\n        if (isPattern || refDestructuringErrors) {\n          startPos = this$1.start\n          startLoc = this$1.startLoc\n        }\n        if (!isPattern)\n          isGenerator = this$1.eat(tt.star)\n      }\n      this$1.parsePropertyName(prop)\n      this$1.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors)\n      this$1.checkPropClash(prop, propHash)\n      node.properties.push(this$1.finishNode(prop, \"Property\"))\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n  }\n\n  pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors) {\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors)\n      prop.kind = \"init\"\n    } else if (this.options.ecmaVersion >= 6 && this.type === tt.parenL) {\n      if (isPattern) this.unexpected()\n      prop.kind = \"init\"\n      prop.method = true\n      prop.value = this.parseMethod(isGenerator)\n    } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n               (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.type != tt.comma && this.type != tt.braceR)) {\n      if (isGenerator || isPattern) this.unexpected()\n      prop.kind = prop.key.name\n      this.parsePropertyName(prop)\n      prop.value = this.parseMethod(false)\n      var paramCount = prop.kind === \"get\" ? 0 : 1\n      if (prop.value.params.length !== paramCount) {\n        var start = prop.value.start\n        if (prop.kind === \"get\")\n          this.raiseRecoverable(start, \"getter should have no params\")\n        else\n          this.raiseRecoverable(start, \"setter should have exactly one param\")\n      }\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\")\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n      if (this.keywords.test(prop.key.name) ||\n          (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(prop.key.name) ||\n          (this.inGenerator && prop.key.name == \"yield\"))\n        this.raiseRecoverable(prop.key.start, \"'\" + prop.key.name + \"' can not be used as shorthand property\")\n      prop.kind = \"init\"\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n      } else if (this.type === tt.eq && refDestructuringErrors) {\n        if (!refDestructuringErrors.shorthandAssign)\n          refDestructuringErrors.shorthandAssign = this.start\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n      } else {\n        prop.value = prop.key\n      }\n      prop.shorthand = true\n    } else this.unexpected()\n  }\n\n  pp$3.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(tt.bracketL)) {\n        prop.computed = true\n        prop.key = this.parseMaybeAssign()\n        this.expect(tt.bracketR)\n        return prop.key\n      } else {\n        prop.computed = false\n      }\n    }\n    return prop.key = this.type === tt.num || this.type === tt.string ? this.parseExprAtom() : this.parseIdent(true)\n  }\n\n  // Initialize empty function node.\n\n  pp$3.initFunction = function(node) {\n    node.id = null\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = false\n      node.expression = false\n    }\n  }\n\n  // Parse object or class method.\n\n  pp$3.parseMethod = function(isGenerator) {\n    var node = this.startNode(), oldInGen = this.inGenerator\n    this.inGenerator = isGenerator\n    this.initFunction(node)\n    this.expect(tt.parenL)\n    node.params = this.parseBindingList(tt.parenR, false, false)\n    if (this.options.ecmaVersion >= 6)\n      node.generator = isGenerator\n    this.parseFunctionBody(node, false)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, \"FunctionExpression\")\n  }\n\n  // Parse arrow function expression with given parameters.\n\n  pp$3.parseArrowExpression = function(node, params) {\n    var oldInGen = this.inGenerator\n    this.inGenerator = false\n    this.initFunction(node)\n    node.params = this.toAssignableList(params, true)\n    this.parseFunctionBody(node, true)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  }\n\n  // Parse function body and check parameters.\n\n  pp$3.parseFunctionBody = function(node, isArrowFunction) {\n    var isExpression = isArrowFunction && this.type !== tt.braceL\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign()\n      node.expression = true\n    } else {\n      // Start a new scope with regard to labels and the `inFunction`\n      // flag (restore them to their old value afterwards).\n      var oldInFunc = this.inFunction, oldLabels = this.labels\n      this.inFunction = true; this.labels = []\n      node.body = this.parseBlock(true)\n      node.expression = false\n      this.inFunction = oldInFunc; this.labels = oldLabels\n    }\n\n    // If this is a strict mode function, verify that argument names\n    // are not repeated, and it does not try to bind the words `eval`\n    // or `arguments`.\n    var useStrict = (!isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) ? node.body.body[0] : null;\n    if (this.strict || useStrict) {\n      var oldStrict = this.strict\n      this.strict = true\n      if (node.id)\n        this.checkLVal(node.id, true)\n      this.checkParams(node, useStrict)\n      this.strict = oldStrict\n    } else if (isArrowFunction) {\n      this.checkParams(node, useStrict)\n    }\n  }\n\n  // Checks function params for various disallowed patterns such as using \"eval\"\n  // or \"arguments\" and duplicate parameters.\n\n  pp$3.checkParams = function(node, useStrict) {\n      var this$1 = this;\n\n      var nameHash = {}\n      for (var i = 0; i < node.params.length; i++) {\n        if (useStrict && this$1.options.ecmaVersion >= 7 && node.params[i].type !== \"Identifier\")\n          this$1.raiseRecoverable(useStrict.start, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n        this$1.checkLVal(node.params[i], true, nameHash)\n      }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var this$1 = this;\n\n    var elts = [], first = true\n    while (!this.eat(close)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (allowTrailingComma && this$1.afterTrailingComma(close)) break\n      } else first = false\n\n      var elt\n      if (allowEmpty && this$1.type === tt.comma)\n        elt = null\n      else if (this$1.type === tt.ellipsis) {\n        elt = this$1.parseSpread(refDestructuringErrors)\n        if (this$1.type === tt.comma && refDestructuringErrors && !refDestructuringErrors.trailingComma) {\n          refDestructuringErrors.trailingComma = this$1.lastTokStart\n        }\n      } else\n        elt = this$1.parseMaybeAssign(false, refDestructuringErrors)\n      elts.push(elt)\n    }\n    return elts\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n\n  pp$3.parseIdent = function(liberal) {\n    var node = this.startNode()\n    if (liberal && this.options.allowReserved == \"never\") liberal = false\n    if (this.type === tt.name) {\n      if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) &&\n          (this.options.ecmaVersion >= 6 ||\n           this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1))\n        this.raiseRecoverable(this.start, \"The keyword '\" + this.value + \"' is reserved\")\n      if (!liberal && this.inGenerator && this.value === \"yield\")\n        this.raiseRecoverable(this.start, \"Can not use 'yield' as identifier inside a generator\")\n      node.name = this.value\n    } else if (liberal && this.type.keyword) {\n      node.name = this.type.keyword\n    } else {\n      this.unexpected()\n    }\n    this.next()\n    return this.finishNode(node, \"Identifier\")\n  }\n\n  // Parses yield expression inside generator.\n\n  pp$3.parseYield = function() {\n    var node = this.startNode()\n    this.next()\n    if (this.type == tt.semi || this.canInsertSemicolon() || (this.type != tt.star && !this.type.startsExpr)) {\n      node.delegate = false\n      node.argument = null\n    } else {\n      node.delegate = this.eat(tt.star)\n      node.argument = this.parseMaybeAssign()\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  }\n\n  var pp$4 = Parser.prototype\n\n  // This function is used to raise exceptions on parse errors. It\n  // takes an offset integer (into the current `input`) to indicate\n  // the location of the error, attaches the position to the end\n  // of the error message, and then raises a `SyntaxError` with that\n  // message.\n\n  pp$4.raise = function(pos, message) {\n    var loc = getLineInfo(this.input, pos)\n    message += \" (\" + loc.line + \":\" + loc.column + \")\"\n    var err = new SyntaxError(message)\n    err.pos = pos; err.loc = loc; err.raisedAt = this.pos\n    throw err\n  }\n\n  pp$4.raiseRecoverable = pp$4.raise\n\n  pp$4.curPosition = function() {\n    if (this.options.locations) {\n      return new Position(this.curLine, this.pos - this.lineStart)\n    }\n  }\n\n  var Node = function Node(parser, pos, loc) {\n    this.type = \"\"\n    this.start = pos\n    this.end = 0\n    if (parser.options.locations)\n      this.loc = new SourceLocation(parser, loc)\n    if (parser.options.directSourceFile)\n      this.sourceFile = parser.options.directSourceFile\n    if (parser.options.ranges)\n      this.range = [pos, 0]\n  };\n\n  // Start an AST node, attaching a start offset.\n\n  var pp$5 = Parser.prototype\n\n  pp$5.startNode = function() {\n    return new Node(this, this.start, this.startLoc)\n  }\n\n  pp$5.startNodeAt = function(pos, loc) {\n    return new Node(this, pos, loc)\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  function finishNodeAt(node, type, pos, loc) {\n    node.type = type\n    node.end = pos\n    if (this.options.locations)\n      node.loc.end = loc\n    if (this.options.ranges)\n      node.range[1] = pos\n    return node\n  }\n\n  pp$5.finishNode = function(node, type) {\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n  }\n\n  // Finish node at given position\n\n  pp$5.finishNodeAt = function(node, type, pos, loc) {\n    return finishNodeAt.call(this, node, type, pos, loc)\n  }\n\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n    this.token = token\n    this.isExpr = !!isExpr\n    this.preserveSpace = !!preserveSpace\n    this.override = override\n  };\n\n  var types = {\n    b_stat: new TokContext(\"{\", false),\n    b_expr: new TokContext(\"{\", true),\n    b_tmpl: new TokContext(\"${\", true),\n    p_stat: new TokContext(\"(\", false),\n    p_expr: new TokContext(\"(\", true),\n    q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.readTmplToken(); }),\n    f_expr: new TokContext(\"function\", true)\n  }\n\n  var pp$6 = Parser.prototype\n\n  pp$6.initialContext = function() {\n    return [types.b_stat]\n  }\n\n  pp$6.braceIsBlock = function(prevType) {\n    if (prevType === tt.colon) {\n      var parent = this.curContext()\n      if (parent === types.b_stat || parent === types.b_expr)\n        return !parent.isExpr\n    }\n    if (prevType === tt._return)\n      return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n    if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR)\n      return true\n    if (prevType == tt.braceL)\n      return this.curContext() === types.b_stat\n    return !this.exprAllowed\n  }\n\n  pp$6.updateContext = function(prevType) {\n    var update, type = this.type\n    if (type.keyword && prevType == tt.dot)\n      this.exprAllowed = false\n    else if (update = type.updateContext)\n      update.call(this, prevType)\n    else\n      this.exprAllowed = type.beforeExpr\n  }\n\n  // Token-specific context update code\n\n  tt.parenR.updateContext = tt.braceR.updateContext = function() {\n    if (this.context.length == 1) {\n      this.exprAllowed = true\n      return\n    }\n    var out = this.context.pop()\n    if (out === types.b_stat && this.curContext() === types.f_expr) {\n      this.context.pop()\n      this.exprAllowed = false\n    } else if (out === types.b_tmpl) {\n      this.exprAllowed = true\n    } else {\n      this.exprAllowed = !out.isExpr\n    }\n  }\n\n  tt.braceL.updateContext = function(prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr)\n    this.exprAllowed = true\n  }\n\n  tt.dollarBraceL.updateContext = function() {\n    this.context.push(types.b_tmpl)\n    this.exprAllowed = true\n  }\n\n  tt.parenL.updateContext = function(prevType) {\n    var statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while\n    this.context.push(statementParens ? types.p_stat : types.p_expr)\n    this.exprAllowed = true\n  }\n\n  tt.incDec.updateContext = function() {\n    // tokExprAllowed stays unchanged\n  }\n\n  tt._function.updateContext = function(prevType) {\n    if (prevType.beforeExpr && prevType !== tt.semi && prevType !== tt._else &&\n        !((prevType === tt.colon || prevType === tt.braceL) && this.curContext() === types.b_stat))\n      this.context.push(types.f_expr)\n    this.exprAllowed = false\n  }\n\n  tt.backQuote.updateContext = function() {\n    if (this.curContext() === types.q_tmpl)\n      this.context.pop()\n    else\n      this.context.push(types.q_tmpl)\n    this.exprAllowed = false\n  }\n\n  // Object type used to represent tokens. Note that normally, tokens\n  // simply exist as properties on the parser object. This is only\n  // used for the onToken callback and the external tokenizer.\n\n  var Token = function Token(p) {\n    this.type = p.type\n    this.value = p.value\n    this.start = p.start\n    this.end = p.end\n    if (p.options.locations)\n      this.loc = new SourceLocation(p, p.startLoc, p.endLoc)\n    if (p.options.ranges)\n      this.range = [p.start, p.end]\n  };\n\n  // ## Tokenizer\n\n  var pp$7 = Parser.prototype\n\n  // Are we running under Rhino?\n  var isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\"\n\n  // Move to the next token\n\n  pp$7.next = function() {\n    if (this.options.onToken)\n      this.options.onToken(new Token(this))\n\n    this.lastTokEnd = this.end\n    this.lastTokStart = this.start\n    this.lastTokEndLoc = this.endLoc\n    this.lastTokStartLoc = this.startLoc\n    this.nextToken()\n  }\n\n  pp$7.getToken = function() {\n    this.next()\n    return new Token(this)\n  }\n\n  // If we're in an ES6 environment, make parsers iterable\n  if (typeof Symbol !== \"undefined\")\n    pp$7[Symbol.iterator] = function () {\n      var self = this\n      return {next: function () {\n        var token = self.getToken()\n        return {\n          done: token.type === tt.eof,\n          value: token\n        }\n      }}\n    }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  pp$7.setStrict = function(strict) {\n    var this$1 = this;\n\n    this.strict = strict\n    if (this.type !== tt.num && this.type !== tt.string) return\n    this.pos = this.start\n    if (this.options.locations) {\n      while (this.pos < this.lineStart) {\n        this$1.lineStart = this$1.input.lastIndexOf(\"\\n\", this$1.lineStart - 2) + 1\n        --this$1.curLine\n      }\n    }\n    this.nextToken()\n  }\n\n  pp$7.curContext = function() {\n    return this.context[this.context.length - 1]\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  pp$7.nextToken = function() {\n    var curContext = this.curContext()\n    if (!curContext || !curContext.preserveSpace) this.skipSpace()\n\n    this.start = this.pos\n    if (this.options.locations) this.startLoc = this.curPosition()\n    if (this.pos >= this.input.length) return this.finishToken(tt.eof)\n\n    if (curContext.override) return curContext.override(this)\n    else this.readToken(this.fullCharCodeAtPos())\n  }\n\n  pp$7.readToken = function(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n      return this.readWord()\n\n    return this.getTokenFromCode(code)\n  }\n\n  pp$7.fullCharCodeAtPos = function() {\n    var code = this.input.charCodeAt(this.pos)\n    if (code <= 0xd7ff || code >= 0xe000) return code\n    var next = this.input.charCodeAt(this.pos + 1)\n    return (code << 10) + next - 0x35fdc00\n  }\n\n  pp$7.skipBlockComment = function() {\n    var this$1 = this;\n\n    var startLoc = this.options.onComment && this.curPosition()\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2)\n    if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\")\n    this.pos = end + 2\n    if (this.options.locations) {\n      lineBreakG.lastIndex = start\n      var match\n      while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n        ++this$1.curLine\n        this$1.lineStart = match.index + match[0].length\n      }\n    }\n    if (this.options.onComment)\n      this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                             startLoc, this.curPosition())\n  }\n\n  pp$7.skipLineComment = function(startSkip) {\n    var this$1 = this;\n\n    var start = this.pos\n    var startLoc = this.options.onComment && this.curPosition()\n    var ch = this.input.charCodeAt(this.pos+=startSkip)\n    while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n      ++this$1.pos\n      ch = this$1.input.charCodeAt(this$1.pos)\n    }\n    if (this.options.onComment)\n      this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                             startLoc, this.curPosition())\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  pp$7.skipSpace = function() {\n    var this$1 = this;\n\n    loop: while (this.pos < this.input.length) {\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      switch (ch) {\n        case 32: case 160: // ' '\n          ++this$1.pos\n          break\n        case 13:\n          if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n            ++this$1.pos\n          }\n        case 10: case 8232: case 8233:\n          ++this$1.pos\n          if (this$1.options.locations) {\n            ++this$1.curLine\n            this$1.lineStart = this$1.pos\n          }\n          break\n        case 47: // '/'\n          switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n            case 42: // '*'\n              this$1.skipBlockComment()\n              break\n            case 47:\n              this$1.skipLineComment(2)\n              break\n            default:\n              break loop\n          }\n          break\n        default:\n          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n            ++this$1.pos\n          } else {\n            break loop\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  pp$7.finishToken = function(type, val) {\n    this.end = this.pos\n    if (this.options.locations) this.endLoc = this.curPosition()\n    var prevType = this.type\n    this.type = type\n    this.value = val\n\n    this.updateContext(prevType)\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n  pp$7.readToken_dot = function() {\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next >= 48 && next <= 57) return this.readNumber(true)\n    var next2 = this.input.charCodeAt(this.pos + 2)\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n      this.pos += 3\n      return this.finishToken(tt.ellipsis)\n    } else {\n      ++this.pos\n      return this.finishToken(tt.dot)\n    }\n  }\n\n  pp$7.readToken_slash = function() { // '/'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (this.exprAllowed) {++this.pos; return this.readRegexp()}\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.slash, 1)\n  }\n\n  pp$7.readToken_mult_modulo_exp = function(code) { // '%*'\n    var next = this.input.charCodeAt(this.pos + 1)\n    var size = 1\n    var tokentype = code === 42 ? tt.star : tt.modulo\n\n    // exponentiation operator ** and **=\n    if (this.options.ecmaVersion >= 7 && next === 42) {\n      ++size\n      tokentype = tt.starstar\n      next = this.input.charCodeAt(this.pos + 2)\n    }\n\n    if (next === 61) return this.finishOp(tt.assign, size + 1)\n    return this.finishOp(tokentype, size)\n  }\n\n  pp$7.readToken_pipe_amp = function(code) { // '|&'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2)\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1)\n  }\n\n  pp$7.readToken_caret = function() { // '^'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.bitwiseXOR, 1)\n  }\n\n  pp$7.readToken_plus_min = function(code) { // '+-'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === code) {\n      if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&\n          lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n        // A `-->` line comment\n        this.skipLineComment(3)\n        this.skipSpace()\n        return this.nextToken()\n      }\n      return this.finishOp(tt.incDec, 2)\n    }\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.plusMin, 1)\n  }\n\n  pp$7.readToken_lt_gt = function(code) { // '<>'\n    var next = this.input.charCodeAt(this.pos + 1)\n    var size = 1\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2\n      if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1)\n      return this.finishOp(tt.bitShift, size)\n    }\n    if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&\n        this.input.charCodeAt(this.pos + 3) == 45) {\n      if (this.inModule) this.unexpected()\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4)\n      this.skipSpace()\n      return this.nextToken()\n    }\n    if (next === 61) size = 2\n    return this.finishOp(tt.relational, size)\n  }\n\n  pp$7.readToken_eq_excl = function(code) { // '=!'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n      this.pos += 2\n      return this.finishToken(tt.arrow)\n    }\n    return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1)\n  }\n\n  pp$7.getTokenFromCode = function(code) {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n    case 46: // '.'\n      return this.readToken_dot()\n\n      // Punctuation tokens.\n    case 40: ++this.pos; return this.finishToken(tt.parenL)\n    case 41: ++this.pos; return this.finishToken(tt.parenR)\n    case 59: ++this.pos; return this.finishToken(tt.semi)\n    case 44: ++this.pos; return this.finishToken(tt.comma)\n    case 91: ++this.pos; return this.finishToken(tt.bracketL)\n    case 93: ++this.pos; return this.finishToken(tt.bracketR)\n    case 123: ++this.pos; return this.finishToken(tt.braceL)\n    case 125: ++this.pos; return this.finishToken(tt.braceR)\n    case 58: ++this.pos; return this.finishToken(tt.colon)\n    case 63: ++this.pos; return this.finishToken(tt.question)\n\n    case 96: // '`'\n      if (this.options.ecmaVersion < 6) break\n      ++this.pos\n      return this.finishToken(tt.backQuote)\n\n    case 48: // '0'\n      var next = this.input.charCodeAt(this.pos + 1)\n      if (next === 120 || next === 88) return this.readRadixNumber(16) // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) return this.readRadixNumber(8) // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2) // '0b', '0B' - binary number\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float.\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n      return this.readNumber(false)\n\n      // Quotes produce strings.\n    case 34: case 39: // '\"', \"'\"\n      return this.readString(code)\n\n      // Operators are parsed inline in tiny state machines. '=' (61) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n    case 47: // '/'\n      return this.readToken_slash()\n\n    case 37: case 42: // '%*'\n      return this.readToken_mult_modulo_exp(code)\n\n    case 124: case 38: // '|&'\n      return this.readToken_pipe_amp(code)\n\n    case 94: // '^'\n      return this.readToken_caret()\n\n    case 43: case 45: // '+-'\n      return this.readToken_plus_min(code)\n\n    case 60: case 62: // '<>'\n      return this.readToken_lt_gt(code)\n\n    case 61: case 33: // '=!'\n      return this.readToken_eq_excl(code)\n\n    case 126: // '~'\n      return this.finishOp(tt.prefix, 1)\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\")\n  }\n\n  pp$7.finishOp = function(type, size) {\n    var str = this.input.slice(this.pos, this.pos + size)\n    this.pos += size\n    return this.finishToken(type, str)\n  }\n\n  // Parse a regular expression. Some context-awareness is necessary,\n  // since a '/' inside a '[]' set does not end the expression.\n\n  function tryCreateRegexp(src, flags, throwErrorAt, parser) {\n    try {\n      return new RegExp(src, flags)\n    } catch (e) {\n      if (throwErrorAt !== undefined) {\n        if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message)\n        throw e\n      }\n    }\n  }\n\n  var regexpUnicodeSupport = !!tryCreateRegexp(\"\\uffff\", \"u\")\n\n  pp$7.readRegexp = function() {\n    var this$1 = this;\n\n    var escaped, inClass, start = this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(start, \"Unterminated regular expression\")\n      var ch = this$1.input.charAt(this$1.pos)\n      if (lineBreak.test(ch)) this$1.raise(start, \"Unterminated regular expression\")\n      if (!escaped) {\n        if (ch === \"[\") inClass = true\n        else if (ch === \"]\" && inClass) inClass = false\n        else if (ch === \"/\" && !inClass) break\n        escaped = ch === \"\\\\\"\n      } else escaped = false\n      ++this$1.pos\n    }\n    var content = this.input.slice(start, this.pos)\n    ++this.pos\n    // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n    // here (don't ask).\n    var mods = this.readWord1()\n    var tmp = content, tmpFlags = \"\"\n    if (mods) {\n      var validFlags = /^[gim]*$/\n      if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/\n      if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\")\n      if (mods.indexOf(\"u\") >= 0) {\n        if (regexpUnicodeSupport) {\n          tmpFlags = \"u\"\n        } else {\n          // Replace each astral symbol and every Unicode escape sequence that\n          // possibly represents an astral symbol or a paired surrogate with a\n          // single ASCII symbol to avoid throwing on regular expressions that\n          // are only valid in combination with the `/u` flag.\n          // Note: replacing with the ASCII symbol `x` might cause false\n          // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n          // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n          // be replaced by `[x-b]` which throws an error.\n          tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n            code = Number(\"0x\" + code)\n            if (code > 0x10FFFF) this$1.raise(start + offset + 3, \"Code point out of bounds\")\n            return \"x\"\n          })\n          tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\")\n          tmpFlags = tmpFlags.replace(\"u\", \"\")\n        }\n      }\n    }\n    // Detect invalid regular expressions.\n    var value = null\n    // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n    // so don't do detection if we are running under Rhino\n    if (!isRhino) {\n      tryCreateRegexp(tmp, tmpFlags, start, this)\n      // Get a regular expression object for this pattern-flag pair, or `null` in\n      // case the current environment doesn't support the flags it uses.\n      value = tryCreateRegexp(content, mods)\n    }\n    return this.finishToken(tt.regexp, {pattern: content, flags: mods, value: value})\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  pp$7.readInt = function(radix, len) {\n    var this$1 = this;\n\n    var start = this.pos, total = 0\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = this$1.input.charCodeAt(this$1.pos), val\n      if (code >= 97) val = code - 97 + 10 // a\n      else if (code >= 65) val = code - 65 + 10 // A\n      else if (code >= 48 && code <= 57) val = code - 48 // 0-9\n      else val = Infinity\n      if (val >= radix) break\n      ++this$1.pos\n      total = total * radix + val\n    }\n    if (this.pos === start || len != null && this.pos - start !== len) return null\n\n    return total\n  }\n\n  pp$7.readRadixNumber = function(radix) {\n    this.pos += 2 // 0x\n    var val = this.readInt(radix)\n    if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix)\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n    return this.finishToken(tt.num, val)\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  pp$7.readNumber = function(startsWithDot) {\n    var start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48\n    if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\")\n    var next = this.input.charCodeAt(this.pos)\n    if (next === 46) { // '.'\n      ++this.pos\n      this.readInt(10)\n      isFloat = true\n      next = this.input.charCodeAt(this.pos)\n    }\n    if (next === 69 || next === 101) { // 'eE'\n      next = this.input.charCodeAt(++this.pos)\n      if (next === 43 || next === 45) ++this.pos // '+-'\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\")\n      isFloat = true\n    }\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n\n    var str = this.input.slice(start, this.pos), val\n    if (isFloat) val = parseFloat(str)\n    else if (!octal || str.length === 1) val = parseInt(str, 10)\n    else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\")\n    else val = parseInt(str, 8)\n    return this.finishToken(tt.num, val)\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  pp$7.readCodePoint = function() {\n    var ch = this.input.charCodeAt(this.pos), code\n\n    if (ch === 123) {\n      if (this.options.ecmaVersion < 6) this.unexpected()\n      var codePos = ++this.pos\n      code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos)\n      ++this.pos\n      if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\")\n    } else {\n      code = this.readHexChar(4)\n    }\n    return code\n  }\n\n  function codePointToString(code) {\n    // UTF-16 Decoding\n    if (code <= 0xFFFF) return String.fromCharCode(code)\n    code -= 0x10000\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n  }\n\n  pp$7.readString = function(quote) {\n    var this$1 = this;\n\n    var out = \"\", chunkStart = ++this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated string constant\")\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      if (ch === quote) break\n      if (ch === 92) { // '\\'\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        out += this$1.readEscapedChar(false)\n        chunkStart = this$1.pos\n      } else {\n        if (isNewLine(ch)) this$1.raise(this$1.start, \"Unterminated string constant\")\n        ++this$1.pos\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++)\n    return this.finishToken(tt.string, out)\n  }\n\n  // Reads template string tokens.\n\n  pp$7.readTmplToken = function() {\n    var this$1 = this;\n\n    var out = \"\", chunkStart = this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated template\")\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n        if (this$1.pos === this$1.start && this$1.type === tt.template) {\n          if (ch === 36) {\n            this$1.pos += 2\n            return this$1.finishToken(tt.dollarBraceL)\n          } else {\n            ++this$1.pos\n            return this$1.finishToken(tt.backQuote)\n          }\n        }\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        return this$1.finishToken(tt.template, out)\n      }\n      if (ch === 92) { // '\\'\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        out += this$1.readEscapedChar(true)\n        chunkStart = this$1.pos\n      } else if (isNewLine(ch)) {\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        ++this$1.pos\n        switch (ch) {\n          case 13:\n            if (this$1.input.charCodeAt(this$1.pos) === 10) ++this$1.pos\n          case 10:\n            out += \"\\n\"\n            break\n          default:\n            out += String.fromCharCode(ch)\n            break\n        }\n        if (this$1.options.locations) {\n          ++this$1.curLine\n          this$1.lineStart = this$1.pos\n        }\n        chunkStart = this$1.pos\n      } else {\n        ++this$1.pos\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  pp$7.readEscapedChar = function(inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos)\n    ++this.pos\n    switch (ch) {\n    case 110: return \"\\n\" // 'n' -> '\\n'\n    case 114: return \"\\r\" // 'r' -> '\\r'\n    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n    case 117: return codePointToString(this.readCodePoint()) // 'u'\n    case 116: return \"\\t\" // 't' -> '\\t'\n    case 98: return \"\\b\" // 'b' -> '\\b'\n    case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n    case 102: return \"\\f\" // 'f' -> '\\f'\n    case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos // '\\r\\n'\n    case 10: // ' \\n'\n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine }\n      return \"\"\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]\n        var octal = parseInt(octalStr, 8)\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1)\n          octal = parseInt(octalStr, 8)\n        }\n        if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n          this.raise(this.pos - 2, \"Octal literal in strict mode\")\n        }\n        this.pos += octalStr.length - 1\n        return String.fromCharCode(octal)\n      }\n      return String.fromCharCode(ch)\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n  pp$7.readHexChar = function(len) {\n    var codePos = this.pos\n    var n = this.readInt(16, len)\n    if (n === null) this.raise(codePos, \"Bad character escape sequence\")\n    return n\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  pp$7.readWord1 = function() {\n    var this$1 = this;\n\n    this.containsEsc = false\n    var word = \"\", first = true, chunkStart = this.pos\n    var astral = this.options.ecmaVersion >= 6\n    while (this.pos < this.input.length) {\n      var ch = this$1.fullCharCodeAtPos()\n      if (isIdentifierChar(ch, astral)) {\n        this$1.pos += ch <= 0xffff ? 1 : 2\n      } else if (ch === 92) { // \"\\\"\n        this$1.containsEsc = true\n        word += this$1.input.slice(chunkStart, this$1.pos)\n        var escStart = this$1.pos\n        if (this$1.input.charCodeAt(++this$1.pos) != 117) // \"u\"\n          this$1.raise(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\")\n        ++this$1.pos\n        var esc = this$1.readCodePoint()\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n          this$1.raise(escStart, \"Invalid Unicode escape\")\n        word += codePointToString(esc)\n        chunkStart = this$1.pos\n      } else {\n        break\n      }\n      first = false\n    }\n    return word + this.input.slice(chunkStart, this.pos)\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  pp$7.readWord = function() {\n    var word = this.readWord1()\n    var type = tt.name\n    if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word))\n      type = keywordTypes[word]\n    return this.finishToken(type, word)\n  }\n\n  var version = \"3.3.0\"\n\n  // The main exported interface (under `self.acorn` when in the\n  // browser) is a `parse` function that takes a code string and\n  // returns an abstract syntax tree as specified by [Mozilla parser\n  // API][api].\n  //\n  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\n  function parse(input, options) {\n    return new Parser(options, input).parse()\n  }\n\n  // This function tries to parse a single expression at a given\n  // offset in a string. Useful for parsing mixed-language formats\n  // that embed JavaScript expressions.\n\n  function parseExpressionAt(input, pos, options) {\n    var p = new Parser(options, input, pos)\n    p.nextToken()\n    return p.parseExpression()\n  }\n\n  // Acorn is organized as a tokenizer and a recursive-descent parser.\n  // The `tokenizer` export provides an interface to the tokenizer.\n\n  function tokenizer(input, options) {\n    return new Parser(options, input)\n  }\n\n  exports.version = version;\n  exports.parse = parse;\n  exports.parseExpressionAt = parseExpressionAt;\n  exports.tokenizer = tokenizer;\n  exports.Parser = Parser;\n  exports.plugins = plugins;\n  exports.defaultOptions = defaultOptions;\n  exports.Position = Position;\n  exports.SourceLocation = SourceLocation;\n  exports.getLineInfo = getLineInfo;\n  exports.Node = Node;\n  exports.TokenType = TokenType;\n  exports.tokTypes = tt;\n  exports.TokContext = TokContext;\n  exports.tokContexts = types;\n  exports.isIdentifierChar = isIdentifierChar;\n  exports.isIdentifierStart = isIdentifierStart;\n  exports.Token = Token;\n  exports.isNewLine = isNewLine;\n  exports.lineBreak = lineBreak;\n  exports.lineBreakG = lineBreakG;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n/***/ }),\n\n/***/ \"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/base64-js/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n/***/ }),\n\n/***/ \"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/buble/dist/buble.umd.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n   true ? factory(exports, __webpack_require__(\"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/acorn/dist/acorn.js\"), __webpack_require__(\"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/magic-string/dist/magic-string.cjs.js\")) :\n  typeof define === 'function' && define.amd ? define(['exports', 'acorn/dist/acorn.js', 'magic-string'], factory) :\n  (factory((global.buble = global.buble || {}),global.acorn,global.MagicString));\n}(this, function (exports,acorn,MagicString) { 'use strict';\n\n  acorn = 'default' in acorn ? acorn['default'] : acorn;\n  MagicString = 'default' in MagicString ? MagicString['default'] : MagicString;\n\n  var __commonjs_global = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this;\n  function __commonjs(fn, module) { return module = { exports: {} }, fn(module, module.exports, __commonjs_global), module.exports; }\n\n  var xhtml = __commonjs(function (module) {\n  module.exports = {\n    quot: '\\u0022',\n    amp: '&',\n    apos: '\\u0027',\n    lt: '<',\n    gt: '>',\n    nbsp: '\\u00A0',\n    iexcl: '\\u00A1',\n    cent: '\\u00A2',\n    pound: '\\u00A3',\n    curren: '\\u00A4',\n    yen: '\\u00A5',\n    brvbar: '\\u00A6',\n    sect: '\\u00A7',\n    uml: '\\u00A8',\n    copy: '\\u00A9',\n    ordf: '\\u00AA',\n    laquo: '\\u00AB',\n    not: '\\u00AC',\n    shy: '\\u00AD',\n    reg: '\\u00AE',\n    macr: '\\u00AF',\n    deg: '\\u00B0',\n    plusmn: '\\u00B1',\n    sup2: '\\u00B2',\n    sup3: '\\u00B3',\n    acute: '\\u00B4',\n    micro: '\\u00B5',\n    para: '\\u00B6',\n    middot: '\\u00B7',\n    cedil: '\\u00B8',\n    sup1: '\\u00B9',\n    ordm: '\\u00BA',\n    raquo: '\\u00BB',\n    frac14: '\\u00BC',\n    frac12: '\\u00BD',\n    frac34: '\\u00BE',\n    iquest: '\\u00BF',\n    Agrave: '\\u00C0',\n    Aacute: '\\u00C1',\n    Acirc: '\\u00C2',\n    Atilde: '\\u00C3',\n    Auml: '\\u00C4',\n    Aring: '\\u00C5',\n    AElig: '\\u00C6',\n    Ccedil: '\\u00C7',\n    Egrave: '\\u00C8',\n    Eacute: '\\u00C9',\n    Ecirc: '\\u00CA',\n    Euml: '\\u00CB',\n    Igrave: '\\u00CC',\n    Iacute: '\\u00CD',\n    Icirc: '\\u00CE',\n    Iuml: '\\u00CF',\n    ETH: '\\u00D0',\n    Ntilde: '\\u00D1',\n    Ograve: '\\u00D2',\n    Oacute: '\\u00D3',\n    Ocirc: '\\u00D4',\n    Otilde: '\\u00D5',\n    Ouml: '\\u00D6',\n    times: '\\u00D7',\n    Oslash: '\\u00D8',\n    Ugrave: '\\u00D9',\n    Uacute: '\\u00DA',\n    Ucirc: '\\u00DB',\n    Uuml: '\\u00DC',\n    Yacute: '\\u00DD',\n    THORN: '\\u00DE',\n    szlig: '\\u00DF',\n    agrave: '\\u00E0',\n    aacute: '\\u00E1',\n    acirc: '\\u00E2',\n    atilde: '\\u00E3',\n    auml: '\\u00E4',\n    aring: '\\u00E5',\n    aelig: '\\u00E6',\n    ccedil: '\\u00E7',\n    egrave: '\\u00E8',\n    eacute: '\\u00E9',\n    ecirc: '\\u00EA',\n    euml: '\\u00EB',\n    igrave: '\\u00EC',\n    iacute: '\\u00ED',\n    icirc: '\\u00EE',\n    iuml: '\\u00EF',\n    eth: '\\u00F0',\n    ntilde: '\\u00F1',\n    ograve: '\\u00F2',\n    oacute: '\\u00F3',\n    ocirc: '\\u00F4',\n    otilde: '\\u00F5',\n    ouml: '\\u00F6',\n    divide: '\\u00F7',\n    oslash: '\\u00F8',\n    ugrave: '\\u00F9',\n    uacute: '\\u00FA',\n    ucirc: '\\u00FB',\n    uuml: '\\u00FC',\n    yacute: '\\u00FD',\n    thorn: '\\u00FE',\n    yuml: '\\u00FF',\n    OElig: '\\u0152',\n    oelig: '\\u0153',\n    Scaron: '\\u0160',\n    scaron: '\\u0161',\n    Yuml: '\\u0178',\n    fnof: '\\u0192',\n    circ: '\\u02C6',\n    tilde: '\\u02DC',\n    Alpha: '\\u0391',\n    Beta: '\\u0392',\n    Gamma: '\\u0393',\n    Delta: '\\u0394',\n    Epsilon: '\\u0395',\n    Zeta: '\\u0396',\n    Eta: '\\u0397',\n    Theta: '\\u0398',\n    Iota: '\\u0399',\n    Kappa: '\\u039A',\n    Lambda: '\\u039B',\n    Mu: '\\u039C',\n    Nu: '\\u039D',\n    Xi: '\\u039E',\n    Omicron: '\\u039F',\n    Pi: '\\u03A0',\n    Rho: '\\u03A1',\n    Sigma: '\\u03A3',\n    Tau: '\\u03A4',\n    Upsilon: '\\u03A5',\n    Phi: '\\u03A6',\n    Chi: '\\u03A7',\n    Psi: '\\u03A8',\n    Omega: '\\u03A9',\n    alpha: '\\u03B1',\n    beta: '\\u03B2',\n    gamma: '\\u03B3',\n    delta: '\\u03B4',\n    epsilon: '\\u03B5',\n    zeta: '\\u03B6',\n    eta: '\\u03B7',\n    theta: '\\u03B8',\n    iota: '\\u03B9',\n    kappa: '\\u03BA',\n    lambda: '\\u03BB',\n    mu: '\\u03BC',\n    nu: '\\u03BD',\n    xi: '\\u03BE',\n    omicron: '\\u03BF',\n    pi: '\\u03C0',\n    rho: '\\u03C1',\n    sigmaf: '\\u03C2',\n    sigma: '\\u03C3',\n    tau: '\\u03C4',\n    upsilon: '\\u03C5',\n    phi: '\\u03C6',\n    chi: '\\u03C7',\n    psi: '\\u03C8',\n    omega: '\\u03C9',\n    thetasym: '\\u03D1',\n    upsih: '\\u03D2',\n    piv: '\\u03D6',\n    ensp: '\\u2002',\n    emsp: '\\u2003',\n    thinsp: '\\u2009',\n    zwnj: '\\u200C',\n    zwj: '\\u200D',\n    lrm: '\\u200E',\n    rlm: '\\u200F',\n    ndash: '\\u2013',\n    mdash: '\\u2014',\n    lsquo: '\\u2018',\n    rsquo: '\\u2019',\n    sbquo: '\\u201A',\n    ldquo: '\\u201C',\n    rdquo: '\\u201D',\n    bdquo: '\\u201E',\n    dagger: '\\u2020',\n    Dagger: '\\u2021',\n    bull: '\\u2022',\n    hellip: '\\u2026',\n    permil: '\\u2030',\n    prime: '\\u2032',\n    Prime: '\\u2033',\n    lsaquo: '\\u2039',\n    rsaquo: '\\u203A',\n    oline: '\\u203E',\n    frasl: '\\u2044',\n    euro: '\\u20AC',\n    image: '\\u2111',\n    weierp: '\\u2118',\n    real: '\\u211C',\n    trade: '\\u2122',\n    alefsym: '\\u2135',\n    larr: '\\u2190',\n    uarr: '\\u2191',\n    rarr: '\\u2192',\n    darr: '\\u2193',\n    harr: '\\u2194',\n    crarr: '\\u21B5',\n    lArr: '\\u21D0',\n    uArr: '\\u21D1',\n    rArr: '\\u21D2',\n    dArr: '\\u21D3',\n    hArr: '\\u21D4',\n    forall: '\\u2200',\n    part: '\\u2202',\n    exist: '\\u2203',\n    empty: '\\u2205',\n    nabla: '\\u2207',\n    isin: '\\u2208',\n    notin: '\\u2209',\n    ni: '\\u220B',\n    prod: '\\u220F',\n    sum: '\\u2211',\n    minus: '\\u2212',\n    lowast: '\\u2217',\n    radic: '\\u221A',\n    prop: '\\u221D',\n    infin: '\\u221E',\n    ang: '\\u2220',\n    and: '\\u2227',\n    or: '\\u2228',\n    cap: '\\u2229',\n    cup: '\\u222A',\n    'int': '\\u222B',\n    there4: '\\u2234',\n    sim: '\\u223C',\n    cong: '\\u2245',\n    asymp: '\\u2248',\n    ne: '\\u2260',\n    equiv: '\\u2261',\n    le: '\\u2264',\n    ge: '\\u2265',\n    sub: '\\u2282',\n    sup: '\\u2283',\n    nsub: '\\u2284',\n    sube: '\\u2286',\n    supe: '\\u2287',\n    oplus: '\\u2295',\n    otimes: '\\u2297',\n    perp: '\\u22A5',\n    sdot: '\\u22C5',\n    lceil: '\\u2308',\n    rceil: '\\u2309',\n    lfloor: '\\u230A',\n    rfloor: '\\u230B',\n    lang: '\\u2329',\n    rang: '\\u232A',\n    loz: '\\u25CA',\n    spades: '\\u2660',\n    clubs: '\\u2663',\n    hearts: '\\u2665',\n    diams: '\\u2666'\n  };\n  });\n\n  var require$$0 = (xhtml && typeof xhtml === 'object' && 'default' in xhtml ? xhtml['default'] : xhtml);\n\n  var inject = __commonjs(function (module) {\n  'use strict';\n\n  var XHTMLEntities = require$$0;\n\n  var hexNumber = /^[\\da-fA-F]+$/;\n  var decimalNumber = /^\\d+$/;\n\n  module.exports = function(acorn) {\n    var tt = acorn.tokTypes;\n    var tc = acorn.tokContexts;\n\n    tc.j_oTag = new acorn.TokContext('<tag', false);\n    tc.j_cTag = new acorn.TokContext('</tag', false);\n    tc.j_expr = new acorn.TokContext('<tag>...</tag>', true, true);\n\n    tt.jsxName = new acorn.TokenType('jsxName');\n    tt.jsxText = new acorn.TokenType('jsxText', {beforeExpr: true});\n    tt.jsxTagStart = new acorn.TokenType('jsxTagStart');\n    tt.jsxTagEnd = new acorn.TokenType('jsxTagEnd');\n\n    tt.jsxTagStart.updateContext = function() {\n      this.context.push(tc.j_expr); // treat as beginning of JSX expression\n      this.context.push(tc.j_oTag); // start opening tag context\n      this.exprAllowed = false;\n    };\n    tt.jsxTagEnd.updateContext = function(prevType) {\n      var out = this.context.pop();\n      if (out === tc.j_oTag && prevType === tt.slash || out === tc.j_cTag) {\n        this.context.pop();\n        this.exprAllowed = this.curContext() === tc.j_expr;\n      } else {\n        this.exprAllowed = true;\n      }\n    };\n\n    var pp = acorn.Parser.prototype;\n\n    // Reads inline JSX contents token.\n\n    pp.jsx_readToken = function() {\n      var out = '', chunkStart = this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated JSX contents');\n        var ch = this.input.charCodeAt(this.pos);\n\n        switch (ch) {\n        case 60: // '<'\n        case 123: // '{'\n          if (this.pos === this.start) {\n            if (ch === 60 && this.exprAllowed) {\n              ++this.pos;\n              return this.finishToken(tt.jsxTagStart);\n            }\n            return this.getTokenFromCode(ch);\n          }\n          out += this.input.slice(chunkStart, this.pos);\n          return this.finishToken(tt.jsxText, out);\n\n        case 38: // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n          break;\n\n        default:\n          if (acorn.isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.pos);\n            out += this.jsx_readNewLine(true);\n            chunkStart = this.pos;\n          } else {\n            ++this.pos;\n          }\n        }\n      }\n    };\n\n    pp.jsx_readNewLine = function(normalizeCRLF) {\n      var ch = this.input.charCodeAt(this.pos);\n      var out;\n      ++this.pos;\n      if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n        ++this.pos;\n        out = normalizeCRLF ? '\\n' : '\\r\\n';\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n\n      return out;\n    };\n\n    pp.jsx_readString = function(quote) {\n      var out = '', chunkStart = ++this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated string constant');\n        var ch = this.input.charCodeAt(this.pos);\n        if (ch === quote) break;\n        if (ch === 38) { // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n        } else if (acorn.isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readNewLine(false);\n          chunkStart = this.pos;\n        } else {\n          ++this.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos++);\n      return this.finishToken(tt.string, out);\n    };\n\n    pp.jsx_readEntity = function() {\n      var str = '', count = 0, entity;\n      var ch = this.input[this.pos];\n      if (ch !== '&')\n        this.raise(this.pos, 'Entity must start with an ampersand');\n      var startPos = ++this.pos;\n      while (this.pos < this.input.length && count++ < 10) {\n        ch = this.input[this.pos++];\n        if (ch === ';') {\n          if (str[0] === '#') {\n            if (str[1] === 'x') {\n              str = str.substr(2);\n              if (hexNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 16));\n            } else {\n              str = str.substr(1);\n              if (decimalNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 10));\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.pos = startPos;\n        return '&';\n      }\n      return entity;\n    };\n\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can't contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    pp.jsx_readWord = function() {\n      var ch, start = this.pos;\n      do {\n        ch = this.input.charCodeAt(++this.pos);\n      } while (acorn.isIdentifierChar(ch) || ch === 45); // '-'\n      return this.finishToken(tt.jsxName, this.input.slice(start, this.pos));\n    };\n\n    // Transforms JSX element name to string.\n\n    function getQualifiedJSXName(object) {\n      if (object.type === 'JSXIdentifier')\n        return object.name;\n\n      if (object.type === 'JSXNamespacedName')\n        return object.namespace.name + ':' + object.name.name;\n\n      if (object.type === 'JSXMemberExpression')\n        return getQualifiedJSXName(object.object) + '.' +\n        getQualifiedJSXName(object.property);\n    }\n\n    // Parse next token as JSX identifier\n\n    pp.jsx_parseIdentifier = function() {\n      var node = this.startNode();\n      if (this.type === tt.jsxName)\n        node.name = this.value;\n      else if (this.type.keyword)\n        node.name = this.type.keyword;\n      else\n        this.unexpected();\n      this.next();\n      return this.finishNode(node, 'JSXIdentifier');\n    };\n\n    // Parse namespaced identifier.\n\n    pp.jsx_parseNamespacedName = function() {\n      var startPos = this.start, startLoc = this.startLoc;\n      var name = this.jsx_parseIdentifier();\n      if (!this.options.plugins.jsx.allowNamespaces || !this.eat(tt.colon)) return name;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsx_parseIdentifier();\n      return this.finishNode(node, 'JSXNamespacedName');\n    };\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    pp.jsx_parseElementName = function() {\n      var startPos = this.start, startLoc = this.startLoc;\n      var node = this.jsx_parseNamespacedName();\n      if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !this.options.plugins.jsx.allowNamespacedObjects) {\n        this.unexpected();\n      }\n      while (this.eat(tt.dot)) {\n        var newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsx_parseIdentifier();\n        node = this.finishNode(newNode, 'JSXMemberExpression');\n      }\n      return node;\n    };\n\n    // Parses any type of JSX attribute value.\n\n    pp.jsx_parseAttributeValue = function() {\n      switch (this.type) {\n      case tt.braceL:\n        var node = this.jsx_parseExpressionContainer();\n        if (node.expression.type === 'JSXEmptyExpression')\n          this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');\n        return node;\n\n      case tt.jsxTagStart:\n      case tt.string:\n        return this.parseExprAtom();\n\n      default:\n        this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');\n      }\n    };\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    pp.jsx_parseEmptyExpression = function() {\n      var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n      return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);\n    };\n\n    // Parses JSX expression enclosed into curly brackets.\n\n\n    pp.jsx_parseExpressionContainer = function() {\n      var node = this.startNode();\n      this.next();\n      node.expression = this.type === tt.braceR\n        ? this.jsx_parseEmptyExpression()\n        : this.parseExpression();\n      this.expect(tt.braceR);\n      return this.finishNode(node, 'JSXExpressionContainer');\n    };\n\n    // Parses following JSX attribute name-value pair.\n\n    pp.jsx_parseAttribute = function() {\n      var node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, 'JSXSpreadAttribute');\n      }\n      node.name = this.jsx_parseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n      return this.finishNode(node, 'JSXAttribute');\n    };\n\n    // Parses JSX opening tag starting after '<'.\n\n    pp.jsx_parseOpeningElementAt = function(startPos, startLoc) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.attributes = [];\n      node.name = this.jsx_parseElementName();\n      while (this.type !== tt.slash && this.type !== tt.jsxTagEnd)\n        node.attributes.push(this.jsx_parseAttribute());\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, 'JSXOpeningElement');\n    };\n\n    // Parses JSX closing tag starting after '</'.\n\n    pp.jsx_parseClosingElementAt = function(startPos, startLoc) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.name = this.jsx_parseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, 'JSXClosingElement');\n    };\n\n    // Parses entire JSX element, including it's opening tag\n    // (starting after '<'), attributes, contents and closing tag.\n\n    pp.jsx_parseElementAt = function(startPos, startLoc) {\n      var node = this.startNodeAt(startPos, startLoc);\n      var children = [];\n      var openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n      var closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.type) {\n          case tt.jsxTagStart:\n            startPos = this.start; startLoc = this.startLoc;\n            this.next();\n            if (this.eat(tt.slash)) {\n              closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n            children.push(this.jsx_parseElementAt(startPos, startLoc));\n            break;\n\n          case tt.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case tt.braceL:\n            children.push(this.jsx_parseExpressionContainer());\n            break;\n\n          default:\n            this.unexpected();\n          }\n        }\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(\n            closingElement.start,\n            'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');\n        }\n      }\n\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n      node.children = children;\n      if (this.type === tt.relational && this.value === \"<\") {\n        this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n      }\n      return this.finishNode(node, 'JSXElement');\n    };\n\n    // Parses entire JSX element from current position.\n\n    pp.jsx_parseElement = function() {\n      var startPos = this.start, startLoc = this.startLoc;\n      this.next();\n      return this.jsx_parseElementAt(startPos, startLoc);\n    };\n\n    acorn.plugins.jsx = function(instance, opts) {\n      if (!opts) {\n        return;\n      }\n\n      if (typeof opts !== 'object') {\n        opts = {};\n      }\n\n      instance.options.plugins.jsx = {\n        allowNamespaces: opts.allowNamespaces !== false,\n        allowNamespacedObjects: !!opts.allowNamespacedObjects\n      };\n\n      instance.extend('parseExprAtom', function(inner) {\n        return function(refShortHandDefaultPos) {\n          if (this.type === tt.jsxText)\n            return this.parseLiteral(this.value);\n          else if (this.type === tt.jsxTagStart)\n            return this.jsx_parseElement();\n          else\n            return inner.call(this, refShortHandDefaultPos);\n        };\n      });\n\n      instance.extend('readToken', function(inner) {\n        return function(code) {\n          var context = this.curContext();\n\n          if (context === tc.j_expr) return this.jsx_readToken();\n\n          if (context === tc.j_oTag || context === tc.j_cTag) {\n            if (acorn.isIdentifierStart(code)) return this.jsx_readWord();\n\n            if (code == 62) {\n              ++this.pos;\n              return this.finishToken(tt.jsxTagEnd);\n            }\n\n            if ((code === 34 || code === 39) && context == tc.j_oTag)\n              return this.jsx_readString(code);\n          }\n\n          if (code === 60 && this.exprAllowed) {\n            ++this.pos;\n            return this.finishToken(tt.jsxTagStart);\n          }\n          return inner.call(this, code);\n        };\n      });\n\n      instance.extend('updateContext', function(inner) {\n        return function(prevType) {\n          if (this.type == tt.braceL) {\n            var curContext = this.curContext();\n            if (curContext == tc.j_oTag) this.context.push(tc.b_expr);\n            else if (curContext == tc.j_expr) this.context.push(tc.b_tmpl);\n            else inner.call(this, prevType);\n            this.exprAllowed = true;\n          } else if (this.type === tt.slash && prevType === tt.jsxTagStart) {\n            this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n            this.context.push(tc.j_cTag); // reconsider as closing tag context\n            this.exprAllowed = false;\n          } else {\n            return inner.call(this, prevType);\n          }\n        };\n      });\n    };\n\n    return acorn;\n  };\n  });\n\n  var acornJsx = (inject && typeof inject === 'object' && 'default' in inject ? inject['default'] : inject);\n\n  var inject$1 = __commonjs(function (module) {\n  'use strict';\n\n  module.exports = function(acorn) {\n    var tt = acorn.tokTypes;\n    var pp = acorn.Parser.prototype;\n\n    // this is the same parseObj that acorn has with...\n    function parseObj(isPattern, refDestructuringErrors) {\n      var this$1 = this;\n\n      var node = this.startNode(), first = true, propHash = {}\n      node.properties = []\n      this.next()\n      while (!this$1.eat(tt.braceR)) {\n        if (!first) {\n          this$1.expect(tt.comma)\n          if (this$1.afterTrailingComma(tt.braceR)) break\n        } else first = false\n\n        var prop = this$1.startNode(), isGenerator, startPos, startLoc\n        if (this$1.options.ecmaVersion >= 6) {\n          // ...the spread logic borrowed from babylon :)\n          if (this$1.type === tt.ellipsis) {\n            prop = this$1.parseSpread()\n            prop.type = isPattern ? \"RestProperty\" : \"SpreadProperty\"\n            node.properties.push(prop)\n            continue\n          }\n\n          prop.method = false\n          prop.shorthand = false\n          if (isPattern || refDestructuringErrors) {\n            startPos = this$1.start\n            startLoc = this$1.startLoc\n          }\n          if (!isPattern)\n            isGenerator = this$1.eat(tt.star)\n        }\n        this$1.parsePropertyName(prop)\n        this$1.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors)\n        this$1.checkPropClash(prop, propHash)\n        node.properties.push(this$1.finishNode(prop, \"Property\"))\n      }\n      return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n    }\n\n    acorn.plugins.objectSpread = function objectSpreadPlugin(instance) {\n      pp.parseObj = parseObj;\n    };\n\n    return acorn;\n  };\n  });\n\n  var acornObjectSpread = (inject$1 && typeof inject$1 === 'object' && 'default' in inject$1 ? inject$1['default'] : inject$1);\n\n  var keys = {\n  \tProgram: [ 'body' ],\n  \tLiteral: []\n  };\n\n  // used for debugging, without the noise created by\n  // circular references\n  function toJSON ( node ) {\n  \tvar obj = {};\n\n  \tObject.keys( node ).forEach( function ( key ) {\n  \t\tif ( key === 'parent' || key === 'program' || key === 'keys' || key === '__wrapped' ) return;\n\n  \t\tif ( Array.isArray( node[ key ] ) ) {\n  \t\t\tobj[ key ] = node[ key ].map( toJSON );\n  \t\t} else if ( node[ key ] && node[ key ].toJSON ) {\n  \t\t\tobj[ key ] = node[ key ].toJSON();\n  \t\t} else {\n  \t\t\tobj[ key ] = node[ key ];\n  \t\t}\n  \t});\n\n  \treturn obj;\n  }\n\n  var Node = function Node ( raw, parent ) {\n  \traw.parent = parent;\n  \traw.program = parent.program || parent;\n  \traw.depth = parent.depth + 1;\n  \traw.keys = keys[ raw.type ];\n  \traw.indentation = undefined;\n\n  \tfor ( var i = 0, list = keys[ raw.type ]; i < list.length; i += 1 ) {\n  \t\tvar key = list[i];\n\n  \t\t\twrap( raw[ key ], raw );\n  \t}\n\n  \traw.program.magicString.addSourcemapLocation( raw.start );\n  \traw.program.magicString.addSourcemapLocation( raw.end );\n  };\n\n  Node.prototype.ancestor = function ancestor ( level ) {\n  \tvar node = this;\n  \twhile ( level-- ) {\n  \t\tnode = node.parent;\n  \t\tif ( !node ) return null;\n  \t}\n\n  \treturn node;\n  };\n\n  Node.prototype.contains = function contains ( node ) {\n  \t\tvar this$1 = this;\n\n  \twhile ( node ) {\n  \t\tif ( node === this$1 ) return true;\n  \t\tnode = node.parent;\n  \t}\n\n  \treturn false;\n  };\n\n  Node.prototype.findLexicalBoundary = function findLexicalBoundary () {\n  \treturn this.parent.findLexicalBoundary();\n  };\n\n  Node.prototype.findNearest = function findNearest ( type ) {\n  \tif ( typeof type === 'string' ) type = new RegExp( (\"^\" + type + \"$\") );\n  \tif ( type.test( this.type ) ) return this;\n  \treturn this.parent.findNearest( type );\n  };\n\n  Node.prototype.unparenthesizedParent = function unparenthesizedParent () {\n  \tvar node = this.parent;\n  \twhile ( node && node.type === 'ParenthesizedExpression' ) {\n  \t\tnode = node.parent;\n  \t}\n  \treturn node;\n  };\n\n  Node.prototype.unparenthesize = function unparenthesize () {\n  \tvar node = this;\n  \twhile ( node.type === 'ParenthesizedExpression' ) {\n  \t\tnode = node.expression;\n  \t}\n  \treturn node;\n  };\n\n  Node.prototype.findScope = function findScope ( functionScope ) {\n  \treturn this.parent.findScope( functionScope );\n  };\n\n  Node.prototype.getIndentation = function getIndentation () {\n  \treturn this.parent.getIndentation();\n  };\n\n  Node.prototype.initialise = function initialise ( transforms ) {\n  \tfor ( var i = 0, list = this.keys; i < list.length; i += 1 ) {\n  \t\tvar key = list[i];\n\n  \t\t\tvar value = this[ key ];\n\n  \t\tif ( Array.isArray( value ) ) {\n  \t\t\tvalue.forEach( function ( node ) { return node && node.initialise( transforms ); } );\n  \t\t} else if ( value && typeof value === 'object' ) {\n  \t\t\tvalue.initialise( transforms );\n  \t\t}\n  \t}\n  };\n\n  Node.prototype.toJSON = function toJSON$1 () {\n  \treturn toJSON( this );\n  };\n\n  Node.prototype.toString = function toString () {\n  \treturn this.program.magicString.original.slice( this.start, this.end );\n  };\n\n  Node.prototype.transpile = function transpile ( code, transforms ) {\n  \tfor ( var i = 0, list = this.keys; i < list.length; i += 1 ) {\n  \t\tvar key = list[i];\n\n  \t\t\tvar value = this[ key ];\n\n  \t\tif ( Array.isArray( value ) ) {\n  \t\t\tvalue.forEach( function ( node ) { return node && node.transpile( code, transforms ); } );\n  \t\t} else if ( value && typeof value === 'object' ) {\n  \t\t\tvalue.transpile( code, transforms );\n  \t\t}\n  \t}\n  };\n\n  function isArguments ( node ) {\n  \treturn node.type === 'Identifier' && node.name === 'arguments';\n  }\n\n  function spread ( code, elements, start, argumentsArrayAlias, isNew ) {\n  \tvar i = elements.length;\n  \tvar firstSpreadIndex = -1;\n\n  \twhile ( i-- ) {\n  \t\tvar element$1 = elements[i];\n  \t\tif ( element$1 && element$1.type === 'SpreadElement' ) {\n  \t\t\tif ( isArguments( element$1.argument ) ) {\n  \t\t\t\tcode.overwrite( element$1.argument.start, element$1.argument.end, argumentsArrayAlias );\n  \t\t\t}\n\n  \t\t\tfirstSpreadIndex = i;\n  \t\t}\n  \t}\n\n  \tif ( firstSpreadIndex === -1 ) return false; // false indicates no spread elements\n\n  \tif (isNew) {\n  \t\tfor ( i = 0; i < elements.length; i += 1 ) {\n  \t\t\tvar element$2 = elements[i];\n  \t\t\tif ( element$2.type === 'SpreadElement' ) {\n  \t\t\t\tcode.remove( element$2.start, element$2.argument.start );\n  \t\t\t} else {\n  \t\t\t\tcode.insertRight( element$2.start, '[' );\n  \t\t\t\tcode.insertRight( element$2.end, ']' );\n  \t\t\t}\n  \t\t}\n\n  \t\treturn true; // true indicates some spread elements\n  \t}\n\n  \tvar element = elements[ firstSpreadIndex ];\n  \tvar previousElement = elements[ firstSpreadIndex - 1 ];\n\n  \tif ( !previousElement ) {\n  \t\tcode.remove( start, element.start );\n  \t\tcode.overwrite( element.end, elements[1].start, '.concat( ' );\n  \t} else {\n  \t\tcode.overwrite( previousElement.end, element.start, ' ].concat( ' );\n  \t}\n\n  \tfor ( i = firstSpreadIndex; i < elements.length; i += 1 ) {\n  \t\telement = elements[i];\n\n  \t\tif ( element ) {\n  \t\t\tif ( element.type === 'SpreadElement' ) {\n  \t\t\t\tcode.remove( element.start, element.argument.start );\n  \t\t\t} else {\n  \t\t\t\tcode.insertLeft( element.start, '[' );\n  \t\t\t\tcode.insertLeft( element.end, ']' );\n  \t\t\t}\n  \t\t}\n  \t}\n\n  \treturn true; // true indicates some spread elements\n  }\n\n  var ArrayExpression = (function (Node) {\n  \tfunction ArrayExpression () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) ArrayExpression.__proto__ = Node;\n  \tArrayExpression.prototype = Object.create( Node && Node.prototype );\n  \tArrayExpression.prototype.constructor = ArrayExpression;\n\n  \tArrayExpression.prototype.initialise = function initialise ( transforms ) {\n  \t\tvar this$1 = this;\n\n  \t\tif ( transforms.spreadRest && this.elements.length ) {\n  \t\t\tvar lexicalBoundary = this.findLexicalBoundary();\n\n  \t\t\tvar i = this.elements.length;\n  \t\t\twhile ( i-- ) {\n  \t\t\t\tvar element = this$1.elements[i];\n  \t\t\t\tif ( element && element.type === 'SpreadElement' && isArguments( element.argument ) ) {\n  \t\t\t\t\tthis$1.argumentsArrayAlias = lexicalBoundary.getArgumentsArrayAlias();\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \tArrayExpression.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( transforms.spreadRest ) {\n  \t\t\t// erase trailing comma after last array element if not an array hole\n  \t\t\tif ( this.elements.length ) {\n  \t\t\t\tvar lastElement = this.elements[ this.elements.length - 1 ];\n  \t\t\t\tif ( lastElement && /\\s*,/.test( code.original.slice( lastElement.end, this.end ) ) ) {\n  \t\t\t\t\tcode.overwrite( lastElement.end, this.end - 1, ' ' );\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\tif ( this.elements.length === 1 ) {\n  \t\t\t\tvar element = this.elements[0];\n\n  \t\t\t\tif ( element && element.type === 'SpreadElement' ) {\n  \t\t\t\t\t// special case – [ ...arguments ]\n  \t\t\t\t\tif ( isArguments( element.argument ) ) {\n  \t\t\t\t\t\tcode.overwrite( this.start, this.end, (\"[].concat( \" + (this.argumentsArrayAlias) + \" )\") ); // TODO if this is the only use of argsArray, don't bother concating\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tcode.overwrite( this.start, element.argument.start, '[].concat( ' );\n  \t\t\t\t\t\tcode.overwrite( element.end, this.end, ' )' );\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\telse {\n  \t\t\t\tvar hasSpreadElements = spread( code, this.elements, this.start, this.argumentsArrayAlias );\n\n  \t\t\t\tif ( hasSpreadElements ) {\n  \t\t\t\t\tcode.overwrite( this.end - 1, this.end, ')' );\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn ArrayExpression;\n  }(Node));\n\n  var ArrowFunctionExpression = (function (Node) {\n  \tfunction ArrowFunctionExpression () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) ArrowFunctionExpression.__proto__ = Node;\n  \tArrowFunctionExpression.prototype = Object.create( Node && Node.prototype );\n  \tArrowFunctionExpression.prototype.constructor = ArrowFunctionExpression;\n\n  \tArrowFunctionExpression.prototype.initialise = function initialise ( transforms ) {\n  \t\tthis.body.createScope();\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \tArrowFunctionExpression.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( transforms.arrow ) {\n  \t\t\t// remove arrow\n  \t\t\tvar charIndex = this.body.start;\n  \t\t\twhile ( code.original[ charIndex ] !== '=' ) {\n  \t\t\t\tcharIndex -= 1;\n  \t\t\t}\n  \t\t\tcode.remove( charIndex, this.body.start );\n\n  \t\t\t// wrap naked parameter\n  \t\t\tif ( this.params.length === 1 && this.start === this.params[0].start ) {\n  \t\t\t\tcode.insertRight( this.params[0].start, '(' );\n  \t\t\t\tcode.insertLeft( this.params[0].end, ')' );\n  \t\t\t}\n\n  \t\t\t// add function\n  \t\t\tif ( this.parent && this.parent.type === 'ExpressionStatement' ) {\n  \t\t\t\t// standalone expression statement\n  \t\t\t\tcode.insertRight( this.start, '(function' );\n  \t\t\t\tcode.insertRight( this.end, ')' );\n  \t\t\t} else {\n  \t\t\t\tcode.insertRight( this.start, 'function ' );\n  \t\t\t}\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn ArrowFunctionExpression;\n  }(Node));\n\n  function locate ( source, index ) {\n  \tvar lines = source.split( '\\n' );\n  \tvar len = lines.length;\n\n  \tvar lineStart = 0;\n  \tvar i;\n\n  \tfor ( i = 0; i < len; i += 1 ) {\n  \t\tvar line = lines[i];\n  \t\tvar lineEnd =  lineStart + line.length + 1; // +1 for newline\n\n  \t\tif ( lineEnd > index ) {\n  \t\t\treturn { line: i + 1, column: index - lineStart, char: i };\n  \t\t}\n\n  \t\tlineStart = lineEnd;\n  \t}\n\n  \tthrow new Error( 'Could not determine location of character' );\n  }\n\n  function pad ( num, len ) {\n  \tvar result = String( num );\n  \treturn result + repeat( ' ', len - result.length );\n  }\n\n  function repeat ( str, times ) {\n  \tvar result = '';\n  \twhile ( times-- ) result += str;\n  \treturn result;\n  }\n\n  function getSnippet ( source, loc, length ) {\n  \tif ( length === void 0 ) length = 1;\n\n  \tvar first = Math.max( loc.line - 5, 0 );\n  \tvar last = loc.line;\n\n  \tvar numDigits = String( last ).length;\n\n  \tvar lines = source.split( '\\n' ).slice( first, last );\n\n  \tvar lastLine = lines[ lines.length - 1 ];\n  \tvar offset = lastLine.slice( 0, loc.column ).replace( /\\t/g, '  ' ).length;\n\n  \tvar snippet = lines\n  \t\t.map( function ( line, i ) { return ((pad( i + first + 1, numDigits )) + \" : \" + (line.replace( /\\t/g, '  '))); } )\n  \t\t.join( '\\n' );\n\n  \tsnippet += '\\n' + repeat( ' ', numDigits + 3 + offset ) + repeat( '^', length );\n\n  \treturn snippet;\n  }\n\n  var CompileError = (function (Error) {\n  \tfunction CompileError ( node, message ) {\n  \t\tError.call(this);\n\n  \t\tvar source = node.program.magicString.original;\n  \t\tvar loc = locate( source, node.start );\n\n  \t\tthis.name = 'CompileError';\n  \t\tthis.message = message + \" (\" + (loc.line) + \":\" + (loc.column) + \")\";\n\n  \t\tthis.stack = new Error().stack.replace( new RegExp( (\".+new \" + (this.name) + \".+\\\\n\"), 'm' ), '' );\n\n  \t\tthis.loc = loc;\n  \t\tthis.snippet = getSnippet( source, loc, node.end - node.start );\n  \t}\n\n  \tif ( Error ) CompileError.__proto__ = Error;\n  \tCompileError.prototype = Object.create( Error && Error.prototype );\n  \tCompileError.prototype.constructor = CompileError;\n\n  \tCompileError.prototype.toString = function toString () {\n  \t\treturn ((this.name) + \": \" + (this.message) + \"\\n\" + (this.snippet));\n  \t};\n\n  \treturn CompileError;\n  }(Error));\n\n  var AssignmentExpression = (function (Node) {\n  \tfunction AssignmentExpression () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) AssignmentExpression.__proto__ = Node;\n  \tAssignmentExpression.prototype = Object.create( Node && Node.prototype );\n  \tAssignmentExpression.prototype.constructor = AssignmentExpression;\n\n  \tAssignmentExpression.prototype.initialise = function initialise ( transforms ) {\n  \t\tif ( this.left.type === 'Identifier' ) {\n  \t\t\tvar declaration = this.findScope( false ).findDeclaration( this.left.name );\n  \t\t\tif ( declaration && declaration.kind === 'const' ) {\n  \t\t\t\tthrow new CompileError( this.left, ((this.left.name) + \" is read-only\") );\n  \t\t\t}\n\n  \t\t\t// special case – https://gitlab.com/Rich-Harris/buble/issues/11\n  \t\t\tvar statement = declaration && declaration.node.ancestor( 3 );\n  \t\t\tif ( statement && statement.type === 'ForStatement' && statement.body.contains( this ) ) {\n  \t\t\t\tstatement.reassigned[ this.left.name ] = true;\n  \t\t\t}\n  \t\t}\n\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \tAssignmentExpression.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( this.operator === '**=' && transforms.exponentiation ) {\n  \t\t\tthis.transpileExponentiation( code, transforms );\n  \t\t}\n\n  \t\telse if ( /Pattern/.test( this.left.type ) && transforms.destructuring ) {\n  \t\t\tthis.transpileDestructuring( code, transforms );\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \tAssignmentExpression.prototype.transpileDestructuring = function transpileDestructuring ( code ) {\n  \t\tvar scope = this.findScope( true );\n  \t\tvar assign = scope.createIdentifier( 'assign' );\n  \t\tvar temporaries = [ assign ];\n\n  \t\tvar start = this.start;\n\n  \t\t// We need to pick out some elements from the original code,\n  \t\t// interleaved with generated code. These helpers are used to\n  \t\t// easily do that while keeping the order of the output\n  \t\t// predictable.\n  \t\tvar text = '';\n  \t\tfunction use ( node ) {\n  \t\t\tcode.insertRight( node.start, text );\n  \t\t\tcode.move( node.start, node.end, start );\n  \t\t\ttext = '';\n  \t\t}\n  \t\tfunction write ( string ) {\n  \t\t\ttext += string;\n  \t\t}\n\n  \t\twrite( (\"(\" + assign + \" = \") );\n  \t\tuse( this.right );\n\n  \t\t// Walk `pattern`, generating code that assigns the value in\n  \t\t// `ref` to it. When `mayDuplicate` is false, the function\n  \t\t// must take care to only output `ref` once.\n  \t\tfunction destructure ( pattern, ref, mayDuplicate ) {\n  \t\t\tif ( pattern.type === 'Identifier' || pattern.type === 'MemberExpression' ) {\n  \t\t\t\twrite( ', ' );\n  \t\t\t\tuse( pattern );\n  \t\t\t\twrite( (\" = \" + ref) );\n  \t\t\t}\n\n  \t\t\telse if ( pattern.type === 'AssignmentPattern' ) {\n  \t\t\t\tif ( pattern.left.type === 'Identifier' ) {\n  \t\t\t\t\tvar target = pattern.left.name;\n  \t\t\t\t\tvar source = ref;\n  \t\t\t\t\tif ( !mayDuplicate ) {\n  \t\t\t\t\t\twrite( (\", \" + target + \" = \" + ref) );\n  \t\t\t\t\t\tsource = target;\n  \t\t\t\t\t}\n  \t\t\t\t\twrite( (\", \" + target + \" = \" + source + \" === void 0 ? \") );\n  \t\t\t\t\tuse( pattern.right );\n  \t\t\t\t\twrite( (\" : \" + source) );\n  \t\t\t\t}\n  \t\t\t\telse {\n  \t\t\t\t\tvar target$1 = scope.createIdentifier( 'temp' );\n  \t\t\t\t\tvar source$1 = ref;\n  \t\t\t\t\ttemporaries.push( target$1 );\n  \t\t\t\t\tif ( !mayDuplicate ) {\n  \t\t\t\t\t\twrite( (\", \" + target$1 + \" = \" + ref) );\n  \t\t\t\t\t\tsource$1 = target$1;\n  \t\t\t\t\t}\n  \t\t\t\t\twrite( (\", \" + target$1 + \" = \" + source$1 + \" === void 0 ? \") );\n  \t\t\t\t\tuse( pattern.right );\n  \t\t\t\t\twrite( (\" : \" + source$1) );\n  \t\t\t\t\tdestructure( pattern.left, target$1, true );\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\telse if ( pattern.type === 'ArrayPattern' ) {\n  \t\t\t\tvar elements = pattern.elements;\n  \t\t\t\tif ( elements.length === 1 ) {\n  \t\t\t\t\tdestructure( elements[0], (ref + \"[0]\"), false );\n  \t\t\t\t}\n  \t\t\t\telse {\n  \t\t\t\t\tif ( !mayDuplicate ) {\n  \t\t\t\t\t\tvar temp = scope.createIdentifier( 'array' );\n  \t\t\t\t\t\ttemporaries.push( temp );\n  \t\t\t\t\t\twrite( (\", \" + temp + \" = \" + ref) );\n  \t\t\t\t\t\tref = temp;\n  \t\t\t\t\t}\n  \t\t\t\t\telements.forEach( function ( element, i ) {\n  \t\t\t\t\t\tif ( element ) {\n  \t\t\t\t\t\t\tif ( element.type === 'RestElement' ) {\n  \t\t\t\t\t\t\t\tdestructure( element.argument, (ref + \".slice(\" + i + \")\"), false );\n  \t\t\t\t\t\t\t} else {\n  \t\t\t\t\t\t\t\tdestructure( element, (ref + \"[\" + i + \"]\"), false );\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t}\n  \t\t\t\t\t} );\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\telse if ( pattern.type === 'ObjectPattern' ) {\n  \t\t\t\tvar props = pattern.properties;\n  \t\t\t\tif ( props.length == 1 ) {\n  \t\t\t\t\tvar prop = props[0];\n  \t\t\t\t\tvar value = prop.computed || prop.key.type !== 'Identifier' ? (ref + \"[\" + (code.slice(prop.key.start, prop.key.end)) + \"]\") : (ref + \".\" + (prop.key.name));\n  \t\t\t\t\tdestructure( prop.value, value, false );\n  \t\t\t\t}\n  \t\t\t\telse {\n  \t\t\t\t\tif ( !mayDuplicate ) {\n  \t\t\t\t\t\tvar temp$1 = scope.createIdentifier( 'obj' );\n  \t\t\t\t\t\ttemporaries.push( temp$1 );\n  \t\t\t\t\t\twrite( (\", \" + temp$1 + \" = \" + ref) );\n  \t\t\t\t\t\tref = temp$1;\n  \t\t\t\t\t}\n  \t\t\t\t\tprops.forEach( function ( prop ) {\n  \t\t\t\t\t\tvar value = prop.computed || prop.key.type !== 'Identifier' ? (ref + \"[\" + (code.slice(prop.key.start, prop.key.end)) + \"]\") : (ref + \".\" + (prop.key.name));\n  \t\t\t\t\t\tdestructure( prop.value, value, false );\n  \t\t\t\t\t} );\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\telse {\n  \t\t\t\tthrow new Error( (\"Unexpected node type in destructuring assignment (\" + (pattern.type) + \")\") );\n  \t\t\t}\n  \t\t}\n  \t\tdestructure( this.left, assign, true );\n\n  \t\tif ( this.unparenthesizedParent().type === 'ExpressionStatement' ) {\n  \t\t\t// no rvalue needed for expression statement\n  \t\t\tcode.insertRight( start, (text + \")\") );\n  \t\t} else {\n  \t\t\t// destructuring is part of an expression - need an rvalue\n  \t\t\tcode.insertRight( start, (text + \", \" + assign + \")\") );\n  \t\t}\n\n  \t\tcode.remove( start, this.right.start );\n\n  \t\tvar statement = this.findNearest( /(?:Statement|Declaration)$/ );\n  \t\tcode.insertLeft( statement.start, (\"var \" + (temporaries.join( ', ' )) + \";\\n\" + (statement.getIndentation())) );\n  \t};\n\n  \tAssignmentExpression.prototype.transpileExponentiation = function transpileExponentiation ( code ) {\n  \t\tvar scope = this.findScope( false );\n  \t\tvar getAlias = function ( name ) {\n  \t\t\tvar declaration = scope.findDeclaration( name );\n  \t\t\treturn declaration ? declaration.name : name;\n  \t\t};\n\n  \t\t// first, the easy part – `**=` -> `=`\n  \t\tvar charIndex = this.left.end;\n  \t\twhile ( code.original[ charIndex ] !== '*' ) charIndex += 1;\n  \t\tcode.remove( charIndex, charIndex + 2 );\n\n  \t\t// how we do the next part depends on a number of factors – whether\n  \t\t// this is a top-level statement, and whether we're updating a\n  \t\t// simple or complex reference\n  \t\tvar base;\n\n  \t\tvar left = this.left.unparenthesize();\n\n  \t\tif ( left.type === 'Identifier' ) {\n  \t\t\tbase = getAlias( left.name );\n  \t\t} else if ( left.type === 'MemberExpression' ) {\n  \t\t\tvar object;\n  \t\t\tvar needsObjectVar = false;\n  \t\t\tvar property;\n  \t\t\tvar needsPropertyVar = false;\n\n  \t\t\tvar statement = this.findNearest( /(?:Statement|Declaration)$/ );\n  \t\t\tvar i0 = statement.getIndentation();\n\n  \t\t\tif ( left.property.type === 'Identifier' ) {\n  \t\t\t\tproperty = left.computed ? getAlias( left.property.name ) : left.property.name;\n  \t\t\t} else {\n  \t\t\t\tproperty = scope.createIdentifier( 'property' );\n  \t\t\t\tneedsPropertyVar = true;\n  \t\t\t}\n\n  \t\t\tif ( left.object.type === 'Identifier' ) {\n  \t\t\t\tobject = getAlias( left.object.name );\n  \t\t\t} else {\n  \t\t\t\tobject = scope.createIdentifier( 'object' );\n  \t\t\t\tneedsObjectVar = true;\n  \t\t\t}\n\n  \t\t\tif ( left.start === statement.start ) {\n  \t\t\t\tif ( needsObjectVar && needsPropertyVar ) {\n  \t\t\t\t\tcode.insertRight( statement.start, (\"var \" + object + \" = \") );\n  \t\t\t\t\tcode.overwrite( left.object.end, left.property.start, (\";\\n\" + i0 + \"var \" + property + \" = \") );\n  \t\t\t\t\tcode.overwrite( left.property.end, left.end, (\";\\n\" + i0 + object + \"[\" + property + \"]\") );\n  \t\t\t\t}\n\n  \t\t\t\telse if ( needsObjectVar ) {\n  \t\t\t\t\tcode.insertRight( statement.start, (\"var \" + object + \" = \") );\n  \t\t\t\t\tcode.insertLeft( left.object.end, (\";\\n\" + i0) );\n  \t\t\t\t\tcode.insertLeft( left.object.end, object );\n  \t\t\t\t}\n\n  \t\t\t\telse if ( needsPropertyVar ) {\n  \t\t\t\t\tcode.insertRight( left.property.start, (\"var \" + property + \" = \") );\n  \t\t\t\t\tcode.insertLeft( left.property.end, (\";\\n\" + i0) );\n  \t\t\t\t\tcode.move( left.property.start, left.property.end, this.start );\n\n  \t\t\t\t\tcode.insertLeft( left.object.end, (\"[\" + property + \"]\") );\n  \t\t\t\t\tcode.remove( left.object.end, left.property.start );\n  \t\t\t\t\tcode.remove( left.property.end, left.end );\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\telse {\n  \t\t\t\tvar declarators = [];\n  \t\t\t\tif ( needsObjectVar ) declarators.push( object );\n  \t\t\t\tif ( needsPropertyVar ) declarators.push( property );\n\n  \t\t\t\tif ( declarators.length ) {\n  \t\t\t\t\tcode.insertRight( statement.start, (\"var \" + (declarators.join( ', ' )) + \";\\n\" + i0) );\n  \t\t\t\t}\n\n  \t\t\t\tif ( needsObjectVar && needsPropertyVar ) {\n  \t\t\t\t\tcode.insertRight( left.start, (\"( \" + object + \" = \") );\n  \t\t\t\t\tcode.overwrite( left.object.end, left.property.start, (\", \" + property + \" = \") );\n  \t\t\t\t\tcode.overwrite( left.property.end, left.end, (\", \" + object + \"[\" + property + \"]\") );\n  \t\t\t\t}\n\n  \t\t\t\telse if ( needsObjectVar ) {\n  \t\t\t\t\tcode.insertRight( left.start, (\"( \" + object + \" = \") );\n  \t\t\t\t\tcode.insertLeft( left.object.end, (\", \" + object) );\n  \t\t\t\t}\n\n  \t\t\t\telse if ( needsPropertyVar ) {\n  \t\t\t\t\tcode.insertRight( left.property.start, (\"( \" + property + \" = \") );\n  \t\t\t\t\tcode.insertLeft( left.property.end, \", \" );\n  \t\t\t\t\tcode.move( left.property.start, left.property.end, left.start );\n\n  \t\t\t\t\tcode.overwrite( left.object.end, left.property.start, (\"[\" + property + \"]\") );\n  \t\t\t\t\tcode.remove( left.property.end, left.end );\n  \t\t\t\t}\n\n  \t\t\t\tif ( needsPropertyVar ) {\n  \t\t\t\t\tcode.insertLeft( this.end, \" )\" );\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\tbase = object + ( left.computed || needsPropertyVar ? (\"[\" + property + \"]\") : (\".\" + property) );\n  \t\t}\n\n  \t\tcode.insertRight( this.right.start, (\"Math.pow( \" + base + \", \") );\n  \t\tcode.insertLeft( this.right.end, \" )\" );\n  \t};\n\n  \treturn AssignmentExpression;\n  }(Node));\n\n  var BinaryExpression = (function (Node) {\n  \tfunction BinaryExpression () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) BinaryExpression.__proto__ = Node;\n  \tBinaryExpression.prototype = Object.create( Node && Node.prototype );\n  \tBinaryExpression.prototype.constructor = BinaryExpression;\n\n  \tBinaryExpression.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( this.operator === '**' && transforms.exponentiation ) {\n  \t\t\tcode.insertRight( this.start, \"Math.pow( \" );\n  \t\t\tcode.overwrite( this.left.end, this.right.start, \", \" );\n  \t\t\tcode.insertLeft( this.end, \" )\" );\n  \t\t}\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn BinaryExpression;\n  }(Node));\n\n  var loopStatement = /(?:For(?:In|Of)?|While)Statement/;\n\n  var BreakStatement = (function (Node) {\n  \tfunction BreakStatement () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) BreakStatement.__proto__ = Node;\n  \tBreakStatement.prototype = Object.create( Node && Node.prototype );\n  \tBreakStatement.prototype.constructor = BreakStatement;\n\n  \tBreakStatement.prototype.initialise = function initialise () {\n  \t\tvar loop = this.findNearest( loopStatement );\n  \t\tvar switchCase = this.findNearest( 'SwitchCase' );\n\n  \t\tif ( loop && ( !switchCase || loop.depth > switchCase.depth ) ) {\n  \t\t\tloop.canBreak = true;\n  \t\t\tthis.loop = loop;\n  \t\t}\n  \t};\n\n  \tBreakStatement.prototype.transpile = function transpile ( code ) {\n  \t\tif ( this.loop && this.loop.shouldRewriteAsFunction ) {\n  \t\t\tif ( this.label ) throw new CompileError( this, 'Labels are not currently supported in a loop with locally-scoped variables' );\n  \t\t\tcode.overwrite( this.start, this.start + 5, \"return 'break'\" );\n  \t\t}\n  \t};\n\n  \treturn BreakStatement;\n  }(Node));\n\n  var CallExpression = (function (Node) {\n  \tfunction CallExpression () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) CallExpression.__proto__ = Node;\n  \tCallExpression.prototype = Object.create( Node && Node.prototype );\n  \tCallExpression.prototype.constructor = CallExpression;\n\n  \tCallExpression.prototype.initialise = function initialise ( transforms ) {\n  \t\tvar this$1 = this;\n\n  \t\tif ( transforms.spreadRest && this.arguments.length > 1 ) {\n  \t\t\tvar lexicalBoundary = this.findLexicalBoundary();\n\n  \t\t\tvar i = this.arguments.length;\n  \t\t\twhile ( i-- ) {\n  \t\t\t\tvar arg = this$1.arguments[i];\n  \t\t\t\tif ( arg.type === 'SpreadElement' && isArguments( arg.argument ) ) {\n  \t\t\t\t\tthis$1.argumentsArrayAlias = lexicalBoundary.getArgumentsArrayAlias();\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \tCallExpression.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( transforms.spreadRest && this.arguments.length ) {\n  \t\t\tvar hasSpreadElements = false;\n  \t\t\tvar context;\n\n  \t\t\tvar firstArgument = this.arguments[0];\n\n  \t\t\tif ( this.arguments.length === 1 ) {\n  \t\t\t\tif ( firstArgument.type === 'SpreadElement' ) {\n  \t\t\t\t\tcode.remove( firstArgument.start, firstArgument.argument.start );\n  \t\t\t\t\thasSpreadElements = true;\n  \t\t\t\t}\n  \t\t\t} else {\n  \t\t\t\thasSpreadElements = spread( code, this.arguments, firstArgument.start, this.argumentsArrayAlias );\n  \t\t\t}\n\n  \t\t\tif ( hasSpreadElements ) {\n\n  \t\t\t\t// we need to handle super() and super.method() differently\n  \t\t\t\t// due to its instance\n  \t\t\t\tvar _super = null;\n  \t\t\t\tif ( this.callee.type === 'Super' ) {\n  \t\t\t\t\t_super = this.callee;\n  \t\t\t\t}\n  \t\t\t\telse if ( this.callee.type === 'MemberExpression' && this.callee.object.type === 'Super' ) {\n  \t\t\t\t\t_super = this.callee.object;\n  \t\t\t\t}\n\n  \t\t\t\tif ( !_super && this.callee.type === 'MemberExpression' ) {\n  \t\t\t\t\tif ( this.callee.object.type === 'Identifier' ) {\n  \t\t\t\t\t\tcontext = this.callee.object.name;\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tcontext = this.findScope( true ).createIdentifier( 'ref' );\n  \t\t\t\t\t\tvar callExpression = this.callee.object;\n  \t\t\t\t\t\tvar enclosure = callExpression.findNearest( /Function/ );\n  \t\t\t\t\t\tvar block = enclosure ? enclosure.body.body\n  \t\t\t\t\t\t\t: callExpression.findNearest( /^Program$/ ).body;\n  \t\t\t\t\t\tvar lastStatementInBlock = block[ block.length - 1 ];\n  \t\t\t\t\t\tvar i0 = lastStatementInBlock.getIndentation();\n  \t\t\t\t\t\tcode.insertRight( callExpression.start, (\"(\" + context + \" = \") );\n  \t\t\t\t\t\tcode.insertLeft( callExpression.end, \")\" );\n  \t\t\t\t\t\tcode.insertLeft( lastStatementInBlock.end, (\"\\n\" + i0 + \"var \" + context + \";\") );\n  \t\t\t\t\t}\n  \t\t\t\t} else {\n  \t\t\t\t\tcontext = 'void 0';\n  \t\t\t\t}\n\n  \t\t\t\tcode.insertLeft( this.callee.end, '.apply' );\n\n  \t\t\t\tif ( _super ) {\n  \t\t\t\t\t_super.noCall = true; // bit hacky...\n\n  \t\t\t\t\tif ( this.arguments.length > 1 ) {\n  \t\t\t\t\t\tif ( firstArgument.type !== 'SpreadElement' ) {\n  \t\t\t\t\t\t\tcode.insertRight( firstArgument.start, \"[ \" );\n  \t\t\t\t\t\t}\n\n  \t\t\t\t\t\tcode.insertLeft( this.arguments[ this.arguments.length - 1 ].end, ' )' );\n  \t\t\t\t\t}\n  \t\t\t\t}\n\n  \t\t\t\telse if ( this.arguments.length === 1 ) {\n  \t\t\t\t\tcode.insertRight( firstArgument.start, (context + \", \") );\n  \t\t\t\t} else {\n  \t\t\t\t\tif ( firstArgument.type === 'SpreadElement' ) {\n  \t\t\t\t\t\tcode.insertLeft( firstArgument.start, (context + \", \") );\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tcode.insertLeft( firstArgument.start, (context + \", [ \") );\n  \t\t\t\t\t}\n\n  \t\t\t\t\tcode.insertLeft( this.arguments[ this.arguments.length - 1 ].end, ' )' );\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn CallExpression;\n  }(Node));\n\n  function findIndex ( array, fn ) {\n  \tfor ( var i = 0; i < array.length; i += 1 ) {\n  \t\tif ( fn( array[i], i ) ) return i;\n  \t}\n\n  \treturn -1;\n  }\n\n  var reserved = Object.create( null );\n  'do if in for let new try var case else enum eval null this true void with await break catch class const false super throw while yield delete export import public return static switch typeof default extends finally package private continue debugger function arguments interface protected implements instanceof'.split( ' ' )\n  \t.forEach( function ( word ) { return reserved[ word ] = true; } );\n\n  // TODO this code is pretty wild, tidy it up\n  var ClassBody = (function (Node) {\n  \tfunction ClassBody () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) ClassBody.__proto__ = Node;\n  \tClassBody.prototype = Object.create( Node && Node.prototype );\n  \tClassBody.prototype.constructor = ClassBody;\n\n  \tClassBody.prototype.transpile = function transpile ( code, transforms, inFunctionExpression, superName ) {\n  \t\tvar this$1 = this;\n\n  \t\tif ( transforms.classes ) {\n  \t\t\tvar name = this.parent.name;\n\n  \t\t\tvar indentStr = code.getIndentString();\n  \t\t\tvar i0 = this.getIndentation() + ( inFunctionExpression ? indentStr : '' );\n  \t\t\tvar i1 = i0 + indentStr;\n\n  \t\t\tvar constructorIndex = findIndex( this.body, function ( node ) { return node.kind === 'constructor'; } );\n  \t\t\tvar constructor = this.body[ constructorIndex ];\n\n  \t\t\tvar introBlock = '';\n  \t\t\tvar outroBlock = '';\n\n  \t\t\tif ( this.body.length ) {\n  \t\t\t\tcode.remove( this.start, this.body[0].start );\n  \t\t\t\tcode.remove( this.body[ this.body.length - 1 ].end, this.end );\n  \t\t\t} else {\n  \t\t\t\tcode.remove( this.start, this.end );\n  \t\t\t}\n\n  \t\t\tif ( constructor ) {\n  \t\t\t\tconstructor.value.body.isConstructorBody = true;\n\n  \t\t\t\tvar previousMethod = this.body[ constructorIndex - 1 ];\n  \t\t\t\tvar nextMethod = this.body[ constructorIndex + 1 ];\n\n  \t\t\t\t// ensure constructor is first\n  \t\t\t\tif ( constructorIndex > 0 ) {\n  \t\t\t\t\tcode.remove( previousMethod.end, constructor.start );\n  \t\t\t\t\tcode.move( constructor.start, nextMethod ? nextMethod.start : this.end - 1, this.body[0].start );\n  \t\t\t\t}\n\n  \t\t\t\tif ( !inFunctionExpression ) code.insertLeft( constructor.end, ';' );\n  \t\t\t}\n\n  \t\t\tvar namedFunctions = this.program.options.namedFunctionExpressions !== false;\n  \t\t\tvar namedConstructor = namedFunctions || this.parent.superClass || this.parent.type !== 'ClassDeclaration';\n  \t\t\tif ( this.parent.superClass ) {\n  \t\t\t\tvar inheritanceBlock = \"if ( \" + superName + \" ) \" + name + \".__proto__ = \" + superName + \";\\n\" + i0 + name + \".prototype = Object.create( \" + superName + \" && \" + superName + \".prototype );\\n\" + i0 + name + \".prototype.constructor = \" + name + \";\";\n\n  \t\t\t\tif ( constructor ) {\n  \t\t\t\t\tintroBlock += \"\\n\\n\" + i0 + inheritanceBlock;\n  \t\t\t\t} else {\n  \t\t\t\t\tvar fn = \"function \" + name + \" () {\" + ( superName ?\n  \t\t\t\t\t\t(\"\\n\" + i1 + superName + \".apply(this, arguments);\\n\" + i0 + \"}\") :\n  \t\t\t\t\t\t\"}\" ) + ( inFunctionExpression ? '' : ';' ) + ( this.body.length ? (\"\\n\\n\" + i0) : '' );\n\n  \t\t\t\t\tinheritanceBlock = fn + inheritanceBlock;\n  \t\t\t\t\tintroBlock += inheritanceBlock + \"\\n\\n\" + i0;\n  \t\t\t\t}\n  \t\t\t} else if ( !constructor ) {\n  \t\t\t\tvar fn$1 = 'function ' + (namedConstructor ? name + ' ' : '') + '() {}';\n  \t\t\t\tif ( this.parent.type === 'ClassDeclaration' ) fn$1 += ';';\n  \t\t\t\tif ( this.body.length ) fn$1 += \"\\n\\n\" + i0;\n\n  \t\t\t\tintroBlock += fn$1;\n  \t\t\t}\n\n  \t\t\tvar scope = this.findScope( false );\n\n  \t\t\tvar prototypeGettersAndSetters = [];\n  \t\t\tvar staticGettersAndSetters = [];\n  \t\t\tvar prototypeAccessors;\n  \t\t\tvar staticAccessors;\n\n  \t\t\tthis.body.forEach( function ( method, i ) {\n  \t\t\t\tif ( method.kind === 'constructor' ) {\n  \t\t\t\t\tvar constructorName = namedConstructor ? ' ' + name : '';\n  \t\t\t\t\tcode.overwrite( method.key.start, method.key.end, (\"function\" + constructorName) );\n  \t\t\t\t\treturn;\n  \t\t\t\t}\n\n  \t\t\t\tif ( method.static ) {\n  \t\t\t\t\tvar len = code.original[ method.start + 6 ] == ' ' ? 7 : 6;\n  \t\t\t\t\tcode.remove( method.start, method.start + len );\n  \t\t\t\t}\n\n  \t\t\t\tvar isAccessor = method.kind !== 'method';\n  \t\t\t\tvar lhs;\n\n  \t\t\t\tvar methodName = method.key.name;\n  \t\t\t\tif ( reserved[ methodName ] || method.value.body.scope.references[methodName] ) {\n  \t\t\t\t\tmethodName = scope.createIdentifier( methodName );\n  \t\t\t\t}\n\n  \t\t\t\t// when method name is a string or a number let's pretend it's a computed method\n\n  \t\t\t\tvar fake_computed = false;\n  \t\t\t\tif ( ! method.computed && method.key.type === 'Literal' ) {\n  \t\t\t\t\tfake_computed = true;\n  \t\t\t\t\tmethod.computed = true;\n  \t\t\t\t}\n\n  \t\t\t\tif ( isAccessor ) {\n  \t\t\t\t\tif ( method.computed ) {\n  \t\t\t\t\t\tthrow new Error( 'Computed accessor properties are not currently supported' );\n  \t\t\t\t\t}\n\n  \t\t\t\t\tcode.remove( method.start, method.key.start );\n\n  \t\t\t\t\tif ( method.static ) {\n  \t\t\t\t\t\tif ( !~staticGettersAndSetters.indexOf( method.key.name ) ) staticGettersAndSetters.push( method.key.name );\n  \t\t\t\t\t\tif ( !staticAccessors ) staticAccessors = scope.createIdentifier( 'staticAccessors' );\n\n  \t\t\t\t\t\tlhs = \"\" + staticAccessors;\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tif ( !~prototypeGettersAndSetters.indexOf( method.key.name ) ) prototypeGettersAndSetters.push( method.key.name );\n  \t\t\t\t\t\tif ( !prototypeAccessors ) prototypeAccessors = scope.createIdentifier( 'prototypeAccessors' );\n\n  \t\t\t\t\t\tlhs = \"\" + prototypeAccessors;\n  \t\t\t\t\t}\n  \t\t\t\t} else {\n  \t\t\t\t\tlhs = method.static ?\n  \t\t\t\t\t\t(\"\" + name) :\n  \t\t\t\t\t\t(name + \".prototype\");\n  \t\t\t\t}\n\n  \t\t\t\tif ( !method.computed ) lhs += '.';\n\n  \t\t\t\tvar insertNewlines = ( constructorIndex > 0 && i === constructorIndex + 1 ) ||\n  \t\t\t\t                       ( i === 0 && constructorIndex === this$1.body.length - 1 );\n\n  \t\t\t\tif ( insertNewlines ) lhs = \"\\n\\n\" + i0 + lhs;\n\n  \t\t\t\tvar c = method.key.end;\n  \t\t\t\tif ( method.computed ) {\n  \t\t\t\t\tif ( fake_computed ) {\n  \t\t\t\t\t\tcode.insertRight( method.key.start, '[' );\n  \t\t\t\t\t\tcode.insertLeft( method.key.end, ']' );\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\twhile ( code.original[c] !== ']' ) c += 1;\n  \t\t\t\t\t\tc += 1;\n  \t\t\t\t\t}\n  \t\t\t\t}\n\n  \t\t\t\tcode.insertRight( method.start, lhs );\n\n  \t\t\t\tvar funcName = method.computed || isAccessor || !namedFunctions ? '' : (methodName + \" \");\n  \t\t\t\tvar rhs = ( isAccessor ? (\".\" + (method.kind)) : '' ) + \" = function\" + ( method.value.generator ? '* ' : ' ' ) + funcName;\n  \t\t\t\tcode.remove( c, method.value.start );\n  \t\t\t\tcode.insertRight( method.value.start, rhs );\n  \t\t\t\tcode.insertLeft( method.end, ';' );\n\n  \t\t\t\tif ( method.value.generator ) code.remove( method.start, method.key.start );\n  \t\t\t});\n\n  \t\t\tif ( prototypeGettersAndSetters.length || staticGettersAndSetters.length ) {\n  \t\t\t\tvar intro = [];\n  \t\t\t\tvar outro = [];\n\n  \t\t\t\tif ( prototypeGettersAndSetters.length ) {\n  \t\t\t\t\tintro.push( (\"var \" + prototypeAccessors + \" = { \" + (prototypeGettersAndSetters.map( function ( name ) { return (name + \": {}\"); } ).join( ',' )) + \" };\") );\n  \t\t\t\t\toutro.push( (\"Object.defineProperties( \" + name + \".prototype, \" + prototypeAccessors + \" );\") );\n  \t\t\t\t}\n\n  \t\t\t\tif ( staticGettersAndSetters.length ) {\n  \t\t\t\t\tintro.push( (\"var \" + staticAccessors + \" = { \" + (staticGettersAndSetters.map( function ( name ) { return (name + \": {}\"); } ).join( ',' )) + \" };\") );\n  \t\t\t\t\toutro.push( (\"Object.defineProperties( \" + name + \", \" + staticAccessors + \" );\") );\n  \t\t\t\t}\n\n  \t\t\t\tif ( constructor ) introBlock += \"\\n\\n\" + i0;\n  \t\t\t\tintroBlock += intro.join( (\"\\n\" + i0) );\n  \t\t\t\tif ( !constructor ) introBlock += \"\\n\\n\" + i0;\n\n  \t\t\t\toutroBlock += \"\\n\\n\" + i0 + outro.join( (\"\\n\" + i0) );\n  \t\t\t}\n\n  \t\t\tif ( constructor ) {\n  \t\t\t\tcode.insertLeft( constructor.end, introBlock );\n  \t\t\t} else {\n  \t\t\t\tcode.insertRight( this.start, introBlock );\n  \t\t\t}\n\n  \t\t\tcode.insertLeft( this.end, outroBlock );\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn ClassBody;\n  }(Node));\n\n  // TODO this function is slightly flawed – it works on the original string,\n  // not its current edited state.\n  // That's not a problem for the way that it's currently used, but it could\n  // be in future...\n  function deindent ( node, code ) {\n  \tvar start = node.start;\n  \tvar end = node.end;\n\n  \tvar indentStr = code.getIndentString();\n  \tvar indentStrLen = indentStr.length;\n  \tvar indentStart = start - indentStrLen;\n\n  \tif ( !node.program.indentExclusions[ indentStart ]\n  \t&& code.original.slice( indentStart, start ) === indentStr ) {\n  \t\tcode.remove( indentStart, start );\n  \t}\n\n  \tvar pattern = new RegExp( indentStr + '\\\\S', 'g' );\n  \tvar slice = code.original.slice( start, end );\n  \tvar match;\n\n  \twhile ( match = pattern.exec( slice ) ) {\n  \t\tvar removeStart = start + match.index;\n  \t\tif ( !node.program.indentExclusions[ removeStart ] ) {\n  \t\t\tcode.remove( removeStart, removeStart + indentStrLen );\n  \t\t}\n  \t}\n  }\n\n  var ClassDeclaration = (function (Node) {\n  \tfunction ClassDeclaration () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) ClassDeclaration.__proto__ = Node;\n  \tClassDeclaration.prototype = Object.create( Node && Node.prototype );\n  \tClassDeclaration.prototype.constructor = ClassDeclaration;\n\n  \tClassDeclaration.prototype.initialise = function initialise ( transforms ) {\n  \t\tthis.name = this.id.name;\n  \t\tthis.findScope( true ).addDeclaration( this.id, 'class' );\n\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \tClassDeclaration.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( transforms.classes ) {\n  \t\t\tif ( !this.superClass ) deindent( this.body, code );\n\n  \t\t\tvar superName = this.superClass && ( this.superClass.name || 'superclass' );\n\n  \t\t\tvar i0 = this.getIndentation();\n  \t\t\tvar i1 = i0 + code.getIndentString();\n\n  \t\t\t// if this is an export default statement, we have to move the export to\n  \t\t\t// after the declaration, because `export default var Foo = ...` is illegal\n  \t\t\tvar syntheticDefaultExport = this.parent.type === 'ExportDefaultDeclaration' ?\n  \t\t\t\t(\"\\n\\n\" + i0 + \"export default \" + (this.id.name) + \";\") :\n  \t\t\t\t'';\n\n  \t\t\tif ( syntheticDefaultExport ) code.remove( this.parent.start, this.start );\n\n  \t\t\tcode.overwrite( this.start, this.id.start, 'var ' );\n\n  \t\t\tif ( this.superClass ) {\n  \t\t\t\tif ( this.superClass.end === this.body.start ) {\n  \t\t\t\t\tcode.remove( this.id.end, this.superClass.start );\n  \t\t\t\t\tcode.insertLeft( this.id.end, (\" = (function (\" + superName + \") {\\n\" + i1) );\n  \t\t\t\t} else {\n  \t\t\t\t\tcode.overwrite( this.id.end, this.superClass.start, ' = ' );\n  \t\t\t\t\tcode.overwrite( this.superClass.end, this.body.start, (\"(function (\" + superName + \") {\\n\" + i1) );\n  \t\t\t\t}\n  \t\t\t} else {\n  \t\t\t\tif ( this.id.end === this.body.start ) {\n  \t\t\t\t\tcode.insertLeft( this.id.end, ' = ' );\n  \t\t\t\t} else {\n  \t\t\t\t\tcode.overwrite( this.id.end, this.body.start, ' = ' );\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\tthis.body.transpile( code, transforms, !!this.superClass, superName );\n\n  \t\t\tif ( this.superClass ) {\n  \t\t\t\tcode.insertLeft( this.end, (\"\\n\\n\" + i1 + \"return \" + (this.name) + \";\\n\" + i0 + \"}(\") );\n  \t\t\t\tcode.move( this.superClass.start, this.superClass.end, this.end );\n  \t\t\t\tcode.insertRight( this.end, (\"));\" + syntheticDefaultExport) );\n  \t\t\t} else if ( syntheticDefaultExport ) {\n  \t\t\t\tcode.insertRight( this.end, syntheticDefaultExport );\n  \t\t\t}\n  \t\t}\n\n  \t\telse {\n  \t\t\tthis.body.transpile( code, transforms, false, null );\n  \t\t}\n  \t};\n\n  \treturn ClassDeclaration;\n  }(Node));\n\n  var ClassExpression = (function (Node) {\n  \tfunction ClassExpression () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) ClassExpression.__proto__ = Node;\n  \tClassExpression.prototype = Object.create( Node && Node.prototype );\n  \tClassExpression.prototype.constructor = ClassExpression;\n\n  \tClassExpression.prototype.initialise = function initialise ( transforms ) {\n  \t\tthis.name = this.id ? this.id.name :\n  \t\t            this.parent.type === 'VariableDeclarator' ? this.parent.id.name :\n  \t\t            this.parent.type === 'AssignmentExpression' ? this.parent.left.name :\n  \t\t            this.findScope( true ).createIdentifier( 'anonymous' );\n\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \tClassExpression.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( transforms.classes ) {\n  \t\t\tvar superName = this.superClass && ( this.superClass.name || 'superclass' );\n\n  \t\t\tvar i0 = this.getIndentation();\n  \t\t\tvar i1 = i0 + code.getIndentString();\n\n  \t\t\tif ( this.superClass ) {\n  \t\t\t\tcode.remove( this.start, this.superClass.start );\n  \t\t\t\tcode.remove( this.superClass.end, this.body.start );\n  \t\t\t\tcode.insertLeft( this.start, (\"(function (\" + superName + \") {\\n\" + i1) );\n  \t\t\t} else {\n  \t\t\t\tcode.overwrite( this.start, this.body.start, (\"(function () {\\n\" + i1) );\n  \t\t\t}\n\n  \t\t\tthis.body.transpile( code, transforms, true, superName );\n\n  \t\t\tvar outro = \"\\n\\n\" + i1 + \"return \" + (this.name) + \";\\n\" + i0 + \"}(\";\n\n  \t\t\tif ( this.superClass ) {\n  \t\t\t\tcode.insertLeft( this.end, outro );\n  \t\t\t\tcode.move( this.superClass.start, this.superClass.end, this.end );\n  \t\t\t\tcode.insertRight( this.end, '))' );\n  \t\t\t} else {\n  \t\t\t\tcode.insertLeft( this.end, (\"\\n\\n\" + i1 + \"return \" + (this.name) + \";\\n\" + i0 + \"}())\") );\n  \t\t\t}\n  \t\t}\n\n  \t\telse {\n  \t\t\tthis.body.transpile( code, transforms, false );\n  \t\t}\n  \t};\n\n  \treturn ClassExpression;\n  }(Node));\n\n  var ContinueStatement = (function (Node) {\n  \tfunction ContinueStatement () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) ContinueStatement.__proto__ = Node;\n  \tContinueStatement.prototype = Object.create( Node && Node.prototype );\n  \tContinueStatement.prototype.constructor = ContinueStatement;\n\n  \tContinueStatement.prototype.transpile = function transpile ( code ) {\n  \t\tvar loop = this.findNearest( loopStatement );\n  \t\tif ( loop.shouldRewriteAsFunction ) {\n  \t\t\tif ( this.label ) throw new CompileError( this, 'Labels are not currently supported in a loop with locally-scoped variables' );\n  \t\t\tcode.overwrite( this.start, this.start + 8, 'return' );\n  \t\t}\n  \t};\n\n  \treturn ContinueStatement;\n  }(Node));\n\n  var ExportDefaultDeclaration = (function (Node) {\n  \tfunction ExportDefaultDeclaration () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) ExportDefaultDeclaration.__proto__ = Node;\n  \tExportDefaultDeclaration.prototype = Object.create( Node && Node.prototype );\n  \tExportDefaultDeclaration.prototype.constructor = ExportDefaultDeclaration;\n\n  \tExportDefaultDeclaration.prototype.initialise = function initialise ( transforms ) {\n  \t\tif ( transforms.moduleExport ) throw new CompileError( this, 'export is not supported' );\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \treturn ExportDefaultDeclaration;\n  }(Node));\n\n  var ExportNamedDeclaration = (function (Node) {\n  \tfunction ExportNamedDeclaration () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) ExportNamedDeclaration.__proto__ = Node;\n  \tExportNamedDeclaration.prototype = Object.create( Node && Node.prototype );\n  \tExportNamedDeclaration.prototype.constructor = ExportNamedDeclaration;\n\n  \tExportNamedDeclaration.prototype.initialise = function initialise ( transforms ) {\n  \t\tif ( transforms.moduleExport ) throw new CompileError( this, 'export is not supported' );\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \treturn ExportNamedDeclaration;\n  }(Node));\n\n  var LoopStatement = (function (Node) {\n  \tfunction LoopStatement () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) LoopStatement.__proto__ = Node;\n  \tLoopStatement.prototype = Object.create( Node && Node.prototype );\n  \tLoopStatement.prototype.constructor = LoopStatement;\n\n  \tLoopStatement.prototype.findScope = function findScope ( functionScope ) {\n  \t\treturn functionScope || !this.createdScope ? this.parent.findScope( functionScope ) : this.body.scope;\n  \t};\n\n  \tLoopStatement.prototype.initialise = function initialise ( transforms ) {\n  \t\tvar this$1 = this;\n\n  \t\tthis.body.createScope();\n  \t\tthis.createdScope = true;\n\n  \t\t// this is populated as and when reassignments occur\n  \t\tthis.reassigned = Object.create( null );\n  \t\tthis.aliases = Object.create( null );\n\n  \t\tNode.prototype.initialise.call( this, transforms );\n\n  \t\tif ( transforms.letConst ) {\n  \t\t\t// see if any block-scoped declarations are referenced\n  \t\t\t// inside function expressions\n  \t\t\tvar names = Object.keys( this.body.scope.declarations );\n\n  \t\t\tvar i = names.length;\n  \t\t\twhile ( i-- ) {\n  \t\t\t\tvar name = names[i];\n  \t\t\t\tvar declaration = this$1.body.scope.declarations[ name ];\n\n  \t\t\t\tvar j = declaration.instances.length;\n  \t\t\t\twhile ( j-- ) {\n  \t\t\t\t\tvar instance = declaration.instances[j];\n  \t\t\t\t\tvar nearestFunctionExpression = instance.findNearest( /Function/ );\n\n  \t\t\t\t\tif ( nearestFunctionExpression && nearestFunctionExpression.depth > this$1.depth ) {\n  \t\t\t\t\t\tthis$1.shouldRewriteAsFunction = true;\n  \t\t\t\t\t\tbreak;\n  \t\t\t\t\t}\n  \t\t\t\t}\n\n  \t\t\t\tif ( this$1.shouldRewriteAsFunction ) break;\n  \t\t\t}\n  \t\t}\n  \t};\n\n  \tLoopStatement.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tvar needsBlock = this.type != 'ForOfStatement' && (\n  \t\t\tthis.body.type !== 'BlockStatement'\n  \t\t\t|| this.body.type === 'BlockStatement' && this.body.synthetic );\n\n  \t\tif ( this.shouldRewriteAsFunction ) {\n  \t\t\tvar i0 = this.getIndentation();\n  \t\t\tvar i1 = i0 + code.getIndentString();\n\n  \t\t\tvar argString = this.args ? (\" \" + (this.args.join( ', ' )) + \" \") : '';\n  \t\t\tvar paramString = this.params ? (\" \" + (this.params.join( ', ' )) + \" \") : '';\n\n  \t\t\tvar functionScope = this.findScope( true );\n  \t\t\tvar loop = functionScope.createIdentifier( 'loop' );\n\n  \t\t\tvar before = \"var \" + loop + \" = function (\" + paramString + \") \" + ( this.body.synthetic ? (\"{\\n\" + i0 + (code.getIndentString())) : '' );\n  \t\t\tvar after = ( this.body.synthetic ? (\"\\n\" + i0 + \"}\") : '' ) + \";\\n\\n\" + i0;\n\n  \t\t\tcode.insertRight( this.body.start, before );\n  \t\t\tcode.insertLeft( this.body.end, after );\n  \t\t\tcode.move( this.start, this.body.start, this.body.end );\n\n  \t\t\tif ( this.canBreak || this.canReturn ) {\n  \t\t\t\tvar returned = functionScope.createIdentifier( 'returned' );\n\n  \t\t\t\tvar insert = \"{\\n\" + i1 + \"var \" + returned + \" = \" + loop + \"(\" + argString + \");\\n\";\n  \t\t\t\tif ( this.canBreak ) insert += \"\\n\" + i1 + \"if ( \" + returned + \" === 'break' ) break;\";\n  \t\t\t\tif ( this.canReturn ) insert += \"\\n\" + i1 + \"if ( \" + returned + \" ) return \" + returned + \".v;\";\n  \t\t\t\tinsert += \"\\n\" + i0 + \"}\";\n\n  \t\t\t\tcode.insertRight( this.body.end, insert );\n  \t\t\t} else {\n  \t\t\t\tvar callExpression = loop + \"(\" + argString + \");\";\n\n  \t\t\t\tif ( this.type === 'DoWhileStatement' ) {\n  \t\t\t\t\tcode.overwrite( this.start, this.body.start, (\"do {\\n\" + i1 + callExpression + \"\\n\" + i0 + \"}\") );\n  \t\t\t\t} else {\n  \t\t\t\t\tcode.insertRight( this.body.end, callExpression );\n  \t\t\t\t}\n  \t\t\t}\n  \t\t} else if ( needsBlock ) {\n  \t\t\tcode.insertLeft( this.body.start, '{ ' );\n  \t\t\tcode.insertRight( this.body.end, ' }' );\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn LoopStatement;\n  }(Node));\n\n  function extractNames ( node ) {\n  \tvar names = [];\n  \textractors[ node.type ]( names, node );\n  \treturn names;\n  }\n\n  var extractors = {\n  \tIdentifier: function Identifier ( names, node ) {\n  \t\tnames.push( node );\n  \t},\n\n  \tObjectPattern: function ObjectPattern ( names, node ) {\n  \t\tfor ( var i = 0, list = node.properties; i < list.length; i += 1 ) {\n  \t\t\tvar prop = list[i];\n\n  \t\t\textractors[ prop.value.type ]( names, prop.value );\n  \t\t}\n  \t},\n\n  \tArrayPattern: function ArrayPattern ( names, node ) {\n  \t\tfor ( var i = 0, list = node.elements; i < list.length; i += 1 )  {\n  \t\t\tvar element = list[i];\n\n  \t\t\tif ( element ) extractors[ element.type ]( names, element );\n  \t\t}\n  \t},\n\n  \tRestElement: function RestElement ( names, node ) {\n  \t\textractors[ node.argument.type ]( names, node.argument );\n  \t},\n\n  \tAssignmentPattern: function AssignmentPattern ( names, node ) {\n  \t\textractors[ node.left.type ]( names, node.left );\n  \t}\n  };\n\n  var ForStatement = (function (LoopStatement) {\n  \tfunction ForStatement () {\n  \t\tLoopStatement.apply(this, arguments);\n  \t}\n\n  \tif ( LoopStatement ) ForStatement.__proto__ = LoopStatement;\n  \tForStatement.prototype = Object.create( LoopStatement && LoopStatement.prototype );\n  \tForStatement.prototype.constructor = ForStatement;\n\n  \tForStatement.prototype.findScope = function findScope ( functionScope ) {\n  \t\treturn functionScope || !this.createdScope ? this.parent.findScope( functionScope ) : this.body.scope;\n  \t};\n\n  \tForStatement.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tvar this$1 = this;\n\n  \t\tvar i1 = this.getIndentation() + code.getIndentString();\n\n  \t\tif ( this.shouldRewriteAsFunction ) {\n  \t\t\t// which variables are declared in the init statement?\n  \t\t\tvar names = this.init.type === 'VariableDeclaration' ?\n  \t\t\t\t[].concat.apply( [], this.init.declarations.map( function ( declarator ) { return extractNames( declarator.id ); } ) ) :\n  \t\t\t\t[];\n\n  \t\t\tvar aliases = this.aliases;\n\n  \t\t\tthis.args = names.map( function ( name ) { return name in this$1.aliases ? this$1.aliases[ name ].outer : name; } );\n  \t\t\tthis.params = names.map( function ( name ) { return name in this$1.aliases ? this$1.aliases[ name ].inner : name; } );\n\n  \t\t\tvar updates = Object.keys( this.reassigned )\n  \t\t\t\t.map( function ( name ) { return ((aliases[ name ].outer) + \" = \" + (aliases[ name ].inner) + \";\"); } );\n\n  \t\t\tif ( updates.length ) {\n  \t\t\t\tif ( this.body.synthetic ) {\n  \t\t\t\t\tcode.insertLeft( this.body.body[0].end, (\"; \" + (updates.join(\" \"))) );\n  \t\t\t\t} else {\n  \t\t\t\t\tvar lastStatement = this.body.body[ this.body.body.length - 1 ];\n  \t\t\t\t\tcode.insertLeft( lastStatement.end, (\"\\n\\n\" + i1 + (updates.join((\"\\n\" + i1)))) );\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n\n  \t\tLoopStatement.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn ForStatement;\n  }(LoopStatement));\n\n  var ForInStatement = (function (LoopStatement) {\n  \tfunction ForInStatement () {\n  \t\tLoopStatement.apply(this, arguments);\n  \t}\n\n  \tif ( LoopStatement ) ForInStatement.__proto__ = LoopStatement;\n  \tForInStatement.prototype = Object.create( LoopStatement && LoopStatement.prototype );\n  \tForInStatement.prototype.constructor = ForInStatement;\n\n  \tForInStatement.prototype.findScope = function findScope ( functionScope ) {\n  \t\treturn functionScope || !this.createdScope ? this.parent.findScope( functionScope ) : this.body.scope;\n  \t};\n\n  \tForInStatement.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tvar this$1 = this;\n\n  \t\tif ( this.shouldRewriteAsFunction ) {\n  \t\t\t// which variables are declared in the init statement?\n  \t\t\tvar names = this.left.type === 'VariableDeclaration' ?\n  \t\t\t\t[].concat.apply( [], this.left.declarations.map( function ( declarator ) { return extractNames( declarator.id ); } ) ) :\n  \t\t\t\t[];\n\n  \t\t\tthis.args = names.map( function ( name ) { return name in this$1.aliases ? this$1.aliases[ name ].outer : name; } );\n  \t\t\tthis.params = names.map( function ( name ) { return name in this$1.aliases ? this$1.aliases[ name ].inner : name; } );\n  \t\t}\n\n  \t\tLoopStatement.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn ForInStatement;\n  }(LoopStatement));\n\n  var handlers = {\n  \tIdentifier: destructureIdentifier,\n  \tAssignmentPattern: destructureAssignmentPattern,\n  \tArrayPattern: destructureArrayPattern,\n  \tObjectPattern: destructureObjectPattern\n  };\n\n  function destructure ( code, scope, node, ref, inline, statementGenerators ) {\n  \thandlers[ node.type ]( code, scope, node, ref, inline, statementGenerators );\n  }\n\n  function destructureIdentifier ( code, scope, node, ref, inline, statementGenerators ) {\n  \tstatementGenerators.push( function ( start, prefix, suffix ) {\n  \t\tcode.insertRight( node.start, inline ? prefix : (prefix + \"var \") );\n  \t\tcode.insertLeft( node.end, (\" = \" + ref + suffix) );\n  \t\tcode.move( node.start, node.end, start );\n  \t});\n  }\n\n  function destructureAssignmentPattern ( code, scope, node, ref, inline, statementGenerators ) {\n  \tvar isIdentifier = node.left.type === 'Identifier';\n  \tvar name = isIdentifier ? node.left.name : ref;\n\n  \tif ( !inline ) {\n  \t\tstatementGenerators.push( function ( start, prefix, suffix ) {\n  \t\t\tcode.insertRight( node.left.end, (prefix + \"if ( \" + name + \" === void 0 ) \" + name) );\n  \t\t\tcode.move( node.left.end, node.right.end, start );\n  \t\t\tcode.insertLeft( node.right.end, suffix );\n  \t\t});\n  \t}\n\n  \tif ( !isIdentifier ) {\n  \t\tdestructure( code, scope, node.left, ref, inline, statementGenerators );\n  \t}\n  }\n\n  function destructureArrayPattern ( code, scope, node, ref, inline, statementGenerators ) {\n  \tvar c = node.start;\n\n  \tnode.elements.forEach( function ( element, i ) {\n  \t\tif ( !element ) return;\n\n  \t\tif ( element.type === 'RestElement' ) {\n  \t\t\thandleProperty( code, scope, c, element.argument, (ref + \".slice(\" + i + \")\"), inline, statementGenerators );\n  \t\t} else {\n  \t\t\thandleProperty( code, scope, c, element, (ref + \"[\" + i + \"]\"), inline, statementGenerators );\n  \t\t}\n  \t\tc = element.end;\n  \t});\n\n  \tcode.remove( c, node.end );\n  }\n\n  function destructureObjectPattern ( code, scope, node, ref, inline, statementGenerators ) {\n  \tvar c = node.start;\n\n  \tnode.properties.forEach( function ( prop ) {\n  \t\tvar value = prop.computed || prop.key.type !== 'Identifier' ? (ref + \"[\" + (code.slice(prop.key.start, prop.key.end)) + \"]\") : (ref + \".\" + (prop.key.name));\n  \t\thandleProperty( code, scope, c, prop.value, value, inline, statementGenerators );\n  \t\tc = prop.end;\n  \t});\n\n  \tcode.remove( c, node.end );\n  }\n\n  function handleProperty ( code, scope, c, node, value, inline, statementGenerators ) {\n  \tswitch ( node.type ) {\n  \t\tcase 'Identifier': {\n  \t\t\tcode.remove( c, node.start );\n  \t\t\tdestructureIdentifier( code, scope, node, value, inline, statementGenerators );\n  \t\t\tbreak;\n  \t\t}\n\n  \t\tcase 'AssignmentPattern': {\n  \t\t\tvar name;\n\n  \t\t\tvar isIdentifier = node.left.type === 'Identifier';\n\n  \t\t\tif ( isIdentifier ) {\n  \t\t\t\tname = node.left.name;\n  \t\t\t\tvar declaration = scope.findDeclaration( name );\n  \t\t\t\tif ( declaration ) name = declaration.name;\n  \t\t\t} else {\n  \t\t\t\tname = scope.createIdentifier( value );\n  \t\t\t}\n\n  \t\t\tstatementGenerators.push( function ( start, prefix, suffix ) {\n  \t\t\t\tif ( inline ) {\n  \t\t\t\t\tcode.insertRight( node.right.start, (name + \" = \" + value + \" === undefined ? \") );\n  \t\t\t\t\tcode.insertLeft( node.right.end, (\" : \" + value) );\n  \t\t\t\t} else {\n  \t\t\t\t\tcode.insertRight( node.right.start, (prefix + \"var \" + name + \" = \" + value + \"; if ( \" + name + \" === void 0 ) \" + name + \" = \") );\n  \t\t\t\t\tcode.insertLeft( node.right.end, suffix );\n  \t\t\t\t}\n\n  \t\t\t\tcode.move( node.right.start, node.right.end, start );\n  \t\t\t});\n\n  \t\t\tif ( isIdentifier ) {\n  \t\t\t\tcode.remove( c, node.right.start );\n  \t\t\t} else {\n  \t\t\t\tcode.remove( c, node.left.start );\n  \t\t\t\tcode.remove( node.left.end, node.right.start );\n  \t\t\t\thandleProperty( code, scope, c, node.left, name, inline, statementGenerators );\n  \t\t\t}\n\n  \t\t\tbreak;\n  \t\t}\n\n  \t\tcase 'ObjectPattern': {\n  \t\t\tcode.remove( c, c = node.start );\n\n  \t\t\tif ( node.properties.length > 1 ) {\n  \t\t\t\tvar ref = scope.createIdentifier( value );\n\n  \t\t\t\tstatementGenerators.push( function ( start, prefix, suffix ) {\n  \t\t\t\t\t// this feels a tiny bit hacky, but we can't do a\n  \t\t\t\t\t// straightforward insertLeft and keep correct order...\n  \t\t\t\t\tcode.insertRight( node.start, (prefix + \"var \" + ref + \" = \") );\n  \t\t\t\t\tcode.overwrite( node.start, c = node.start + 1, value );\n  \t\t\t\t\tcode.insertLeft( c, suffix );\n\n  \t\t\t\t\tcode.move( node.start, c, start );\n  \t\t\t\t});\n\n  \t\t\t\tnode.properties.forEach( function ( prop ) {\n  \t\t\t\t\tvar value = prop.computed || prop.key.type !== 'Identifier' ? (ref + \"[\" + (code.slice(prop.key.start, prop.key.end)) + \"]\") : (ref + \".\" + (prop.key.name));\n  \t\t\t\t\thandleProperty( code, scope, c, prop.value, value, inline, statementGenerators );\n  \t\t\t\t\tc = prop.end;\n  \t\t\t\t});\n  \t\t\t} else {\n  \t\t\t\tvar prop = node.properties[0];\n  \t\t\t\tvar value_suffix = prop.computed || prop.key.type !== 'Identifier' ? (\"[\" + (code.slice(prop.key.start, prop.key.end)) + \"]\") : (\".\" + (prop.key.name));\n  \t\t\t\thandleProperty( code, scope, c, prop.value, (\"\" + value + value_suffix), inline, statementGenerators );\n  \t\t\t\tc = prop.end;\n  \t\t\t}\n\n  \t\t\tcode.remove( c, node.end );\n  \t\t\tbreak;\n  \t\t}\n\n  \t\tcase 'ArrayPattern': {\n  \t\t\tcode.remove( c, c = node.start );\n\n  \t\t\tif ( node.elements.filter( Boolean ).length > 1 ) {\n  \t\t\t\tvar ref$1 = scope.createIdentifier( value );\n\n  \t\t\t\tstatementGenerators.push( function ( start, prefix, suffix ) {\n  \t\t\t\t\tcode.insertRight( node.start, (prefix + \"var \" + ref$1 + \" = \") );\n  \t\t\t\t\tcode.overwrite( node.start, c = node.start + 1, value );\n  \t\t\t\t\tcode.insertLeft( c, suffix );\n\n  \t\t\t\t\tcode.move( node.start, c, start );\n  \t\t\t\t});\n\n  \t\t\t\tnode.elements.forEach( function ( element, i ) {\n  \t\t\t\t\tif ( !element ) return;\n\n  \t\t\t\t\tif ( element.type === 'RestElement' ) {\n  \t\t\t\t\t\thandleProperty( code, scope, c, element.argument, (ref$1 + \".slice(\" + i + \")\"), inline, statementGenerators );\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\thandleProperty( code, scope, c, element, (ref$1 + \"[\" + i + \"]\"), inline, statementGenerators );\n  \t\t\t\t\t}\n  \t\t\t\t\tc = element.end;\n  \t\t\t\t});\n  \t\t\t} else {\n  \t\t\t\tvar index = findIndex( node.elements, Boolean );\n  \t\t\t\tvar element = node.elements[ index ];\n  \t\t\t\tif ( element.type === 'RestElement' ) {\n  \t\t\t\t\thandleProperty( code, scope, c, element.argument, (value + \".slice(\" + index + \")\"), inline, statementGenerators );\n  \t\t\t\t} else {\n  \t\t\t\t\thandleProperty( code, scope, c, element, (value + \"[\" + index + \"]\"), inline, statementGenerators );\n  \t\t\t\t}\n  \t\t\t\tc = element.end;\n  \t\t\t}\n\n  \t\t\tcode.remove( c, node.end );\n  \t\t\tbreak;\n  \t\t}\n\n  \t\tdefault: {\n  \t\t\tthrow new Error( (\"Unexpected node type in destructuring (\" + (node.type) + \")\") );\n  \t\t}\n  \t}\n  }\n\n  var ForOfStatement = (function (LoopStatement) {\n  \tfunction ForOfStatement () {\n  \t\tLoopStatement.apply(this, arguments);\n  \t}\n\n  \tif ( LoopStatement ) ForOfStatement.__proto__ = LoopStatement;\n  \tForOfStatement.prototype = Object.create( LoopStatement && LoopStatement.prototype );\n  \tForOfStatement.prototype.constructor = ForOfStatement;\n\n  \tForOfStatement.prototype.initialise = function initialise ( transforms ) {\n  \t\tif ( transforms.forOf && !transforms.dangerousForOf ) throw new CompileError( this, 'for...of statements are not supported. Use `transforms: { forOf: false }` to skip transformation and disable this error, or `transforms: { dangerousForOf: true }` if you know what you\\'re doing' );\n  \t\tLoopStatement.prototype.initialise.call( this, transforms );\n  \t};\n\n  \tForOfStatement.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( !transforms.dangerousForOf ) {\n  \t\t\tLoopStatement.prototype.transpile.call( this, code, transforms );\n  \t\t\treturn;\n  \t\t}\n\n  \t\t// edge case (#80)\n  \t\tif ( !this.body.body[0] ) {\n  \t\t\tif ( this.left.type === 'VariableDeclaration' && this.left.kind === 'var' ) {\n  \t\t\t\tcode.remove( this.start, this.left.start );\n  \t\t\t\tcode.insertLeft( this.left.end, ';' );\n  \t\t\t\tcode.remove( this.left.end, this.end );\n  \t\t\t} else {\n  \t\t\t\tcode.remove( this.start, this.end );\n  \t\t\t}\n\n  \t\t\treturn;\n  \t\t}\n\n  \t\tvar scope = this.findScope( true );\n  \t\tvar i0 = this.getIndentation();\n  \t\tvar i1 = i0 + code.getIndentString();\n\n  \t\tvar key = scope.createIdentifier( 'i' );\n  \t\tvar list = scope.createIdentifier( 'list' );\n\n  \t\tif ( this.body.synthetic ) {\n  \t\t\tcode.insertRight( this.left.start, (\"{\\n\" + i1) );\n  \t\t\tcode.insertLeft( this.body.body[0].end, (\"\\n\" + i0 + \"}\") );\n  \t\t}\n\n  \t\tvar bodyStart = this.body.body[0].start;\n\n  \t\tcode.remove( this.left.end, this.right.start );\n  \t\tcode.move( this.left.start, this.left.end, bodyStart );\n\n\n  \t\tcode.insertRight( this.right.start, (\"var \" + key + \" = 0, \" + list + \" = \") );\n  \t\tcode.insertLeft( this.right.end, (\"; \" + key + \" < \" + list + \".length; \" + key + \" += 1\") );\n\n  \t\t// destructuring. TODO non declaration destructuring\n  \t\tvar declarator = this.left.type === 'VariableDeclaration' && this.left.declarations[0];\n  \t\tif ( declarator && declarator.id.type !== 'Identifier' ) {\n  \t\t\tvar statementGenerators = [];\n  \t\t\tvar ref = scope.createIdentifier( 'ref' );\n  \t\t\tdestructure( code, scope, declarator.id, ref, false, statementGenerators );\n\n  \t\t\tvar suffix = \";\\n\" + i1;\n  \t\t\tstatementGenerators.forEach( function ( fn, i ) {\n  \t\t\t\tif ( i === statementGenerators.length - 1 ) {\n  \t\t\t\t\tsuffix = \";\\n\\n\" + i1;\n  \t\t\t\t}\n\n  \t\t\t\tfn( bodyStart, '', suffix );\n  \t\t\t});\n\n  \t\t\tcode.insertLeft( this.left.start + this.left.kind.length + 1, ref );\n  \t\t\tcode.insertLeft( this.left.end, (\" = \" + list + \"[\" + key + \"];\\n\" + i1) );\n  \t\t} else {\n  \t\t\tcode.insertLeft( this.left.end, (\" = \" + list + \"[\" + key + \"];\\n\\n\" + i1) );\n  \t\t}\n\n  \t\tLoopStatement.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn ForOfStatement;\n  }(LoopStatement));\n\n  var FunctionDeclaration = (function (Node) {\n  \tfunction FunctionDeclaration () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) FunctionDeclaration.__proto__ = Node;\n  \tFunctionDeclaration.prototype = Object.create( Node && Node.prototype );\n  \tFunctionDeclaration.prototype.constructor = FunctionDeclaration;\n\n  \tFunctionDeclaration.prototype.initialise = function initialise ( transforms ) {\n  \t\tif ( this.generator && transforms.generator ) {\n  \t\t\tthrow new CompileError( this, 'Generators are not supported' );\n  \t\t}\n\n  \t\tthis.body.createScope();\n\n  \t\tthis.findScope( true ).addDeclaration( this.id, 'function' );\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \treturn FunctionDeclaration;\n  }(Node));\n\n  var FunctionExpression = (function (Node) {\n  \tfunction FunctionExpression () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) FunctionExpression.__proto__ = Node;\n  \tFunctionExpression.prototype = Object.create( Node && Node.prototype );\n  \tFunctionExpression.prototype.constructor = FunctionExpression;\n\n  \tFunctionExpression.prototype.initialise = function initialise ( transforms ) {\n  \t\tif ( this.generator && transforms.generator ) {\n  \t\t\tthrow new CompileError( this, 'Generators are not supported' );\n  \t\t}\n\n  \t\tthis.body.createScope();\n\n  \t\tif ( this.id ) {\n  \t\t\t// function expression IDs belong to the child scope...\n  \t\t\tthis.body.scope.addDeclaration( this.id, 'function' );\n  \t\t}\n\n  \t\tNode.prototype.initialise.call( this, transforms );\n\n  \t\tvar parent = this.parent;\n  \t\tvar methodName;\n\n  \t\tif ( transforms.conciseMethodProperty\n  \t\t\t\t&& parent.type === 'Property'\n  \t\t\t\t&& parent.kind === 'init'\n  \t\t\t\t&& parent.method\n  \t\t\t\t&& parent.key.type === 'Identifier' ) {\n  \t\t\t// object literal concise method\n  \t\t\tmethodName = parent.key.name;\n  \t\t}\n  \t\telse if ( transforms.classes\n  \t\t\t\t&& parent.type === 'MethodDefinition'\n  \t\t\t\t&& parent.kind === 'method'\n  \t\t\t\t&& parent.key.type === 'Identifier' ) {\n  \t\t\t// method definition in a class\n  \t\t\tmethodName = parent.key.name;\n  \t\t}\n  \t\telse if ( this.id && this.id.type === 'Identifier' ) {\n  \t\t\t// naked function expression\n  \t\t\tmethodName = this.id.alias || this.id.name;\n  \t\t}\n\n  \t\tif ( methodName ) {\n  \t\t\tfor ( var i = 0, list = this.params; i < list.length; i += 1 ) {\n  \t\t\t\tvar param = list[i];\n\n  \t\t\t\tif ( param.type === 'Identifier' && methodName === param.name ) {\n  \t\t\t\t\t// workaround for Safari 9/WebKit bug:\n  \t\t\t\t\t// https://gitlab.com/Rich-Harris/buble/issues/154\n  \t\t\t\t\t// change parameter name when same as method name\n\n  \t\t\t\t\tvar scope = this.body.scope;\n  \t\t\t\t\tvar declaration = scope.declarations[ methodName ];\n\n  \t\t\t\t\tvar alias = scope.createIdentifier( methodName );\n  \t\t\t\t\tparam.alias = alias;\n\n  \t\t\t\t\tfor ( var i$1 = 0, list$1 = declaration.instances; i$1 < list$1.length; i$1 += 1 ) {\n  \t\t\t\t\t\tvar identifier = list$1[i$1];\n\n  \t\t\t\t\t\tidentifier.alias = alias;\n  \t\t\t\t\t}\n\n  \t\t\t\t\tbreak;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t};\n\n  \treturn FunctionExpression;\n  }(Node));\n\n  function isReference ( node, parent ) {\n  \tif ( node.type === 'MemberExpression' ) {\n  \t\treturn !node.computed && isReference( node.object, node );\n  \t}\n\n  \tif ( node.type === 'Identifier' ) {\n  \t\t// the only time we could have an identifier node without a parent is\n  \t\t// if it's the entire body of a function without a block statement –\n  \t\t// i.e. an arrow function expression like `a => a`\n  \t\tif ( !parent ) return true;\n\n  \t\tif ( /(Function|Class)Expression/.test( parent.type ) ) return false;\n\n  \t\tif ( parent.type === 'VariableDeclarator' ) return node === parent.init;\n\n  \t\t// TODO is this right?\n  \t\tif ( parent.type === 'MemberExpression' || parent.type === 'MethodDefinition' ) {\n  \t\t\treturn parent.computed || node === parent.object;\n  \t\t}\n\n  \t\tif ( parent.type === 'ArrayPattern' ) return false;\n\n  \t\t// disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n  \t\tif ( parent.type === 'Property' ) {\n  \t\t\tif ( parent.parent.type === 'ObjectPattern' ) return false;\n  \t\t\treturn parent.computed || node === parent.value;\n  \t\t}\n\n  \t\t// disregard the `bar` in `class Foo { bar () {...} }`\n  \t\tif ( parent.type === 'MethodDefinition' ) return false;\n\n  \t\t// disregard the `bar` in `export { foo as bar }`\n  \t\tif ( parent.type === 'ExportSpecifier' && node !== parent.local ) return false;\n\n  \t\treturn true;\n  \t}\n  }\n\n  var Identifier = (function (Node) {\n  \tfunction Identifier () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) Identifier.__proto__ = Node;\n  \tIdentifier.prototype = Object.create( Node && Node.prototype );\n  \tIdentifier.prototype.constructor = Identifier;\n\n  \tIdentifier.prototype.findScope = function findScope ( functionScope ) {\n  \t\tif ( this.parent.params && ~this.parent.params.indexOf( this ) ) {\n  \t\t\treturn this.parent.body.scope;\n  \t\t}\n\n  \t\tif ( this.parent.type === 'FunctionExpression' && this === this.parent.id ) {\n  \t\t\treturn this.parent.body.scope;\n  \t\t}\n\n  \t\treturn this.parent.findScope( functionScope\t);\n  \t};\n\n  \tIdentifier.prototype.initialise = function initialise ( transforms ) {\n  \t\tif ( transforms.arrow && isReference( this, this.parent ) ) {\n  \t\t\tif ( this.name === 'arguments' && !this.findScope( false ).contains( this.name ) ) {\n  \t\t\t\tvar lexicalBoundary = this.findLexicalBoundary();\n  \t\t\t\tvar arrowFunction = this.findNearest( 'ArrowFunctionExpression' );\n  \t\t\t\tvar loop = this.findNearest( loopStatement );\n\n  \t\t\t\tif ( arrowFunction && arrowFunction.depth > lexicalBoundary.depth ) {\n  \t\t\t\t\tthis.alias = lexicalBoundary.getArgumentsAlias();\n  \t\t\t\t}\n\n  \t\t\t\tif ( loop && loop.body.contains( this ) && loop.depth > lexicalBoundary.depth ) {\n  \t\t\t\t\tthis.alias = lexicalBoundary.getArgumentsAlias();\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\tthis.findScope( false ).addReference( this );\n  \t\t}\n  \t};\n\n  \tIdentifier.prototype.transpile = function transpile ( code ) {\n  \t\tif ( this.alias ) {\n  \t\t\tcode.overwrite( this.start, this.end, this.alias, true );\n  \t\t}\n  \t};\n\n  \treturn Identifier;\n  }(Node));\n\n  var IfStatement = (function (Node) {\n  \tfunction IfStatement () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) IfStatement.__proto__ = Node;\n  \tIfStatement.prototype = Object.create( Node && Node.prototype );\n  \tIfStatement.prototype.constructor = IfStatement;\n\n  \tIfStatement.prototype.initialise = function initialise ( transforms ) {\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \tIfStatement.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( this.consequent.type !== 'BlockStatement'\n  \t\t\t\t|| this.consequent.type === 'BlockStatement' && this.consequent.synthetic ) {\n  \t\t\tcode.insertLeft( this.consequent.start, '{ ' );\n  \t\t\tcode.insertRight( this.consequent.end, ' }' );\n  \t\t}\n\n  \t\tif ( this.alternate && this.alternate.type !== 'IfStatement' && (\n  \t\t\t\tthis.alternate.type !== 'BlockStatement'\n  \t\t\t\t|| this.alternate.type === 'BlockStatement' && this.alternate.synthetic ) ) {\n  \t\t\tcode.insertLeft( this.alternate.start, '{ ' );\n  \t\t\tcode.insertRight( this.alternate.end, ' }' );\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn IfStatement;\n  }(Node));\n\n  var ImportDeclaration = (function (Node) {\n  \tfunction ImportDeclaration () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) ImportDeclaration.__proto__ = Node;\n  \tImportDeclaration.prototype = Object.create( Node && Node.prototype );\n  \tImportDeclaration.prototype.constructor = ImportDeclaration;\n\n  \tImportDeclaration.prototype.initialise = function initialise ( transforms ) {\n  \t\tif ( transforms.moduleImport ) throw new CompileError( this, 'import is not supported' );\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \treturn ImportDeclaration;\n  }(Node));\n\n  var ImportDefaultSpecifier = (function (Node) {\n  \tfunction ImportDefaultSpecifier () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) ImportDefaultSpecifier.__proto__ = Node;\n  \tImportDefaultSpecifier.prototype = Object.create( Node && Node.prototype );\n  \tImportDefaultSpecifier.prototype.constructor = ImportDefaultSpecifier;\n\n  \tImportDefaultSpecifier.prototype.initialise = function initialise ( transforms ) {\n  \t\tthis.findScope( true ).addDeclaration( this.local, 'import' );\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \treturn ImportDefaultSpecifier;\n  }(Node));\n\n  var ImportSpecifier = (function (Node) {\n  \tfunction ImportSpecifier () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) ImportSpecifier.__proto__ = Node;\n  \tImportSpecifier.prototype = Object.create( Node && Node.prototype );\n  \tImportSpecifier.prototype.constructor = ImportSpecifier;\n\n  \tImportSpecifier.prototype.initialise = function initialise ( transforms ) {\n  \t\tthis.findScope( true ).addDeclaration( this.local, 'import' );\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \treturn ImportSpecifier;\n  }(Node));\n\n  var IS_DATA_ATTRIBUTE = /-/;\n\n  var JSXAttribute = (function (Node) {\n  \tfunction JSXAttribute () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) JSXAttribute.__proto__ = Node;\n  \tJSXAttribute.prototype = Object.create( Node && Node.prototype );\n  \tJSXAttribute.prototype.constructor = JSXAttribute;\n\n  \tJSXAttribute.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( this.value ) {\n  \t\t\tcode.overwrite( this.name.end, this.value.start, ': ' );\n  \t\t} else {\n  \t\t\t// tag without value\n  \t\t\tcode.overwrite( this.name.start, this.name.end, ((this.name.name) + \": true\") );\n  \t\t}\n\n  \t\tif ( IS_DATA_ATTRIBUTE.test( this.name.name ) ) {\n  \t\t\tcode.overwrite( this.name.start, this.name.end, (\"'\" + (this.name.name) + \"'\") );\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn JSXAttribute;\n  }(Node));\n\n  function containsNewLine ( node ) {\n  \treturn node.type === 'Literal' && !/\\S/.test( node.value ) && /\\n/.test( node.value );\n  }\n\n  var JSXClosingElement = (function (Node) {\n  \tfunction JSXClosingElement () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) JSXClosingElement.__proto__ = Node;\n  \tJSXClosingElement.prototype = Object.create( Node && Node.prototype );\n  \tJSXClosingElement.prototype.constructor = JSXClosingElement;\n\n  \tJSXClosingElement.prototype.transpile = function transpile ( code ) {\n  \t\tvar spaceBeforeParen = true;\n\n  \t\tvar lastChild = this.parent.children[ this.parent.children.length - 1 ];\n\n  \t\t// omit space before closing paren if\n  \t\t//   a) this is on a separate line, or\n  \t\t//   b) there are no children but there are attributes\n  \t\tif ( ( lastChild && containsNewLine( lastChild ) ) || ( this.parent.openingElement.attributes.length ) ) {\n  \t\t\tspaceBeforeParen = false;\n  \t\t}\n\n  \t\tcode.overwrite( this.start, this.end, spaceBeforeParen ? ' )' : ')' );\n  \t};\n\n  \treturn JSXClosingElement;\n  }(Node));\n\n  function normalise ( str, removeTrailingWhitespace ) {\n  \tif ( removeTrailingWhitespace && /\\n/.test( str ) ) {\n  \t\tstr = str.replace( /\\s+$/, '' );\n  \t}\n\n  \tstr = str\n  \t\t.replace( /^\\n\\r?\\s+/, '' )       // remove leading newline + space\n  \t\t.replace( /\\s*\\n\\r?\\s*/gm, ' ' ); // replace newlines with spaces\n\n  \t// TODO prefer single quotes?\n  \treturn JSON.stringify( str );\n  }\n\n  var JSXElement = (function (Node) {\n  \tfunction JSXElement () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) JSXElement.__proto__ = Node;\n  \tJSXElement.prototype = Object.create( Node && Node.prototype );\n  \tJSXElement.prototype.constructor = JSXElement;\n\n  \tJSXElement.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n\n  \t\tvar children = this.children.filter( function ( child ) {\n  \t\t\tif ( child.type !== 'Literal' ) return true;\n\n  \t\t\t// remove whitespace-only literals, unless on a single line\n  \t\t\treturn /\\S/.test( child.value ) || !/\\n/.test( child.value );\n  \t\t});\n\n  \t\tif ( children.length ) {\n  \t\t\tvar c = this.openingElement.end;\n\n  \t\t\tvar i;\n  \t\t\tfor ( i = 0; i < children.length; i += 1 ) {\n  \t\t\t\tvar child = children[i];\n\n  \t\t\t\tif ( child.type === 'JSXExpressionContainer' && child.expression.type === 'JSXEmptyExpression' ) {\n  \t\t\t\t\t// empty block is a no op\n  \t\t\t\t} else {\n  \t\t\t\t\tvar tail = code.original[ c ] === '\\n' && child.type !== 'Literal' ? '' : ' ';\n  \t\t\t\t\tcode.insertLeft( c, (\",\" + tail) );\n  \t\t\t\t}\n\n  \t\t\t\tif ( child.type === 'Literal' ) {\n  \t\t\t\t\tvar str = normalise( child.value, i === children.length - 1 );\n  \t\t\t\t\tcode.overwrite( child.start, child.end, str );\n  \t\t\t\t}\n\n  \t\t\t\tc = child.end;\n  \t\t\t}\n  \t\t}\n  \t};\n\n  \treturn JSXElement;\n  }(Node));\n\n  var JSXExpressionContainer = (function (Node) {\n  \tfunction JSXExpressionContainer () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) JSXExpressionContainer.__proto__ = Node;\n  \tJSXExpressionContainer.prototype = Object.create( Node && Node.prototype );\n  \tJSXExpressionContainer.prototype.constructor = JSXExpressionContainer;\n\n  \tJSXExpressionContainer.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tcode.remove( this.start, this.expression.start );\n  \t\tcode.remove( this.expression.end, this.end );\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn JSXExpressionContainer;\n  }(Node));\n\n  var JSXOpeningElement = (function (Node) {\n  \tfunction JSXOpeningElement () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) JSXOpeningElement.__proto__ = Node;\n  \tJSXOpeningElement.prototype = Object.create( Node && Node.prototype );\n  \tJSXOpeningElement.prototype.constructor = JSXOpeningElement;\n\n  \tJSXOpeningElement.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tvar this$1 = this;\n\n  \t\tcode.overwrite( this.start, this.name.start, ((this.program.jsx) + \"( \") );\n\n  \t\tvar html = this.name.type === 'JSXIdentifier' && this.name.name[0] === this.name.name[0].toLowerCase();\n  \t\tif ( html ) code.insertRight( this.name.start, \"'\" );\n\n  \t\tvar len = this.attributes.length;\n  \t\tvar c = this.name.end;\n\n  \t\tif ( len ) {\n  \t\t\tvar i;\n\n  \t\t\tvar hasSpread = false;\n  \t\t\tfor ( i = 0; i < len; i += 1 ) {\n  \t\t\t\tif ( this$1.attributes[i].type === 'JSXSpreadAttribute' ) {\n  \t\t\t\t\thasSpread = true;\n  \t\t\t\t\tbreak;\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\tc = this.attributes[0].end;\n\n  \t\t\tfor ( i = 0; i < len; i += 1 ) {\n  \t\t\t\tvar attr = this$1.attributes[i];\n\n  \t\t\t\tif ( i > 0 ) {\n  \t\t\t\t\tcode.overwrite( c, attr.start, ', ' );\n  \t\t\t\t}\n\n  \t\t\t\tif ( hasSpread && attr.type !== 'JSXSpreadAttribute' ) {\n  \t\t\t\t\tvar lastAttr = this$1.attributes[ i - 1 ];\n  \t\t\t\t\tvar nextAttr = this$1.attributes[ i + 1 ];\n\n  \t\t\t\t\tif ( !lastAttr || lastAttr.type === 'JSXSpreadAttribute' ) {\n  \t\t\t\t\t\tcode.insertRight( attr.start, '{ ' );\n  \t\t\t\t\t}\n\n  \t\t\t\t\tif ( !nextAttr || nextAttr.type === 'JSXSpreadAttribute' ) {\n  \t\t\t\t\t\tcode.insertLeft( attr.end, ' }' );\n  \t\t\t\t\t}\n  \t\t\t\t}\n\n  \t\t\t\tc = attr.end;\n  \t\t\t}\n\n  \t\t\tvar after;\n  \t\t\tvar before;\n  \t\t\tif ( hasSpread ) {\n  \t\t\t\tif ( len === 1 ) {\n  \t\t\t\t\tbefore = html ? \"',\" : ',';\n  \t\t\t\t} else {\n  \t\t\t\t\tif (!this.program.options.objectAssign) {\n  \t\t\t\t\t\tthrow new CompileError( this, 'Mixed JSX attributes ending in spread requires specified objectAssign option with \\'Object.assign\\' or polyfill helper.' );\n  \t\t\t\t\t}\n  \t\t\t\t\tbefore = html ? (\"', \" + (this.program.options.objectAssign) + \"({},\") : (\", \" + (this.program.options.objectAssign) + \"({},\");\n  \t\t\t\t\tafter = ')';\n  \t\t\t\t}\n  \t\t\t} else {\n  \t\t\t\tbefore = html ? \"', {\" : ', {';\n  \t\t\t\tafter = ' }';\n  \t\t\t}\n\n  \t\t\tcode.insertRight( this.name.end, before );\n\n  \t\t\tif ( after ) {\n  \t\t\t\tcode.insertLeft( this.attributes[ len - 1 ].end, after );\n  \t\t\t}\n  \t\t} else {\n  \t\t\tcode.insertLeft( this.name.end, html ? \"', null\" : \", null\" );\n  \t\t\tc = this.name.end;\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n\n  \t\tif ( this.selfClosing ) {\n  \t\t\tcode.overwrite( c, this.end, this.attributes.length ? \")\" : \" )\" );\n  \t\t} else {\n  \t\t\tcode.remove( c, this.end );\n  \t\t}\n  \t};\n\n  \treturn JSXOpeningElement;\n  }(Node));\n\n  var JSXSpreadAttribute = (function (Node) {\n  \tfunction JSXSpreadAttribute () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) JSXSpreadAttribute.__proto__ = Node;\n  \tJSXSpreadAttribute.prototype = Object.create( Node && Node.prototype );\n  \tJSXSpreadAttribute.prototype.constructor = JSXSpreadAttribute;\n\n  \tJSXSpreadAttribute.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tcode.remove( this.start, this.argument.start );\n  \t\tcode.remove( this.argument.end, this.end );\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn JSXSpreadAttribute;\n  }(Node));\n\n  var regenerate = __commonjs(function (module, exports, global) {\n  /*! https://mths.be/regenerate v1.3.1 by @mathias | MIT license */\n  ;(function(root) {\n\n  \t// Detect free variables `exports`.\n  \tvar freeExports = typeof exports == 'object' && exports;\n\n  \t// Detect free variable `module`.\n  \tvar freeModule = typeof module == 'object' && module &&\n  \t\tmodule.exports == freeExports && module;\n\n  \t// Detect free variable `global`, from Node.js/io.js or Browserified code,\n  \t// and use it as `root`.\n  \tvar freeGlobal = typeof global == 'object' && global;\n  \tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n  \t\troot = freeGlobal;\n  \t}\n\n  \t/*--------------------------------------------------------------------------*/\n\n  \tvar ERRORS = {\n  \t\t'rangeOrder': 'A range\\u2019s `stop` value must be greater than or equal ' +\n  \t\t\t'to the `start` value.',\n  \t\t'codePointRange': 'Invalid code point value. Code points range from ' +\n  \t\t\t'U+000000 to U+10FFFF.'\n  \t};\n\n  \t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-pairs\n  \tvar HIGH_SURROGATE_MIN = 0xD800;\n  \tvar HIGH_SURROGATE_MAX = 0xDBFF;\n  \tvar LOW_SURROGATE_MIN = 0xDC00;\n  \tvar LOW_SURROGATE_MAX = 0xDFFF;\n\n  \t// In Regenerate output, `\\0` is never preceded by `\\` because we sort by\n  \t// code point value, so let’s keep this regular expression simple.\n  \tvar regexNull = /\\\\x00([^0123456789]|$)/g;\n\n  \tvar object = {};\n  \tvar hasOwnProperty = object.hasOwnProperty;\n  \tvar extend = function(destination, source) {\n  \t\tvar key;\n  \t\tfor (key in source) {\n  \t\t\tif (hasOwnProperty.call(source, key)) {\n  \t\t\t\tdestination[key] = source[key];\n  \t\t\t}\n  \t\t}\n  \t\treturn destination;\n  \t};\n\n  \tvar forEach = function(array, callback) {\n  \t\tvar index = -1;\n  \t\tvar length = array.length;\n  \t\twhile (++index < length) {\n  \t\t\tcallback(array[index], index);\n  \t\t}\n  \t};\n\n  \tvar toString = object.toString;\n  \tvar isArray = function(value) {\n  \t\treturn toString.call(value) == '[object Array]';\n  \t};\n  \tvar isNumber = function(value) {\n  \t\treturn typeof value == 'number' ||\n  \t\t\ttoString.call(value) == '[object Number]';\n  \t};\n\n  \t// This assumes that `number` is a positive integer that `toString()`s nicely\n  \t// (which is the case for all code point values).\n  \tvar zeroes = '0000';\n  \tvar pad = function(number, totalCharacters) {\n  \t\tvar string = String(number);\n  \t\treturn string.length < totalCharacters\n  \t\t\t? (zeroes + string).slice(-totalCharacters)\n  \t\t\t: string;\n  \t};\n\n  \tvar hex = function(number) {\n  \t\treturn Number(number).toString(16).toUpperCase();\n  \t};\n\n  \tvar slice = [].slice;\n\n  \t/*--------------------------------------------------------------------------*/\n\n  \tvar dataFromCodePoints = function(codePoints) {\n  \t\tvar index = -1;\n  \t\tvar length = codePoints.length;\n  \t\tvar max = length - 1;\n  \t\tvar result = [];\n  \t\tvar isStart = true;\n  \t\tvar tmp;\n  \t\tvar previous = 0;\n  \t\twhile (++index < length) {\n  \t\t\ttmp = codePoints[index];\n  \t\t\tif (isStart) {\n  \t\t\t\tresult.push(tmp);\n  \t\t\t\tprevious = tmp;\n  \t\t\t\tisStart = false;\n  \t\t\t} else {\n  \t\t\t\tif (tmp == previous + 1) {\n  \t\t\t\t\tif (index != max) {\n  \t\t\t\t\t\tprevious = tmp;\n  \t\t\t\t\t\tcontinue;\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tisStart = true;\n  \t\t\t\t\t\tresult.push(tmp + 1);\n  \t\t\t\t\t}\n  \t\t\t\t} else {\n  \t\t\t\t\t// End the previous range and start a new one.\n  \t\t\t\t\tresult.push(previous + 1, tmp);\n  \t\t\t\t\tprevious = tmp;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t\tif (!isStart) {\n  \t\t\tresult.push(tmp + 1);\n  \t\t}\n  \t\treturn result;\n  \t};\n\n  \tvar dataRemove = function(data, codePoint) {\n  \t\t// Iterate over the data per `(start, end)` pair.\n  \t\tvar index = 0;\n  \t\tvar start;\n  \t\tvar end;\n  \t\tvar length = data.length;\n  \t\twhile (index < length) {\n  \t\t\tstart = data[index];\n  \t\t\tend = data[index + 1];\n  \t\t\tif (codePoint >= start && codePoint < end) {\n  \t\t\t\t// Modify this pair.\n  \t\t\t\tif (codePoint == start) {\n  \t\t\t\t\tif (end == start + 1) {\n  \t\t\t\t\t\t// Just remove `start` and `end`.\n  \t\t\t\t\t\tdata.splice(index, 2);\n  \t\t\t\t\t\treturn data;\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\t// Just replace `start` with a new value.\n  \t\t\t\t\t\tdata[index] = codePoint + 1;\n  \t\t\t\t\t\treturn data;\n  \t\t\t\t\t}\n  \t\t\t\t} else if (codePoint == end - 1) {\n  \t\t\t\t\t// Just replace `end` with a new value.\n  \t\t\t\t\tdata[index + 1] = codePoint;\n  \t\t\t\t\treturn data;\n  \t\t\t\t} else {\n  \t\t\t\t\t// Replace `[start, end]` with `[startA, endA, startB, endB]`.\n  \t\t\t\t\tdata.splice(index, 2, start, codePoint, codePoint + 1, end);\n  \t\t\t\t\treturn data;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\tindex += 2;\n  \t\t}\n  \t\treturn data;\n  \t};\n\n  \tvar dataRemoveRange = function(data, rangeStart, rangeEnd) {\n  \t\tif (rangeEnd < rangeStart) {\n  \t\t\tthrow Error(ERRORS.rangeOrder);\n  \t\t}\n  \t\t// Iterate over the data per `(start, end)` pair.\n  \t\tvar index = 0;\n  \t\tvar start;\n  \t\tvar end;\n  \t\twhile (index < data.length) {\n  \t\t\tstart = data[index];\n  \t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n\n  \t\t\t// Exit as soon as no more matching pairs can be found.\n  \t\t\tif (start > rangeEnd) {\n  \t\t\t\treturn data;\n  \t\t\t}\n\n  \t\t\t// Check if this range pair is equal to, or forms a subset of, the range\n  \t\t\t// to be removed.\n  \t\t\t// E.g. we have `[0, 11, 40, 51]` and want to remove 0-10 → `[40, 51]`.\n  \t\t\t// E.g. we have `[40, 51]` and want to remove 0-100 → `[]`.\n  \t\t\tif (rangeStart <= start && rangeEnd >= end) {\n  \t\t\t\t// Remove this pair.\n  \t\t\t\tdata.splice(index, 2);\n  \t\t\t\tcontinue;\n  \t\t\t}\n\n  \t\t\t// Check if both `rangeStart` and `rangeEnd` are within the bounds of\n  \t\t\t// this pair.\n  \t\t\t// E.g. we have `[0, 11]` and want to remove 4-6 → `[0, 4, 7, 11]`.\n  \t\t\tif (rangeStart >= start && rangeEnd < end) {\n  \t\t\t\tif (rangeStart == start) {\n  \t\t\t\t\t// Replace `[start, end]` with `[startB, endB]`.\n  \t\t\t\t\tdata[index] = rangeEnd + 1;\n  \t\t\t\t\tdata[index + 1] = end + 1;\n  \t\t\t\t\treturn data;\n  \t\t\t\t}\n  \t\t\t\t// Replace `[start, end]` with `[startA, endA, startB, endB]`.\n  \t\t\t\tdata.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1);\n  \t\t\t\treturn data;\n  \t\t\t}\n\n  \t\t\t// Check if only `rangeStart` is within the bounds of this pair.\n  \t\t\t// E.g. we have `[0, 11]` and want to remove 4-20 → `[0, 4]`.\n  \t\t\tif (rangeStart >= start && rangeStart <= end) {\n  \t\t\t\t// Replace `end` with `rangeStart`.\n  \t\t\t\tdata[index + 1] = rangeStart;\n  \t\t\t\t// Note: we cannot `return` just yet, in case any following pairs still\n  \t\t\t\t// contain matching code points.\n  \t\t\t\t// E.g. we have `[0, 11, 14, 31]` and want to remove 4-20\n  \t\t\t\t// → `[0, 4, 21, 31]`.\n  \t\t\t}\n\n  \t\t\t// Check if only `rangeEnd` is within the bounds of this pair.\n  \t\t\t// E.g. we have `[14, 31]` and want to remove 4-20 → `[21, 31]`.\n  \t\t\telse if (rangeEnd >= start && rangeEnd <= end) {\n  \t\t\t\t// Just replace `start`.\n  \t\t\t\tdata[index] = rangeEnd + 1;\n  \t\t\t\treturn data;\n  \t\t\t}\n\n  \t\t\tindex += 2;\n  \t\t}\n  \t\treturn data;\n  \t};\n\n  \t var dataAdd = function(data, codePoint) {\n  \t\t// Iterate over the data per `(start, end)` pair.\n  \t\tvar index = 0;\n  \t\tvar start;\n  \t\tvar end;\n  \t\tvar lastIndex = null;\n  \t\tvar length = data.length;\n  \t\tif (codePoint < 0x0 || codePoint > 0x10FFFF) {\n  \t\t\tthrow RangeError(ERRORS.codePointRange);\n  \t\t}\n  \t\twhile (index < length) {\n  \t\t\tstart = data[index];\n  \t\t\tend = data[index + 1];\n\n  \t\t\t// Check if the code point is already in the set.\n  \t\t\tif (codePoint >= start && codePoint < end) {\n  \t\t\t\treturn data;\n  \t\t\t}\n\n  \t\t\tif (codePoint == start - 1) {\n  \t\t\t\t// Just replace `start` with a new value.\n  \t\t\t\tdata[index] = codePoint;\n  \t\t\t\treturn data;\n  \t\t\t}\n\n  \t\t\t// At this point, if `start` is `greater` than `codePoint`, insert a new\n  \t\t\t// `[start, end]` pair before the current pair, or after the current pair\n  \t\t\t// if there is a known `lastIndex`.\n  \t\t\tif (start > codePoint) {\n  \t\t\t\tdata.splice(\n  \t\t\t\t\tlastIndex != null ? lastIndex + 2 : 0,\n  \t\t\t\t\t0,\n  \t\t\t\t\tcodePoint,\n  \t\t\t\t\tcodePoint + 1\n  \t\t\t\t);\n  \t\t\t\treturn data;\n  \t\t\t}\n\n  \t\t\tif (codePoint == end) {\n  \t\t\t\t// Check if adding this code point causes two separate ranges to become\n  \t\t\t\t// a single range, e.g. `dataAdd([0, 4, 5, 10], 4)` → `[0, 10]`.\n  \t\t\t\tif (codePoint + 1 == data[index + 2]) {\n  \t\t\t\t\tdata.splice(index, 4, start, data[index + 3]);\n  \t\t\t\t\treturn data;\n  \t\t\t\t}\n  \t\t\t\t// Else, just replace `end` with a new value.\n  \t\t\t\tdata[index + 1] = codePoint + 1;\n  \t\t\t\treturn data;\n  \t\t\t}\n  \t\t\tlastIndex = index;\n  \t\t\tindex += 2;\n  \t\t}\n  \t\t// The loop has finished; add the new pair to the end of the data set.\n  \t\tdata.push(codePoint, codePoint + 1);\n  \t\treturn data;\n  \t};\n\n  \tvar dataAddData = function(dataA, dataB) {\n  \t\t// Iterate over the data per `(start, end)` pair.\n  \t\tvar index = 0;\n  \t\tvar start;\n  \t\tvar end;\n  \t\tvar data = dataA.slice();\n  \t\tvar length = dataB.length;\n  \t\twhile (index < length) {\n  \t\t\tstart = dataB[index];\n  \t\t\tend = dataB[index + 1] - 1;\n  \t\t\tif (start == end) {\n  \t\t\t\tdata = dataAdd(data, start);\n  \t\t\t} else {\n  \t\t\t\tdata = dataAddRange(data, start, end);\n  \t\t\t}\n  \t\t\tindex += 2;\n  \t\t}\n  \t\treturn data;\n  \t};\n\n  \tvar dataRemoveData = function(dataA, dataB) {\n  \t\t// Iterate over the data per `(start, end)` pair.\n  \t\tvar index = 0;\n  \t\tvar start;\n  \t\tvar end;\n  \t\tvar data = dataA.slice();\n  \t\tvar length = dataB.length;\n  \t\twhile (index < length) {\n  \t\t\tstart = dataB[index];\n  \t\t\tend = dataB[index + 1] - 1;\n  \t\t\tif (start == end) {\n  \t\t\t\tdata = dataRemove(data, start);\n  \t\t\t} else {\n  \t\t\t\tdata = dataRemoveRange(data, start, end);\n  \t\t\t}\n  \t\t\tindex += 2;\n  \t\t}\n  \t\treturn data;\n  \t};\n\n  \tvar dataAddRange = function(data, rangeStart, rangeEnd) {\n  \t\tif (rangeEnd < rangeStart) {\n  \t\t\tthrow Error(ERRORS.rangeOrder);\n  \t\t}\n  \t\tif (\n  \t\t\trangeStart < 0x0 || rangeStart > 0x10FFFF ||\n  \t\t\trangeEnd < 0x0 || rangeEnd > 0x10FFFF\n  \t\t) {\n  \t\t\tthrow RangeError(ERRORS.codePointRange);\n  \t\t}\n  \t\t// Iterate over the data per `(start, end)` pair.\n  \t\tvar index = 0;\n  \t\tvar start;\n  \t\tvar end;\n  \t\tvar added = false;\n  \t\tvar length = data.length;\n  \t\twhile (index < length) {\n  \t\t\tstart = data[index];\n  \t\t\tend = data[index + 1];\n\n  \t\t\tif (added) {\n  \t\t\t\t// The range has already been added to the set; at this point, we just\n  \t\t\t\t// need to get rid of the following ranges in case they overlap.\n\n  \t\t\t\t// Check if this range can be combined with the previous range.\n  \t\t\t\tif (start == rangeEnd + 1) {\n  \t\t\t\t\tdata.splice(index - 1, 2);\n  \t\t\t\t\treturn data;\n  \t\t\t\t}\n\n  \t\t\t\t// Exit as soon as no more possibly overlapping pairs can be found.\n  \t\t\t\tif (start > rangeEnd) {\n  \t\t\t\t\treturn data;\n  \t\t\t\t}\n\n  \t\t\t\t// E.g. `[0, 11, 12, 16]` and we’ve added 5-15, so we now have\n  \t\t\t\t// `[0, 16, 12, 16]`. Remove the `12,16` part, as it lies within the\n  \t\t\t\t// `0,16` range that was previously added.\n  \t\t\t\tif (start >= rangeStart && start <= rangeEnd) {\n  \t\t\t\t\t// `start` lies within the range that was previously added.\n\n  \t\t\t\t\tif (end > rangeStart && end - 1 <= rangeEnd) {\n  \t\t\t\t\t\t// `end` lies within the range that was previously added as well,\n  \t\t\t\t\t\t// so remove this pair.\n  \t\t\t\t\t\tdata.splice(index, 2);\n  \t\t\t\t\t\tindex -= 2;\n  \t\t\t\t\t\t// Note: we cannot `return` just yet, as there may still be other\n  \t\t\t\t\t\t// overlapping pairs.\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\t// `start` lies within the range that was previously added, but\n  \t\t\t\t\t\t// `end` doesn’t. E.g. `[0, 11, 12, 31]` and we’ve added 5-15, so\n  \t\t\t\t\t\t// now we have `[0, 16, 12, 31]`. This must be written as `[0, 31]`.\n  \t\t\t\t\t\t// Remove the previously added `end` and the current `start`.\n  \t\t\t\t\t\tdata.splice(index - 1, 2);\n  \t\t\t\t\t\tindex -= 2;\n  \t\t\t\t\t}\n\n  \t\t\t\t\t// Note: we cannot return yet.\n  \t\t\t\t}\n\n  \t\t\t}\n\n  \t\t\telse if (start == rangeEnd + 1) {\n  \t\t\t\tdata[index] = rangeStart;\n  \t\t\t\treturn data;\n  \t\t\t}\n\n  \t\t\t// Check if a new pair must be inserted *before* the current one.\n  \t\t\telse if (start > rangeEnd) {\n  \t\t\t\tdata.splice(index, 0, rangeStart, rangeEnd + 1);\n  \t\t\t\treturn data;\n  \t\t\t}\n\n  \t\t\telse if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end) {\n  \t\t\t\t// The new range lies entirely within an existing range pair. No action\n  \t\t\t\t// needed.\n  \t\t\t\treturn data;\n  \t\t\t}\n\n  \t\t\telse if (\n  \t\t\t\t// E.g. `[0, 11]` and you add 5-15 → `[0, 16]`.\n  \t\t\t\t(rangeStart >= start && rangeStart < end) ||\n  \t\t\t\t// E.g. `[0, 3]` and you add 3-6 → `[0, 7]`.\n  \t\t\t\tend == rangeStart\n  \t\t\t) {\n  \t\t\t\t// Replace `end` with the new value.\n  \t\t\t\tdata[index + 1] = rangeEnd + 1;\n  \t\t\t\t// Make sure the next range pair doesn’t overlap, e.g. `[0, 11, 12, 14]`\n  \t\t\t\t// and you add 5-15 → `[0, 16]`, i.e. remove the `12,14` part.\n  \t\t\t\tadded = true;\n  \t\t\t\t// Note: we cannot `return` just yet.\n  \t\t\t}\n\n  \t\t\telse if (rangeStart <= start && rangeEnd + 1 >= end) {\n  \t\t\t\t// The new range is a superset of the old range.\n  \t\t\t\tdata[index] = rangeStart;\n  \t\t\t\tdata[index + 1] = rangeEnd + 1;\n  \t\t\t\tadded = true;\n  \t\t\t}\n\n  \t\t\tindex += 2;\n  \t\t}\n  \t\t// The loop has finished without doing anything; add the new pair to the end\n  \t\t// of the data set.\n  \t\tif (!added) {\n  \t\t\tdata.push(rangeStart, rangeEnd + 1);\n  \t\t}\n  \t\treturn data;\n  \t};\n\n  \tvar dataContains = function(data, codePoint) {\n  \t\tvar index = 0;\n  \t\tvar length = data.length;\n  \t\t// Exit early if `codePoint` is not within `data`’s overall range.\n  \t\tvar start = data[index];\n  \t\tvar end = data[length - 1];\n  \t\tif (length >= 2) {\n  \t\t\tif (codePoint < start || codePoint > end) {\n  \t\t\t\treturn false;\n  \t\t\t}\n  \t\t}\n  \t\t// Iterate over the data per `(start, end)` pair.\n  \t\twhile (index < length) {\n  \t\t\tstart = data[index];\n  \t\t\tend = data[index + 1];\n  \t\t\tif (codePoint >= start && codePoint < end) {\n  \t\t\t\treturn true;\n  \t\t\t}\n  \t\t\tindex += 2;\n  \t\t}\n  \t\treturn false;\n  \t};\n\n  \tvar dataIntersection = function(data, codePoints) {\n  \t\tvar index = 0;\n  \t\tvar length = codePoints.length;\n  \t\tvar codePoint;\n  \t\tvar result = [];\n  \t\twhile (index < length) {\n  \t\t\tcodePoint = codePoints[index];\n  \t\t\tif (dataContains(data, codePoint)) {\n  \t\t\t\tresult.push(codePoint);\n  \t\t\t}\n  \t\t\t++index;\n  \t\t}\n  \t\treturn dataFromCodePoints(result);\n  \t};\n\n  \tvar dataIsEmpty = function(data) {\n  \t\treturn !data.length;\n  \t};\n\n  \tvar dataIsSingleton = function(data) {\n  \t\t// Check if the set only represents a single code point.\n  \t\treturn data.length == 2 && data[0] + 1 == data[1];\n  \t};\n\n  \tvar dataToArray = function(data) {\n  \t\t// Iterate over the data per `(start, end)` pair.\n  \t\tvar index = 0;\n  \t\tvar start;\n  \t\tvar end;\n  \t\tvar result = [];\n  \t\tvar length = data.length;\n  \t\twhile (index < length) {\n  \t\t\tstart = data[index];\n  \t\t\tend = data[index + 1];\n  \t\t\twhile (start < end) {\n  \t\t\t\tresult.push(start);\n  \t\t\t\t++start;\n  \t\t\t}\n  \t\t\tindex += 2;\n  \t\t}\n  \t\treturn result;\n  \t};\n\n  \t/*--------------------------------------------------------------------------*/\n\n  \t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n  \tvar floor = Math.floor;\n  \tvar highSurrogate = function(codePoint) {\n  \t\treturn parseInt(\n  \t\t\tfloor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN,\n  \t\t\t10\n  \t\t);\n  \t};\n\n  \tvar lowSurrogate = function(codePoint) {\n  \t\treturn parseInt(\n  \t\t\t(codePoint - 0x10000) % 0x400 + LOW_SURROGATE_MIN,\n  \t\t\t10\n  \t\t);\n  \t};\n\n  \tvar stringFromCharCode = String.fromCharCode;\n  \tvar codePointToString = function(codePoint) {\n  \t\tvar string;\n  \t\t// https://mathiasbynens.be/notes/javascript-escapes#single\n  \t\t// Note: the `\\b` escape sequence for U+0008 BACKSPACE in strings has a\n  \t\t// different meaning in regular expressions (word boundary), so it cannot\n  \t\t// be used here.\n  \t\tif (codePoint == 0x09) {\n  \t\t\tstring = '\\\\t';\n  \t\t}\n  \t\t// Note: IE < 9 treats `'\\v'` as `'v'`, so avoid using it.\n  \t\t// else if (codePoint == 0x0B) {\n  \t\t// \tstring = '\\\\v';\n  \t\t// }\n  \t\telse if (codePoint == 0x0A) {\n  \t\t\tstring = '\\\\n';\n  \t\t}\n  \t\telse if (codePoint == 0x0C) {\n  \t\t\tstring = '\\\\f';\n  \t\t}\n  \t\telse if (codePoint == 0x0D) {\n  \t\t\tstring = '\\\\r';\n  \t\t}\n  \t\telse if (codePoint == 0x5C) {\n  \t\t\tstring = '\\\\\\\\';\n  \t\t}\n  \t\telse if (\n  \t\t\tcodePoint == 0x24 ||\n  \t\t\t(codePoint >= 0x28 && codePoint <= 0x2B) ||\n  \t\t\tcodePoint == 0x2D || codePoint == 0x2E || codePoint == 0x3F ||\n  \t\t\t(codePoint >= 0x5B && codePoint <= 0x5E) ||\n  \t\t\t(codePoint >= 0x7B && codePoint <= 0x7D)\n  \t\t) {\n  \t\t\t// The code point maps to an unsafe printable ASCII character;\n  \t\t\t// backslash-escape it. Here’s the list of those symbols:\n  \t\t\t//\n  \t\t\t//     $()*+-.?[\\]^{|}\n  \t\t\t//\n  \t\t\t// See #7 for more info.\n  \t\t\tstring = '\\\\' + stringFromCharCode(codePoint);\n  \t\t}\n  \t\telse if (codePoint >= 0x20 && codePoint <= 0x7E) {\n  \t\t\t// The code point maps to one of these printable ASCII symbols\n  \t\t\t// (including the space character):\n  \t\t\t//\n  \t\t\t//      !\"#%&',/0123456789:;<=>@ABCDEFGHIJKLMNO\n  \t\t\t//     PQRSTUVWXYZ_`abcdefghijklmnopqrstuvwxyz~\n  \t\t\t//\n  \t\t\t// These can safely be used directly.\n  \t\t\tstring = stringFromCharCode(codePoint);\n  \t\t}\n  \t\telse if (codePoint <= 0xFF) {\n  \t\t\t// https://mathiasbynens.be/notes/javascript-escapes#hexadecimal\n  \t\t\tstring = '\\\\x' + pad(hex(codePoint), 2);\n  \t\t}\n  \t\telse { // `codePoint <= 0xFFFF` holds true.\n  \t\t\t// https://mathiasbynens.be/notes/javascript-escapes#unicode\n  \t\t\tstring = '\\\\u' + pad(hex(codePoint), 4);\n  \t\t}\n\n  \t\t// There’s no need to account for astral symbols / surrogate pairs here,\n  \t\t// since `codePointToString` is private and only used for BMP code points.\n  \t\t// But if that’s what you need, just add an `else` block with this code:\n  \t\t//\n  \t\t//     string = '\\\\u' + pad(hex(highSurrogate(codePoint)), 4)\n  \t\t//     \t+ '\\\\u' + pad(hex(lowSurrogate(codePoint)), 4);\n\n  \t\treturn string;\n  \t};\n\n  \tvar codePointToStringUnicode = function(codePoint) {\n  \t\tif (codePoint <= 0xFFFF) {\n  \t\t\treturn codePointToString(codePoint);\n  \t\t}\n  \t\treturn '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n  \t};\n\n  \tvar symbolToCodePoint = function(symbol) {\n  \t\tvar length = symbol.length;\n  \t\tvar first = symbol.charCodeAt(0);\n  \t\tvar second;\n  \t\tif (\n  \t\t\tfirst >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX &&\n  \t\t\tlength > 1 // There is a next code unit.\n  \t\t) {\n  \t\t\t// `first` is a high surrogate, and there is a next character. Assume\n  \t\t\t// it’s a low surrogate (else it’s invalid usage of Regenerate anyway).\n  \t\t\tsecond = symbol.charCodeAt(1);\n  \t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n  \t\t\treturn (first - HIGH_SURROGATE_MIN) * 0x400 +\n  \t\t\t\tsecond - LOW_SURROGATE_MIN + 0x10000;\n  \t\t}\n  \t\treturn first;\n  \t};\n\n  \tvar createBMPCharacterClasses = function(data) {\n  \t\t// Iterate over the data per `(start, end)` pair.\n  \t\tvar result = '';\n  \t\tvar index = 0;\n  \t\tvar start;\n  \t\tvar end;\n  \t\tvar length = data.length;\n  \t\tif (dataIsSingleton(data)) {\n  \t\t\treturn codePointToString(data[0]);\n  \t\t}\n  \t\twhile (index < length) {\n  \t\t\tstart = data[index];\n  \t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n  \t\t\tif (start == end) {\n  \t\t\t\tresult += codePointToString(start);\n  \t\t\t} else if (start + 1 == end) {\n  \t\t\t\tresult += codePointToString(start) + codePointToString(end);\n  \t\t\t} else {\n  \t\t\t\tresult += codePointToString(start) + '-' + codePointToString(end);\n  \t\t\t}\n  \t\t\tindex += 2;\n  \t\t}\n  \t\treturn '[' + result + ']';\n  \t};\n\n  \tvar createUnicodeCharacterClasses = function(data) {\n  \t\t// Iterate over the data per `(start, end)` pair.\n  \t\tvar result = '';\n  \t\tvar index = 0;\n  \t\tvar start;\n  \t\tvar end;\n  \t\tvar length = data.length;\n  \t\tif (dataIsSingleton(data)) {\n  \t\t\treturn codePointToStringUnicode(data[0]);\n  \t\t}\n  \t\twhile (index < length) {\n  \t\t\tstart = data[index];\n  \t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n  \t\t\tif (start == end) {\n  \t\t\t\tresult += codePointToStringUnicode(start);\n  \t\t\t} else if (start + 1 == end) {\n  \t\t\t\tresult += codePointToStringUnicode(start) + codePointToStringUnicode(end);\n  \t\t\t} else {\n  \t\t\t\tresult += codePointToStringUnicode(start) + '-' + codePointToStringUnicode(end);\n  \t\t\t}\n  \t\t\tindex += 2;\n  \t\t}\n  \t\treturn '[' + result + ']';\n  \t};\n\n  \tvar splitAtBMP = function(data) {\n  \t\t// Iterate over the data per `(start, end)` pair.\n  \t\tvar loneHighSurrogates = [];\n  \t\tvar loneLowSurrogates = [];\n  \t\tvar bmp = [];\n  \t\tvar astral = [];\n  \t\tvar index = 0;\n  \t\tvar start;\n  \t\tvar end;\n  \t\tvar length = data.length;\n  \t\twhile (index < length) {\n  \t\t\tstart = data[index];\n  \t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n\n  \t\t\tif (start < HIGH_SURROGATE_MIN) {\n\n  \t\t\t\t// The range starts and ends before the high surrogate range.\n  \t\t\t\t// E.g. (0, 0x10).\n  \t\t\t\tif (end < HIGH_SURROGATE_MIN) {\n  \t\t\t\t\tbmp.push(start, end + 1);\n  \t\t\t\t}\n\n  \t\t\t\t// The range starts before the high surrogate range and ends within it.\n  \t\t\t\t// E.g. (0, 0xD855).\n  \t\t\t\tif (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {\n  \t\t\t\t\tbmp.push(start, HIGH_SURROGATE_MIN);\n  \t\t\t\t\tloneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);\n  \t\t\t\t}\n\n  \t\t\t\t// The range starts before the high surrogate range and ends in the low\n  \t\t\t\t// surrogate range. E.g. (0, 0xDCFF).\n  \t\t\t\tif (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {\n  \t\t\t\t\tbmp.push(start, HIGH_SURROGATE_MIN);\n  \t\t\t\t\tloneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);\n  \t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);\n  \t\t\t\t}\n\n  \t\t\t\t// The range starts before the high surrogate range and ends after the\n  \t\t\t\t// low surrogate range. E.g. (0, 0x10FFFF).\n  \t\t\t\tif (end > LOW_SURROGATE_MAX) {\n  \t\t\t\t\tbmp.push(start, HIGH_SURROGATE_MIN);\n  \t\t\t\t\tloneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);\n  \t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);\n  \t\t\t\t\tif (end <= 0xFFFF) {\n  \t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, end + 1);\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);\n  \t\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n  \t\t\t\t\t}\n  \t\t\t\t}\n\n  \t\t\t} else if (start >= HIGH_SURROGATE_MIN && start <= HIGH_SURROGATE_MAX) {\n\n  \t\t\t\t// The range starts and ends in the high surrogate range.\n  \t\t\t\t// E.g. (0xD855, 0xD866).\n  \t\t\t\tif (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {\n  \t\t\t\t\tloneHighSurrogates.push(start, end + 1);\n  \t\t\t\t}\n\n  \t\t\t\t// The range starts in the high surrogate range and ends in the low\n  \t\t\t\t// surrogate range. E.g. (0xD855, 0xDCFF).\n  \t\t\t\tif (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {\n  \t\t\t\t\tloneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);\n  \t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);\n  \t\t\t\t}\n\n  \t\t\t\t// The range starts in the high surrogate range and ends after the low\n  \t\t\t\t// surrogate range. E.g. (0xD855, 0x10FFFF).\n  \t\t\t\tif (end > LOW_SURROGATE_MAX) {\n  \t\t\t\t\tloneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);\n  \t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);\n  \t\t\t\t\tif (end <= 0xFFFF) {\n  \t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, end + 1);\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);\n  \t\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n  \t\t\t\t\t}\n  \t\t\t\t}\n\n  \t\t\t} else if (start >= LOW_SURROGATE_MIN && start <= LOW_SURROGATE_MAX) {\n\n  \t\t\t\t// The range starts and ends in the low surrogate range.\n  \t\t\t\t// E.g. (0xDCFF, 0xDDFF).\n  \t\t\t\tif (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {\n  \t\t\t\t\tloneLowSurrogates.push(start, end + 1);\n  \t\t\t\t}\n\n  \t\t\t\t// The range starts in the low surrogate range and ends after the low\n  \t\t\t\t// surrogate range. E.g. (0xDCFF, 0x10FFFF).\n  \t\t\t\tif (end > LOW_SURROGATE_MAX) {\n  \t\t\t\t\tloneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);\n  \t\t\t\t\tif (end <= 0xFFFF) {\n  \t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, end + 1);\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);\n  \t\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n  \t\t\t\t\t}\n  \t\t\t\t}\n\n  \t\t\t} else if (start > LOW_SURROGATE_MAX && start <= 0xFFFF) {\n\n  \t\t\t\t// The range starts and ends after the low surrogate range.\n  \t\t\t\t// E.g. (0xFFAA, 0x10FFFF).\n  \t\t\t\tif (end <= 0xFFFF) {\n  \t\t\t\t\tbmp.push(start, end + 1);\n  \t\t\t\t} else {\n  \t\t\t\t\tbmp.push(start, 0xFFFF + 1);\n  \t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n  \t\t\t\t}\n\n  \t\t\t} else {\n\n  \t\t\t\t// The range starts and ends in the astral range.\n  \t\t\t\tastral.push(start, end + 1);\n\n  \t\t\t}\n\n  \t\t\tindex += 2;\n  \t\t}\n  \t\treturn {\n  \t\t\t'loneHighSurrogates': loneHighSurrogates,\n  \t\t\t'loneLowSurrogates': loneLowSurrogates,\n  \t\t\t'bmp': bmp,\n  \t\t\t'astral': astral\n  \t\t};\n  \t};\n\n  \tvar optimizeSurrogateMappings = function(surrogateMappings) {\n  \t\tvar result = [];\n  \t\tvar tmpLow = [];\n  \t\tvar addLow = false;\n  \t\tvar mapping;\n  \t\tvar nextMapping;\n  \t\tvar highSurrogates;\n  \t\tvar lowSurrogates;\n  \t\tvar nextHighSurrogates;\n  \t\tvar nextLowSurrogates;\n  \t\tvar index = -1;\n  \t\tvar length = surrogateMappings.length;\n  \t\twhile (++index < length) {\n  \t\t\tmapping = surrogateMappings[index];\n  \t\t\tnextMapping = surrogateMappings[index + 1];\n  \t\t\tif (!nextMapping) {\n  \t\t\t\tresult.push(mapping);\n  \t\t\t\tcontinue;\n  \t\t\t}\n  \t\t\thighSurrogates = mapping[0];\n  \t\t\tlowSurrogates = mapping[1];\n  \t\t\tnextHighSurrogates = nextMapping[0];\n  \t\t\tnextLowSurrogates = nextMapping[1];\n\n  \t\t\t// Check for identical high surrogate ranges.\n  \t\t\ttmpLow = lowSurrogates;\n  \t\t\twhile (\n  \t\t\t\tnextHighSurrogates &&\n  \t\t\t\thighSurrogates[0] == nextHighSurrogates[0] &&\n  \t\t\t\thighSurrogates[1] == nextHighSurrogates[1]\n  \t\t\t) {\n  \t\t\t\t// Merge with the next item.\n  \t\t\t\tif (dataIsSingleton(nextLowSurrogates)) {\n  \t\t\t\t\ttmpLow = dataAdd(tmpLow, nextLowSurrogates[0]);\n  \t\t\t\t} else {\n  \t\t\t\t\ttmpLow = dataAddRange(\n  \t\t\t\t\t\ttmpLow,\n  \t\t\t\t\t\tnextLowSurrogates[0],\n  \t\t\t\t\t\tnextLowSurrogates[1] - 1\n  \t\t\t\t\t);\n  \t\t\t\t}\n  \t\t\t\t++index;\n  \t\t\t\tmapping = surrogateMappings[index];\n  \t\t\t\thighSurrogates = mapping[0];\n  \t\t\t\tlowSurrogates = mapping[1];\n  \t\t\t\tnextMapping = surrogateMappings[index + 1];\n  \t\t\t\tnextHighSurrogates = nextMapping && nextMapping[0];\n  \t\t\t\tnextLowSurrogates = nextMapping && nextMapping[1];\n  \t\t\t\taddLow = true;\n  \t\t\t}\n  \t\t\tresult.push([\n  \t\t\t\thighSurrogates,\n  \t\t\t\taddLow ? tmpLow : lowSurrogates\n  \t\t\t]);\n  \t\t\taddLow = false;\n  \t\t}\n  \t\treturn optimizeByLowSurrogates(result);\n  \t};\n\n  \tvar optimizeByLowSurrogates = function(surrogateMappings) {\n  \t\tif (surrogateMappings.length == 1) {\n  \t\t\treturn surrogateMappings;\n  \t\t}\n  \t\tvar index = -1;\n  \t\tvar innerIndex = -1;\n  \t\twhile (++index < surrogateMappings.length) {\n  \t\t\tvar mapping = surrogateMappings[index];\n  \t\t\tvar lowSurrogates = mapping[1];\n  \t\t\tvar lowSurrogateStart = lowSurrogates[0];\n  \t\t\tvar lowSurrogateEnd = lowSurrogates[1];\n  \t\t\tinnerIndex = index; // Note: the loop starts at the next index.\n  \t\t\twhile (++innerIndex < surrogateMappings.length) {\n  \t\t\t\tvar otherMapping = surrogateMappings[innerIndex];\n  \t\t\t\tvar otherLowSurrogates = otherMapping[1];\n  \t\t\t\tvar otherLowSurrogateStart = otherLowSurrogates[0];\n  \t\t\t\tvar otherLowSurrogateEnd = otherLowSurrogates[1];\n  \t\t\t\tif (\n  \t\t\t\t\tlowSurrogateStart == otherLowSurrogateStart &&\n  \t\t\t\t\tlowSurrogateEnd == otherLowSurrogateEnd\n  \t\t\t\t) {\n  \t\t\t\t\t// Add the code points in the other item to this one.\n  \t\t\t\t\tif (dataIsSingleton(otherMapping[0])) {\n  \t\t\t\t\t\tmapping[0] = dataAdd(mapping[0], otherMapping[0][0]);\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tmapping[0] = dataAddRange(\n  \t\t\t\t\t\t\tmapping[0],\n  \t\t\t\t\t\t\totherMapping[0][0],\n  \t\t\t\t\t\t\totherMapping[0][1] - 1\n  \t\t\t\t\t\t);\n  \t\t\t\t\t}\n  \t\t\t\t\t// Remove the other, now redundant, item.\n  \t\t\t\t\tsurrogateMappings.splice(innerIndex, 1);\n  \t\t\t\t\t--innerIndex;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t\treturn surrogateMappings;\n  \t};\n\n  \tvar surrogateSet = function(data) {\n  \t\t// Exit early if `data` is an empty set.\n  \t\tif (!data.length) {\n  \t\t\treturn [];\n  \t\t}\n\n  \t\t// Iterate over the data per `(start, end)` pair.\n  \t\tvar index = 0;\n  \t\tvar start;\n  \t\tvar end;\n  \t\tvar startHigh;\n  \t\tvar startLow;\n  \t\tvar prevStartHigh = 0;\n  \t\tvar prevEndHigh = 0;\n  \t\tvar tmpLow = [];\n  \t\tvar endHigh;\n  \t\tvar endLow;\n  \t\tvar surrogateMappings = [];\n  \t\tvar length = data.length;\n  \t\tvar dataHigh = [];\n  \t\twhile (index < length) {\n  \t\t\tstart = data[index];\n  \t\t\tend = data[index + 1] - 1;\n\n  \t\t\tstartHigh = highSurrogate(start);\n  \t\t\tstartLow = lowSurrogate(start);\n  \t\t\tendHigh = highSurrogate(end);\n  \t\t\tendLow = lowSurrogate(end);\n\n  \t\t\tvar startsWithLowestLowSurrogate = startLow == LOW_SURROGATE_MIN;\n  \t\t\tvar endsWithHighestLowSurrogate = endLow == LOW_SURROGATE_MAX;\n  \t\t\tvar complete = false;\n\n  \t\t\t// Append the previous high-surrogate-to-low-surrogate mappings.\n  \t\t\t// Step 1: `(startHigh, startLow)` to `(startHigh, LOW_SURROGATE_MAX)`.\n  \t\t\tif (\n  \t\t\t\tstartHigh == endHigh ||\n  \t\t\t\tstartsWithLowestLowSurrogate && endsWithHighestLowSurrogate\n  \t\t\t) {\n  \t\t\t\tsurrogateMappings.push([\n  \t\t\t\t\t[startHigh, endHigh + 1],\n  \t\t\t\t\t[startLow, endLow + 1]\n  \t\t\t\t]);\n  \t\t\t\tcomplete = true;\n  \t\t\t} else {\n  \t\t\t\tsurrogateMappings.push([\n  \t\t\t\t\t[startHigh, startHigh + 1],\n  \t\t\t\t\t[startLow, LOW_SURROGATE_MAX + 1]\n  \t\t\t\t]);\n  \t\t\t}\n\n  \t\t\t// Step 2: `(startHigh + 1, LOW_SURROGATE_MIN)` to\n  \t\t\t// `(endHigh - 1, LOW_SURROGATE_MAX)`.\n  \t\t\tif (!complete && startHigh + 1 < endHigh) {\n  \t\t\t\tif (endsWithHighestLowSurrogate) {\n  \t\t\t\t\t// Combine step 2 and step 3.\n  \t\t\t\t\tsurrogateMappings.push([\n  \t\t\t\t\t\t[startHigh + 1, endHigh + 1],\n  \t\t\t\t\t\t[LOW_SURROGATE_MIN, endLow + 1]\n  \t\t\t\t\t]);\n  \t\t\t\t\tcomplete = true;\n  \t\t\t\t} else {\n  \t\t\t\t\tsurrogateMappings.push([\n  \t\t\t\t\t\t[startHigh + 1, endHigh],\n  \t\t\t\t\t\t[LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1]\n  \t\t\t\t\t]);\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\t// Step 3. `(endHigh, LOW_SURROGATE_MIN)` to `(endHigh, endLow)`.\n  \t\t\tif (!complete) {\n  \t\t\t\tsurrogateMappings.push([\n  \t\t\t\t\t[endHigh, endHigh + 1],\n  \t\t\t\t\t[LOW_SURROGATE_MIN, endLow + 1]\n  \t\t\t\t]);\n  \t\t\t}\n\n  \t\t\tprevStartHigh = startHigh;\n  \t\t\tprevEndHigh = endHigh;\n\n  \t\t\tindex += 2;\n  \t\t}\n\n  \t\t// The format of `surrogateMappings` is as follows:\n  \t\t//\n  \t\t//     [ surrogateMapping1, surrogateMapping2 ]\n  \t\t//\n  \t\t// i.e.:\n  \t\t//\n  \t\t//     [\n  \t\t//       [ highSurrogates1, lowSurrogates1 ],\n  \t\t//       [ highSurrogates2, lowSurrogates2 ]\n  \t\t//     ]\n  \t\treturn optimizeSurrogateMappings(surrogateMappings);\n  \t};\n\n  \tvar createSurrogateCharacterClasses = function(surrogateMappings) {\n  \t\tvar result = [];\n  \t\tforEach(surrogateMappings, function(surrogateMapping) {\n  \t\t\tvar highSurrogates = surrogateMapping[0];\n  \t\t\tvar lowSurrogates = surrogateMapping[1];\n  \t\t\tresult.push(\n  \t\t\t\tcreateBMPCharacterClasses(highSurrogates) +\n  \t\t\t\tcreateBMPCharacterClasses(lowSurrogates)\n  \t\t\t);\n  \t\t});\n  \t\treturn result.join('|');\n  \t};\n\n  \tvar createCharacterClassesFromData = function(data, bmpOnly, hasUnicodeFlag) {\n  \t\tif (hasUnicodeFlag) {\n  \t\t\treturn createUnicodeCharacterClasses(data);\n  \t\t}\n  \t\tvar result = [];\n\n  \t\tvar parts = splitAtBMP(data);\n  \t\tvar loneHighSurrogates = parts.loneHighSurrogates;\n  \t\tvar loneLowSurrogates = parts.loneLowSurrogates;\n  \t\tvar bmp = parts.bmp;\n  \t\tvar astral = parts.astral;\n  \t\tvar hasAstral = !dataIsEmpty(parts.astral);\n  \t\tvar hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates);\n  \t\tvar hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates);\n\n  \t\tvar surrogateMappings = surrogateSet(astral);\n\n  \t\tif (bmpOnly) {\n  \t\t\tbmp = dataAddData(bmp, loneHighSurrogates);\n  \t\t\thasLoneHighSurrogates = false;\n  \t\t\tbmp = dataAddData(bmp, loneLowSurrogates);\n  \t\t\thasLoneLowSurrogates = false;\n  \t\t}\n\n  \t\tif (!dataIsEmpty(bmp)) {\n  \t\t\t// The data set contains BMP code points that are not high surrogates\n  \t\t\t// needed for astral code points in the set.\n  \t\t\tresult.push(createBMPCharacterClasses(bmp));\n  \t\t}\n  \t\tif (surrogateMappings.length) {\n  \t\t\t// The data set contains astral code points; append character classes\n  \t\t\t// based on their surrogate pairs.\n  \t\t\tresult.push(createSurrogateCharacterClasses(surrogateMappings));\n  \t\t}\n  \t\t// https://gist.github.com/mathiasbynens/bbe7f870208abcfec860\n  \t\tif (hasLoneHighSurrogates) {\n  \t\t\tresult.push(\n  \t\t\t\tcreateBMPCharacterClasses(loneHighSurrogates) +\n  \t\t\t\t// Make sure the high surrogates aren’t part of a surrogate pair.\n  \t\t\t\t'(?![\\\\uDC00-\\\\uDFFF])'\n  \t\t\t);\n  \t\t}\n  \t\tif (hasLoneLowSurrogates) {\n  \t\t\tresult.push(\n  \t\t\t\t// It is not possible to accurately assert the low surrogates aren’t\n  \t\t\t\t// part of a surrogate pair, since JavaScript regular expressions do\n  \t\t\t\t// not support lookbehind.\n  \t\t\t\t'(?:[^\\\\uD800-\\\\uDBFF]|^)' +\n  \t\t\t\tcreateBMPCharacterClasses(loneLowSurrogates)\n  \t\t\t);\n  \t\t}\n  \t\treturn result.join('|');\n  \t};\n\n  \t/*--------------------------------------------------------------------------*/\n\n  \t// `regenerate` can be used as a constructor (and new methods can be added to\n  \t// its prototype) but also as a regular function, the latter of which is the\n  \t// documented and most common usage. For that reason, it’s not capitalized.\n  \tvar regenerate = function(value) {\n  \t\tif (arguments.length > 1) {\n  \t\t\tvalue = slice.call(arguments);\n  \t\t}\n  \t\tif (this instanceof regenerate) {\n  \t\t\tthis.data = [];\n  \t\t\treturn value ? this.add(value) : this;\n  \t\t}\n  \t\treturn (new regenerate).add(value);\n  \t};\n\n  \tregenerate.version = '1.3.1';\n\n  \tvar proto = regenerate.prototype;\n  \textend(proto, {\n  \t\t'add': function(value) {\n  \t\t\tvar $this = this;\n  \t\t\tif (value == null) {\n  \t\t\t\treturn $this;\n  \t\t\t}\n  \t\t\tif (value instanceof regenerate) {\n  \t\t\t\t// Allow passing other Regenerate instances.\n  \t\t\t\t$this.data = dataAddData($this.data, value.data);\n  \t\t\t\treturn $this;\n  \t\t\t}\n  \t\t\tif (arguments.length > 1) {\n  \t\t\t\tvalue = slice.call(arguments);\n  \t\t\t}\n  \t\t\tif (isArray(value)) {\n  \t\t\t\tforEach(value, function(item) {\n  \t\t\t\t\t$this.add(item);\n  \t\t\t\t});\n  \t\t\t\treturn $this;\n  \t\t\t}\n  \t\t\t$this.data = dataAdd(\n  \t\t\t\t$this.data,\n  \t\t\t\tisNumber(value) ? value : symbolToCodePoint(value)\n  \t\t\t);\n  \t\t\treturn $this;\n  \t\t},\n  \t\t'remove': function(value) {\n  \t\t\tvar $this = this;\n  \t\t\tif (value == null) {\n  \t\t\t\treturn $this;\n  \t\t\t}\n  \t\t\tif (value instanceof regenerate) {\n  \t\t\t\t// Allow passing other Regenerate instances.\n  \t\t\t\t$this.data = dataRemoveData($this.data, value.data);\n  \t\t\t\treturn $this;\n  \t\t\t}\n  \t\t\tif (arguments.length > 1) {\n  \t\t\t\tvalue = slice.call(arguments);\n  \t\t\t}\n  \t\t\tif (isArray(value)) {\n  \t\t\t\tforEach(value, function(item) {\n  \t\t\t\t\t$this.remove(item);\n  \t\t\t\t});\n  \t\t\t\treturn $this;\n  \t\t\t}\n  \t\t\t$this.data = dataRemove(\n  \t\t\t\t$this.data,\n  \t\t\t\tisNumber(value) ? value : symbolToCodePoint(value)\n  \t\t\t);\n  \t\t\treturn $this;\n  \t\t},\n  \t\t'addRange': function(start, end) {\n  \t\t\tvar $this = this;\n  \t\t\t$this.data = dataAddRange($this.data,\n  \t\t\t\tisNumber(start) ? start : symbolToCodePoint(start),\n  \t\t\t\tisNumber(end) ? end : symbolToCodePoint(end)\n  \t\t\t);\n  \t\t\treturn $this;\n  \t\t},\n  \t\t'removeRange': function(start, end) {\n  \t\t\tvar $this = this;\n  \t\t\tvar startCodePoint = isNumber(start) ? start : symbolToCodePoint(start);\n  \t\t\tvar endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);\n  \t\t\t$this.data = dataRemoveRange(\n  \t\t\t\t$this.data,\n  \t\t\t\tstartCodePoint,\n  \t\t\t\tendCodePoint\n  \t\t\t);\n  \t\t\treturn $this;\n  \t\t},\n  \t\t'intersection': function(argument) {\n  \t\t\tvar $this = this;\n  \t\t\t// Allow passing other Regenerate instances.\n  \t\t\t// TODO: Optimize this by writing and using `dataIntersectionData()`.\n  \t\t\tvar array = argument instanceof regenerate ?\n  \t\t\t\tdataToArray(argument.data) :\n  \t\t\t\targument;\n  \t\t\t$this.data = dataIntersection($this.data, array);\n  \t\t\treturn $this;\n  \t\t},\n  \t\t'contains': function(codePoint) {\n  \t\t\treturn dataContains(\n  \t\t\t\tthis.data,\n  \t\t\t\tisNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint)\n  \t\t\t);\n  \t\t},\n  \t\t'clone': function() {\n  \t\t\tvar set = new regenerate;\n  \t\t\tset.data = this.data.slice(0);\n  \t\t\treturn set;\n  \t\t},\n  \t\t'toString': function(options) {\n  \t\t\tvar result = createCharacterClassesFromData(\n  \t\t\t\tthis.data,\n  \t\t\t\toptions ? options.bmpOnly : false,\n  \t\t\t\toptions ? options.hasUnicodeFlag : false\n  \t\t\t);\n  \t\t\tif (!result) {\n  \t\t\t\t// For an empty set, return something that can be inserted `/here/` to\n  \t\t\t\t// form a valid regular expression. Avoid `(?:)` since that matches the\n  \t\t\t\t// empty string.\n  \t\t\t\treturn '[]';\n  \t\t\t}\n  \t\t\t// Use `\\0` instead of `\\x00` where possible.\n  \t\t\treturn result.replace(regexNull, '\\\\0$1');\n  \t\t},\n  \t\t'toRegExp': function(flags) {\n  \t\t\tvar pattern = this.toString(\n  \t\t\t\tflags && flags.indexOf('u') != -1 ?\n  \t\t\t\t\t{ 'hasUnicodeFlag': true } :\n  \t\t\t\t\tnull\n  \t\t\t);\n  \t\t\treturn RegExp(pattern, flags || '');\n  \t\t},\n  \t\t'valueOf': function() { // Note: `valueOf` is aliased as `toArray`.\n  \t\t\treturn dataToArray(this.data);\n  \t\t}\n  \t});\n\n  \tproto.toArray = proto.valueOf;\n\n  \t// Some AMD build optimizers, like r.js, check for specific condition patterns\n  \t// like the following:\n  \tif (\n  \t\ttrue\n  \t) {\n  \t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n  \t\t\treturn regenerate;\n  \t\t}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  \t}\telse if (freeExports && !freeExports.nodeType) {\n  \t\tif (freeModule) { // in Node.js, io.js, or RingoJS v0.8.0+\n  \t\t\tfreeModule.exports = regenerate;\n  \t\t} else { // in Narwhal or RingoJS v0.7.0-\n  \t\t\tfreeExports.regenerate = regenerate;\n  \t\t}\n  \t} else { // in Rhino or a web browser\n  \t\troot.regenerate = regenerate;\n  \t}\n\n  }(__commonjs_global));\n  });\n\n  var require$$0$2 = (regenerate && typeof regenerate === 'object' && 'default' in regenerate ? regenerate['default'] : regenerate);\n\n  var characterClassEscapeSets = __commonjs(function (module, exports) {\n  // Generated by `/scripts/character-class-escape-sets.js`. Do not edit.\n  var regenerate = require$$0$2;\n\n  exports.REGULAR = {\n  \t'd': regenerate()\n  \t\t.addRange(0x30, 0x39),\n  \t'D': regenerate()\n  \t\t.addRange(0x0, 0x2F)\n  \t\t.addRange(0x3A, 0xFFFF),\n  \t's': regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)\n  \t\t.addRange(0x9, 0xD)\n  \t\t.addRange(0x2000, 0x200A)\n  \t\t.addRange(0x2028, 0x2029),\n  \t'S': regenerate()\n  \t\t.addRange(0x0, 0x8)\n  \t\t.addRange(0xE, 0x1F)\n  \t\t.addRange(0x21, 0x9F)\n  \t\t.addRange(0xA1, 0x167F)\n  \t\t.addRange(0x1681, 0x1FFF)\n  \t\t.addRange(0x200B, 0x2027)\n  \t\t.addRange(0x202A, 0x202E)\n  \t\t.addRange(0x2030, 0x205E)\n  \t\t.addRange(0x2060, 0x2FFF)\n  \t\t.addRange(0x3001, 0xFEFE)\n  \t\t.addRange(0xFF00, 0xFFFF),\n  \t'w': regenerate(0x5F)\n  \t\t.addRange(0x30, 0x39)\n  \t\t.addRange(0x41, 0x5A)\n  \t\t.addRange(0x61, 0x7A),\n  \t'W': regenerate(0x60)\n  \t\t.addRange(0x0, 0x2F)\n  \t\t.addRange(0x3A, 0x40)\n  \t\t.addRange(0x5B, 0x5E)\n  \t\t.addRange(0x7B, 0xFFFF)\n  };\n\n  exports.UNICODE = {\n  \t'd': regenerate()\n  \t\t.addRange(0x30, 0x39),\n  \t'D': regenerate()\n  \t\t.addRange(0x0, 0x2F)\n  \t\t.addRange(0x3A, 0x10FFFF),\n  \t's': regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)\n  \t\t.addRange(0x9, 0xD)\n  \t\t.addRange(0x2000, 0x200A)\n  \t\t.addRange(0x2028, 0x2029),\n  \t'S': regenerate()\n  \t\t.addRange(0x0, 0x8)\n  \t\t.addRange(0xE, 0x1F)\n  \t\t.addRange(0x21, 0x9F)\n  \t\t.addRange(0xA1, 0x167F)\n  \t\t.addRange(0x1681, 0x1FFF)\n  \t\t.addRange(0x200B, 0x2027)\n  \t\t.addRange(0x202A, 0x202E)\n  \t\t.addRange(0x2030, 0x205E)\n  \t\t.addRange(0x2060, 0x2FFF)\n  \t\t.addRange(0x3001, 0xFEFE)\n  \t\t.addRange(0xFF00, 0x10FFFF),\n  \t'w': regenerate(0x5F)\n  \t\t.addRange(0x30, 0x39)\n  \t\t.addRange(0x41, 0x5A)\n  \t\t.addRange(0x61, 0x7A),\n  \t'W': regenerate(0x60)\n  \t\t.addRange(0x0, 0x2F)\n  \t\t.addRange(0x3A, 0x40)\n  \t\t.addRange(0x5B, 0x5E)\n  \t\t.addRange(0x7B, 0x10FFFF)\n  };\n\n  exports.UNICODE_IGNORE_CASE = {\n  \t'd': regenerate()\n  \t\t.addRange(0x30, 0x39),\n  \t'D': regenerate()\n  \t\t.addRange(0x0, 0x2F)\n  \t\t.addRange(0x3A, 0x10FFFF),\n  \t's': regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)\n  \t\t.addRange(0x9, 0xD)\n  \t\t.addRange(0x2000, 0x200A)\n  \t\t.addRange(0x2028, 0x2029),\n  \t'S': regenerate()\n  \t\t.addRange(0x0, 0x8)\n  \t\t.addRange(0xE, 0x1F)\n  \t\t.addRange(0x21, 0x9F)\n  \t\t.addRange(0xA1, 0x167F)\n  \t\t.addRange(0x1681, 0x1FFF)\n  \t\t.addRange(0x200B, 0x2027)\n  \t\t.addRange(0x202A, 0x202E)\n  \t\t.addRange(0x2030, 0x205E)\n  \t\t.addRange(0x2060, 0x2FFF)\n  \t\t.addRange(0x3001, 0xFEFE)\n  \t\t.addRange(0xFF00, 0x10FFFF),\n  \t'w': regenerate(0x5F, 0x17F, 0x212A)\n  \t\t.addRange(0x30, 0x39)\n  \t\t.addRange(0x41, 0x5A)\n  \t\t.addRange(0x61, 0x7A),\n  \t'W': regenerate(0x4B, 0x53, 0x60)\n  \t\t.addRange(0x0, 0x2F)\n  \t\t.addRange(0x3A, 0x40)\n  \t\t.addRange(0x5B, 0x5E)\n  \t\t.addRange(0x7B, 0x10FFFF)\n  };\n  });\n\n  var require$$0$1 = (characterClassEscapeSets && typeof characterClassEscapeSets === 'object' && 'default' in characterClassEscapeSets ? characterClassEscapeSets['default'] : characterClassEscapeSets);\n\n  var require$$1 = {\n  \t\"75\": 8490,\n  \t\"83\": 383,\n  \t\"107\": 8490,\n  \t\"115\": 383,\n  \t\"181\": 924,\n  \t\"197\": 8491,\n  \t\"383\": 83,\n  \t\"452\": 453,\n  \t\"453\": 452,\n  \t\"455\": 456,\n  \t\"456\": 455,\n  \t\"458\": 459,\n  \t\"459\": 458,\n  \t\"497\": 498,\n  \t\"498\": 497,\n  \t\"837\": 8126,\n  \t\"914\": 976,\n  \t\"917\": 1013,\n  \t\"920\": 1012,\n  \t\"921\": 8126,\n  \t\"922\": 1008,\n  \t\"924\": 181,\n  \t\"928\": 982,\n  \t\"929\": 1009,\n  \t\"931\": 962,\n  \t\"934\": 981,\n  \t\"937\": 8486,\n  \t\"962\": 931,\n  \t\"976\": 914,\n  \t\"977\": 1012,\n  \t\"981\": 934,\n  \t\"982\": 928,\n  \t\"1008\": 922,\n  \t\"1009\": 929,\n  \t\"1012\": [920,977],\n  \t\"1013\": 917,\n  \t\"7776\": 7835,\n  \t\"7835\": 7776,\n  \t\"8126\": [837,921],\n  \t\"8486\": 937,\n  \t\"8490\": 75,\n  \t\"8491\": 197,\n  \t\"66560\": 66600,\n  \t\"66561\": 66601,\n  \t\"66562\": 66602,\n  \t\"66563\": 66603,\n  \t\"66564\": 66604,\n  \t\"66565\": 66605,\n  \t\"66566\": 66606,\n  \t\"66567\": 66607,\n  \t\"66568\": 66608,\n  \t\"66569\": 66609,\n  \t\"66570\": 66610,\n  \t\"66571\": 66611,\n  \t\"66572\": 66612,\n  \t\"66573\": 66613,\n  \t\"66574\": 66614,\n  \t\"66575\": 66615,\n  \t\"66576\": 66616,\n  \t\"66577\": 66617,\n  \t\"66578\": 66618,\n  \t\"66579\": 66619,\n  \t\"66580\": 66620,\n  \t\"66581\": 66621,\n  \t\"66582\": 66622,\n  \t\"66583\": 66623,\n  \t\"66584\": 66624,\n  \t\"66585\": 66625,\n  \t\"66586\": 66626,\n  \t\"66587\": 66627,\n  \t\"66588\": 66628,\n  \t\"66589\": 66629,\n  \t\"66590\": 66630,\n  \t\"66591\": 66631,\n  \t\"66592\": 66632,\n  \t\"66593\": 66633,\n  \t\"66594\": 66634,\n  \t\"66595\": 66635,\n  \t\"66596\": 66636,\n  \t\"66597\": 66637,\n  \t\"66598\": 66638,\n  \t\"66599\": 66639,\n  \t\"66600\": 66560,\n  \t\"66601\": 66561,\n  \t\"66602\": 66562,\n  \t\"66603\": 66563,\n  \t\"66604\": 66564,\n  \t\"66605\": 66565,\n  \t\"66606\": 66566,\n  \t\"66607\": 66567,\n  \t\"66608\": 66568,\n  \t\"66609\": 66569,\n  \t\"66610\": 66570,\n  \t\"66611\": 66571,\n  \t\"66612\": 66572,\n  \t\"66613\": 66573,\n  \t\"66614\": 66574,\n  \t\"66615\": 66575,\n  \t\"66616\": 66576,\n  \t\"66617\": 66577,\n  \t\"66618\": 66578,\n  \t\"66619\": 66579,\n  \t\"66620\": 66580,\n  \t\"66621\": 66581,\n  \t\"66622\": 66582,\n  \t\"66623\": 66583,\n  \t\"66624\": 66584,\n  \t\"66625\": 66585,\n  \t\"66626\": 66586,\n  \t\"66627\": 66587,\n  \t\"66628\": 66588,\n  \t\"66629\": 66589,\n  \t\"66630\": 66590,\n  \t\"66631\": 66591,\n  \t\"66632\": 66592,\n  \t\"66633\": 66593,\n  \t\"66634\": 66594,\n  \t\"66635\": 66595,\n  \t\"66636\": 66596,\n  \t\"66637\": 66597,\n  \t\"66638\": 66598,\n  \t\"66639\": 66599,\n  \t\"68736\": 68800,\n  \t\"68737\": 68801,\n  \t\"68738\": 68802,\n  \t\"68739\": 68803,\n  \t\"68740\": 68804,\n  \t\"68741\": 68805,\n  \t\"68742\": 68806,\n  \t\"68743\": 68807,\n  \t\"68744\": 68808,\n  \t\"68745\": 68809,\n  \t\"68746\": 68810,\n  \t\"68747\": 68811,\n  \t\"68748\": 68812,\n  \t\"68749\": 68813,\n  \t\"68750\": 68814,\n  \t\"68751\": 68815,\n  \t\"68752\": 68816,\n  \t\"68753\": 68817,\n  \t\"68754\": 68818,\n  \t\"68755\": 68819,\n  \t\"68756\": 68820,\n  \t\"68757\": 68821,\n  \t\"68758\": 68822,\n  \t\"68759\": 68823,\n  \t\"68760\": 68824,\n  \t\"68761\": 68825,\n  \t\"68762\": 68826,\n  \t\"68763\": 68827,\n  \t\"68764\": 68828,\n  \t\"68765\": 68829,\n  \t\"68766\": 68830,\n  \t\"68767\": 68831,\n  \t\"68768\": 68832,\n  \t\"68769\": 68833,\n  \t\"68770\": 68834,\n  \t\"68771\": 68835,\n  \t\"68772\": 68836,\n  \t\"68773\": 68837,\n  \t\"68774\": 68838,\n  \t\"68775\": 68839,\n  \t\"68776\": 68840,\n  \t\"68777\": 68841,\n  \t\"68778\": 68842,\n  \t\"68779\": 68843,\n  \t\"68780\": 68844,\n  \t\"68781\": 68845,\n  \t\"68782\": 68846,\n  \t\"68783\": 68847,\n  \t\"68784\": 68848,\n  \t\"68785\": 68849,\n  \t\"68786\": 68850,\n  \t\"68800\": 68736,\n  \t\"68801\": 68737,\n  \t\"68802\": 68738,\n  \t\"68803\": 68739,\n  \t\"68804\": 68740,\n  \t\"68805\": 68741,\n  \t\"68806\": 68742,\n  \t\"68807\": 68743,\n  \t\"68808\": 68744,\n  \t\"68809\": 68745,\n  \t\"68810\": 68746,\n  \t\"68811\": 68747,\n  \t\"68812\": 68748,\n  \t\"68813\": 68749,\n  \t\"68814\": 68750,\n  \t\"68815\": 68751,\n  \t\"68816\": 68752,\n  \t\"68817\": 68753,\n  \t\"68818\": 68754,\n  \t\"68819\": 68755,\n  \t\"68820\": 68756,\n  \t\"68821\": 68757,\n  \t\"68822\": 68758,\n  \t\"68823\": 68759,\n  \t\"68824\": 68760,\n  \t\"68825\": 68761,\n  \t\"68826\": 68762,\n  \t\"68827\": 68763,\n  \t\"68828\": 68764,\n  \t\"68829\": 68765,\n  \t\"68830\": 68766,\n  \t\"68831\": 68767,\n  \t\"68832\": 68768,\n  \t\"68833\": 68769,\n  \t\"68834\": 68770,\n  \t\"68835\": 68771,\n  \t\"68836\": 68772,\n  \t\"68837\": 68773,\n  \t\"68838\": 68774,\n  \t\"68839\": 68775,\n  \t\"68840\": 68776,\n  \t\"68841\": 68777,\n  \t\"68842\": 68778,\n  \t\"68843\": 68779,\n  \t\"68844\": 68780,\n  \t\"68845\": 68781,\n  \t\"68846\": 68782,\n  \t\"68847\": 68783,\n  \t\"68848\": 68784,\n  \t\"68849\": 68785,\n  \t\"68850\": 68786,\n  \t\"71840\": 71872,\n  \t\"71841\": 71873,\n  \t\"71842\": 71874,\n  \t\"71843\": 71875,\n  \t\"71844\": 71876,\n  \t\"71845\": 71877,\n  \t\"71846\": 71878,\n  \t\"71847\": 71879,\n  \t\"71848\": 71880,\n  \t\"71849\": 71881,\n  \t\"71850\": 71882,\n  \t\"71851\": 71883,\n  \t\"71852\": 71884,\n  \t\"71853\": 71885,\n  \t\"71854\": 71886,\n  \t\"71855\": 71887,\n  \t\"71856\": 71888,\n  \t\"71857\": 71889,\n  \t\"71858\": 71890,\n  \t\"71859\": 71891,\n  \t\"71860\": 71892,\n  \t\"71861\": 71893,\n  \t\"71862\": 71894,\n  \t\"71863\": 71895,\n  \t\"71864\": 71896,\n  \t\"71865\": 71897,\n  \t\"71866\": 71898,\n  \t\"71867\": 71899,\n  \t\"71868\": 71900,\n  \t\"71869\": 71901,\n  \t\"71870\": 71902,\n  \t\"71871\": 71903,\n  \t\"71872\": 71840,\n  \t\"71873\": 71841,\n  \t\"71874\": 71842,\n  \t\"71875\": 71843,\n  \t\"71876\": 71844,\n  \t\"71877\": 71845,\n  \t\"71878\": 71846,\n  \t\"71879\": 71847,\n  \t\"71880\": 71848,\n  \t\"71881\": 71849,\n  \t\"71882\": 71850,\n  \t\"71883\": 71851,\n  \t\"71884\": 71852,\n  \t\"71885\": 71853,\n  \t\"71886\": 71854,\n  \t\"71887\": 71855,\n  \t\"71888\": 71856,\n  \t\"71889\": 71857,\n  \t\"71890\": 71858,\n  \t\"71891\": 71859,\n  \t\"71892\": 71860,\n  \t\"71893\": 71861,\n  \t\"71894\": 71862,\n  \t\"71895\": 71863,\n  \t\"71896\": 71864,\n  \t\"71897\": 71865,\n  \t\"71898\": 71866,\n  \t\"71899\": 71867,\n  \t\"71900\": 71868,\n  \t\"71901\": 71869,\n  \t\"71902\": 71870,\n  \t\"71903\": 71871\n  };\n\n  var parser = __commonjs(function (module) {\n  // regjsparser\n  //\n  // ==================================================================\n  //\n  // See ECMA-262 Standard: 15.10.1\n  //\n  // NOTE: The ECMA-262 standard uses the term \"Assertion\" for /^/. Here the\n  //   term \"Anchor\" is used.\n  //\n  // Pattern ::\n  //      Disjunction\n  //\n  // Disjunction ::\n  //      Alternative\n  //      Alternative | Disjunction\n  //\n  // Alternative ::\n  //      [empty]\n  //      Alternative Term\n  //\n  // Term ::\n  //      Anchor\n  //      Atom\n  //      Atom Quantifier\n  //\n  // Anchor ::\n  //      ^\n  //      $\n  //      \\ b\n  //      \\ B\n  //      ( ? = Disjunction )\n  //      ( ? ! Disjunction )\n  //\n  // Quantifier ::\n  //      QuantifierPrefix\n  //      QuantifierPrefix ?\n  //\n  // QuantifierPrefix ::\n  //      *\n  //      +\n  //      ?\n  //      { DecimalDigits }\n  //      { DecimalDigits , }\n  //      { DecimalDigits , DecimalDigits }\n  //\n  // Atom ::\n  //      PatternCharacter\n  //      .\n  //      \\ AtomEscape\n  //      CharacterClass\n  //      ( Disjunction )\n  //      ( ? : Disjunction )\n  //\n  // PatternCharacter ::\n  //      SourceCharacter but not any of: ^ $ \\ . * + ? ( ) [ ] { } |\n  //\n  // AtomEscape ::\n  //      DecimalEscape\n  //      CharacterEscape\n  //      CharacterClassEscape\n  //\n  // CharacterEscape[U] ::\n  //      ControlEscape\n  //      c ControlLetter\n  //      HexEscapeSequence\n  //      RegExpUnicodeEscapeSequence[?U] (ES6)\n  //      IdentityEscape[?U]\n  //\n  // ControlEscape ::\n  //      one of f n r t v\n  // ControlLetter ::\n  //      one of\n  //          a b c d e f g h i j k l m n o p q r s t u v w x y z\n  //          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n  //\n  // IdentityEscape ::\n  //      SourceCharacter but not IdentifierPart\n  //      <ZWJ>\n  //      <ZWNJ>\n  //\n  // DecimalEscape ::\n  //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n  //\n  // CharacterClassEscape ::\n  //      one of d D s S w W\n  //\n  // CharacterClass ::\n  //      [ [lookahead ∉ {^}] ClassRanges ]\n  //      [ ^ ClassRanges ]\n  //\n  // ClassRanges ::\n  //      [empty]\n  //      NonemptyClassRanges\n  //\n  // NonemptyClassRanges ::\n  //      ClassAtom\n  //      ClassAtom NonemptyClassRangesNoDash\n  //      ClassAtom - ClassAtom ClassRanges\n  //\n  // NonemptyClassRangesNoDash ::\n  //      ClassAtom\n  //      ClassAtomNoDash NonemptyClassRangesNoDash\n  //      ClassAtomNoDash - ClassAtom ClassRanges\n  //\n  // ClassAtom ::\n  //      -\n  //      ClassAtomNoDash\n  //\n  // ClassAtomNoDash ::\n  //      SourceCharacter but not one of \\ or ] or -\n  //      \\ ClassEscape\n  //\n  // ClassEscape ::\n  //      DecimalEscape\n  //      b\n  //      CharacterEscape\n  //      CharacterClassEscape\n\n  (function() {\n\n    function parse(str, flags) {\n      function addRaw(node) {\n        node.raw = str.substring(node.range[0], node.range[1]);\n        return node;\n      }\n\n      function updateRawStart(node, start) {\n        node.range[0] = start;\n        return addRaw(node);\n      }\n\n      function createAnchor(kind, rawLength) {\n        return addRaw({\n          type: 'anchor',\n          kind: kind,\n          range: [\n            pos - rawLength,\n            pos\n          ]\n        });\n      }\n\n      function createValue(kind, codePoint, from, to) {\n        return addRaw({\n          type: 'value',\n          kind: kind,\n          codePoint: codePoint,\n          range: [from, to]\n        });\n      }\n\n      function createEscaped(kind, codePoint, value, fromOffset) {\n        fromOffset = fromOffset || 0;\n        return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);\n      }\n\n      function createCharacter(matches) {\n        var _char = matches[0];\n        var first = _char.charCodeAt(0);\n        if (hasUnicodeFlag) {\n          var second;\n          if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {\n            second = lookahead().charCodeAt(0);\n            if (second >= 0xDC00 && second <= 0xDFFF) {\n              // Unicode surrogate pair\n              pos++;\n              return createValue(\n                  'symbol',\n                  (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000,\n                  pos - 2, pos);\n            }\n          }\n        }\n        return createValue('symbol', first, pos - 1, pos);\n      }\n\n      function createDisjunction(alternatives, from, to) {\n        return addRaw({\n          type: 'disjunction',\n          body: alternatives,\n          range: [\n            from,\n            to\n          ]\n        });\n      }\n\n      function createDot() {\n        return addRaw({\n          type: 'dot',\n          range: [\n            pos - 1,\n            pos\n          ]\n        });\n      }\n\n      function createCharacterClassEscape(value) {\n        return addRaw({\n          type: 'characterClassEscape',\n          value: value,\n          range: [\n            pos - 2,\n            pos\n          ]\n        });\n      }\n\n      function createReference(matchIndex) {\n        return addRaw({\n          type: 'reference',\n          matchIndex: parseInt(matchIndex, 10),\n          range: [\n            pos - 1 - matchIndex.length,\n            pos\n          ]\n        });\n      }\n\n      function createGroup(behavior, disjunction, from, to) {\n        return addRaw({\n          type: 'group',\n          behavior: behavior,\n          body: disjunction,\n          range: [\n            from,\n            to\n          ]\n        });\n      }\n\n      function createQuantifier(min, max, from, to) {\n        if (to == null) {\n          from = pos - 1;\n          to = pos;\n        }\n\n        return addRaw({\n          type: 'quantifier',\n          min: min,\n          max: max,\n          greedy: true,\n          body: null, // set later on\n          range: [\n            from,\n            to\n          ]\n        });\n      }\n\n      function createAlternative(terms, from, to) {\n        return addRaw({\n          type: 'alternative',\n          body: terms,\n          range: [\n            from,\n            to\n          ]\n        });\n      }\n\n      function createCharacterClass(classRanges, negative, from, to) {\n        return addRaw({\n          type: 'characterClass',\n          body: classRanges,\n          negative: negative,\n          range: [\n            from,\n            to\n          ]\n        });\n      }\n\n      function createClassRange(min, max, from, to) {\n        // See 15.10.2.15:\n        if (min.codePoint > max.codePoint) {\n          bail('invalid range in character class', min.raw + '-' + max.raw, from, to);\n        }\n\n        return addRaw({\n          type: 'characterClassRange',\n          min: min,\n          max: max,\n          range: [\n            from,\n            to\n          ]\n        });\n      }\n\n      function flattenBody(body) {\n        if (body.type === 'alternative') {\n          return body.body;\n        } else {\n          return [body];\n        }\n      }\n\n      function isEmpty(obj) {\n        return obj.type === 'empty';\n      }\n\n      function incr(amount) {\n        amount = (amount || 1);\n        var res = str.substring(pos, pos + amount);\n        pos += (amount || 1);\n        return res;\n      }\n\n      function skip(value) {\n        if (!match(value)) {\n          bail('character', value);\n        }\n      }\n\n      function match(value) {\n        if (str.indexOf(value, pos) === pos) {\n          return incr(value.length);\n        }\n      }\n\n      function lookahead() {\n        return str[pos];\n      }\n\n      function current(value) {\n        return str.indexOf(value, pos) === pos;\n      }\n\n      function next(value) {\n        return str[pos + 1] === value;\n      }\n\n      function matchReg(regExp) {\n        var subStr = str.substring(pos);\n        var res = subStr.match(regExp);\n        if (res) {\n          res.range = [];\n          res.range[0] = pos;\n          incr(res[0].length);\n          res.range[1] = pos;\n        }\n        return res;\n      }\n\n      function parseDisjunction() {\n        // Disjunction ::\n        //      Alternative\n        //      Alternative | Disjunction\n        var res = [], from = pos;\n        res.push(parseAlternative());\n\n        while (match('|')) {\n          res.push(parseAlternative());\n        }\n\n        if (res.length === 1) {\n          return res[0];\n        }\n\n        return createDisjunction(res, from, pos);\n      }\n\n      function parseAlternative() {\n        var res = [], from = pos;\n        var term;\n\n        // Alternative ::\n        //      [empty]\n        //      Alternative Term\n        while (term = parseTerm()) {\n          res.push(term);\n        }\n\n        if (res.length === 1) {\n          return res[0];\n        }\n\n        return createAlternative(res, from, pos);\n      }\n\n      function parseTerm() {\n        // Term ::\n        //      Anchor\n        //      Atom\n        //      Atom Quantifier\n\n        if (pos >= str.length || current('|') || current(')')) {\n          return null; /* Means: The term is empty */\n        }\n\n        var anchor = parseAnchor();\n\n        if (anchor) {\n          return anchor;\n        }\n\n        var atom = parseAtom();\n        if (!atom) {\n          bail('Expected atom');\n        }\n        var quantifier = parseQuantifier() || false;\n        if (quantifier) {\n          quantifier.body = flattenBody(atom);\n          // The quantifier contains the atom. Therefore, the beginning of the\n          // quantifier range is given by the beginning of the atom.\n          updateRawStart(quantifier, atom.range[0]);\n          return quantifier;\n        }\n        return atom;\n      }\n\n      function parseGroup(matchA, typeA, matchB, typeB) {\n        var type = null, from = pos;\n\n        if (match(matchA)) {\n          type = typeA;\n        } else if (match(matchB)) {\n          type = typeB;\n        } else {\n          return false;\n        }\n\n        var body = parseDisjunction();\n        if (!body) {\n          bail('Expected disjunction');\n        }\n        skip(')');\n        var group = createGroup(type, flattenBody(body), from, pos);\n\n        if (type == 'normal') {\n          // Keep track of the number of closed groups. This is required for\n          // parseDecimalEscape(). In case the string is parsed a second time the\n          // value already holds the total count and no incrementation is required.\n          if (firstIteration) {\n            closedCaptureCounter++;\n          }\n        }\n        return group;\n      }\n\n      function parseAnchor() {\n        // Anchor ::\n        //      ^\n        //      $\n        //      \\ b\n        //      \\ B\n        //      ( ? = Disjunction )\n        //      ( ? ! Disjunction )\n        var res, from = pos;\n\n        if (match('^')) {\n          return createAnchor('start', 1 /* rawLength */);\n        } else if (match('$')) {\n          return createAnchor('end', 1 /* rawLength */);\n        } else if (match('\\\\b')) {\n          return createAnchor('boundary', 2 /* rawLength */);\n        } else if (match('\\\\B')) {\n          return createAnchor('not-boundary', 2 /* rawLength */);\n        } else {\n          return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');\n        }\n      }\n\n      function parseQuantifier() {\n        // Quantifier ::\n        //      QuantifierPrefix\n        //      QuantifierPrefix ?\n        //\n        // QuantifierPrefix ::\n        //      *\n        //      +\n        //      ?\n        //      { DecimalDigits }\n        //      { DecimalDigits , }\n        //      { DecimalDigits , DecimalDigits }\n\n        var res, from = pos;\n        var quantifier;\n        var min, max;\n\n        if (match('*')) {\n          quantifier = createQuantifier(0);\n        }\n        else if (match('+')) {\n          quantifier = createQuantifier(1);\n        }\n        else if (match('?')) {\n          quantifier = createQuantifier(0, 1);\n        }\n        else if (res = matchReg(/^\\{([0-9]+)\\}/)) {\n          min = parseInt(res[1], 10);\n          quantifier = createQuantifier(min, min, res.range[0], res.range[1]);\n        }\n        else if (res = matchReg(/^\\{([0-9]+),\\}/)) {\n          min = parseInt(res[1], 10);\n          quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);\n        }\n        else if (res = matchReg(/^\\{([0-9]+),([0-9]+)\\}/)) {\n          min = parseInt(res[1], 10);\n          max = parseInt(res[2], 10);\n          if (min > max) {\n            bail('numbers out of order in {} quantifier', '', from, pos);\n          }\n          quantifier = createQuantifier(min, max, res.range[0], res.range[1]);\n        }\n\n        if (quantifier) {\n          if (match('?')) {\n            quantifier.greedy = false;\n            quantifier.range[1] += 1;\n          }\n        }\n\n        return quantifier;\n      }\n\n      function parseAtom() {\n        // Atom ::\n        //      PatternCharacter\n        //      .\n        //      \\ AtomEscape\n        //      CharacterClass\n        //      ( Disjunction )\n        //      ( ? : Disjunction )\n\n        var res;\n\n        // jviereck: allow ']', '}' here as well to be compatible with browser's\n        //   implementations: ']'.match(/]/);\n        // if (res = matchReg(/^[^^$\\\\.*+?()[\\]{}|]/)) {\n        if (res = matchReg(/^[^^$\\\\.*+?(){[|]/)) {\n          //      PatternCharacter\n          return createCharacter(res);\n        }\n        else if (match('.')) {\n          //      .\n          return createDot();\n        }\n        else if (match('\\\\')) {\n          //      \\ AtomEscape\n          res = parseAtomEscape();\n          if (!res) {\n            bail('atomEscape');\n          }\n          return res;\n        }\n        else if (res = parseCharacterClass()) {\n          return res;\n        }\n        else {\n          //      ( Disjunction )\n          //      ( ? : Disjunction )\n          return parseGroup('(?:', 'ignore', '(', 'normal');\n        }\n      }\n\n      function parseUnicodeSurrogatePairEscape(firstEscape) {\n        if (hasUnicodeFlag) {\n          var first, second;\n          if (firstEscape.kind == 'unicodeEscape' &&\n            (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF &&\n            current('\\\\') && next('u') ) {\n            var prevPos = pos;\n            pos++;\n            var secondEscape = parseClassEscape();\n            if (secondEscape.kind == 'unicodeEscape' &&\n              (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {\n              // Unicode surrogate pair\n              firstEscape.range[1] = secondEscape.range[1];\n              firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n              firstEscape.type = 'value';\n              firstEscape.kind = 'unicodeCodePointEscape';\n              addRaw(firstEscape);\n            }\n            else {\n              pos = prevPos;\n            }\n          }\n        }\n        return firstEscape;\n      }\n\n      function parseClassEscape() {\n        return parseAtomEscape(true);\n      }\n\n      function parseAtomEscape(insideCharacterClass) {\n        // AtomEscape ::\n        //      DecimalEscape\n        //      CharacterEscape\n        //      CharacterClassEscape\n\n        var res, from = pos;\n\n        res = parseDecimalEscape();\n        if (res) {\n          return res;\n        }\n\n        // For ClassEscape\n        if (insideCharacterClass) {\n          if (match('b')) {\n            // 15.10.2.19\n            // The production ClassEscape :: b evaluates by returning the\n            // CharSet containing the one character <BS> (Unicode value 0008).\n            return createEscaped('singleEscape', 0x0008, '\\\\b');\n          } else if (match('B')) {\n            bail('\\\\B not possible inside of CharacterClass', '', from);\n          }\n        }\n\n        res = parseCharacterEscape();\n\n        return res;\n      }\n\n\n      function parseDecimalEscape() {\n        // DecimalEscape ::\n        //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n        //      CharacterClassEscape :: one of d D s S w W\n\n        var res, match;\n\n        if (res = matchReg(/^(?!0)\\d+/)) {\n          match = res[0];\n          var refIdx = parseInt(res[0], 10);\n          if (refIdx <= closedCaptureCounter) {\n            // If the number is smaller than the normal-groups found so\n            // far, then it is a reference...\n            return createReference(res[0]);\n          } else {\n            // ... otherwise it needs to be interpreted as a octal (if the\n            // number is in an octal format). If it is NOT octal format,\n            // then the slash is ignored and the number is matched later\n            // as normal characters.\n\n            // Recall the negative decision to decide if the input must be parsed\n            // a second time with the total normal-groups.\n            backrefDenied.push(refIdx);\n\n            // Reset the position again, as maybe only parts of the previous\n            // matched numbers are actual octal numbers. E.g. in '019' only\n            // the '01' should be matched.\n            incr(-res[0].length);\n            if (res = matchReg(/^[0-7]{1,3}/)) {\n              return createEscaped('octal', parseInt(res[0], 8), res[0], 1);\n            } else {\n              // If we end up here, we have a case like /\\91/. Then the\n              // first slash is to be ignored and the 9 & 1 to be treated\n              // like ordinary characters. Create a character for the\n              // first number only here - other number-characters\n              // (if available) will be matched later.\n              res = createCharacter(matchReg(/^[89]/));\n              return updateRawStart(res, res.range[0] - 1);\n            }\n          }\n        }\n        // Only allow octal numbers in the following. All matched numbers start\n        // with a zero (if the do not, the previous if-branch is executed).\n        // If the number is not octal format and starts with zero (e.g. `091`)\n        // then only the zeros `0` is treated here and the `91` are ordinary\n        // characters.\n        // Example:\n        //   /\\091/.exec('\\091')[0].length === 3\n        else if (res = matchReg(/^[0-7]{1,3}/)) {\n          match = res[0];\n          if (/^0{1,3}$/.test(match)) {\n            // If they are all zeros, then only take the first one.\n            return createEscaped('null', 0x0000, '0', match.length + 1);\n          } else {\n            return createEscaped('octal', parseInt(match, 8), match, 1);\n          }\n        } else if (res = matchReg(/^[dDsSwW]/)) {\n          return createCharacterClassEscape(res[0]);\n        }\n        return false;\n      }\n\n      function parseCharacterEscape() {\n        // CharacterEscape ::\n        //      ControlEscape\n        //      c ControlLetter\n        //      HexEscapeSequence\n        //      UnicodeEscapeSequence\n        //      IdentityEscape\n\n        var res;\n        if (res = matchReg(/^[fnrtv]/)) {\n          // ControlEscape\n          var codePoint = 0;\n          switch (res[0]) {\n            case 't': codePoint = 0x009; break;\n            case 'n': codePoint = 0x00A; break;\n            case 'v': codePoint = 0x00B; break;\n            case 'f': codePoint = 0x00C; break;\n            case 'r': codePoint = 0x00D; break;\n          }\n          return createEscaped('singleEscape', codePoint, '\\\\' + res[0]);\n        } else if (res = matchReg(/^c([a-zA-Z])/)) {\n          // c ControlLetter\n          return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);\n        } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {\n          // HexEscapeSequence\n          return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);\n        } else if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {\n          // UnicodeEscapeSequence\n          return parseUnicodeSurrogatePairEscape(\n            createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2)\n          );\n        } else if (hasUnicodeFlag && (res = matchReg(/^u\\{([0-9a-fA-F]+)\\}/))) {\n          // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)\n          return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);\n        } else {\n          // IdentityEscape\n          return parseIdentityEscape();\n        }\n      }\n\n      // Taken from the Esprima parser.\n      function isIdentifierPart(ch) {\n        // Generated by `tools/generate-identifier-regex.js`.\n        var NonAsciiIdentifierPart = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]');\n\n        return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)\n          (ch >= 65 && ch <= 90) ||         // A..Z\n          (ch >= 97 && ch <= 122) ||        // a..z\n          (ch >= 48 && ch <= 57) ||         // 0..9\n          (ch === 92) ||                    // \\ (backslash)\n          ((ch >= 0x80) && NonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n      }\n\n      function parseIdentityEscape() {\n        // IdentityEscape ::\n        //      SourceCharacter but not IdentifierPart\n        //      <ZWJ>\n        //      <ZWNJ>\n\n        var ZWJ = '\\u200C';\n        var ZWNJ = '\\u200D';\n\n        var tmp;\n\n        if (!isIdentifierPart(lookahead())) {\n          tmp = incr();\n          return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);\n        }\n\n        if (match(ZWJ)) {\n          // <ZWJ>\n          return createEscaped('identifier', 0x200C, ZWJ);\n        } else if (match(ZWNJ)) {\n          // <ZWNJ>\n          return createEscaped('identifier', 0x200D, ZWNJ);\n        }\n\n        return null;\n      }\n\n      function parseCharacterClass() {\n        // CharacterClass ::\n        //      [ [lookahead ∉ {^}] ClassRanges ]\n        //      [ ^ ClassRanges ]\n\n        var res, from = pos;\n        if (res = matchReg(/^\\[\\^/)) {\n          res = parseClassRanges();\n          skip(']');\n          return createCharacterClass(res, true, from, pos);\n        } else if (match('[')) {\n          res = parseClassRanges();\n          skip(']');\n          return createCharacterClass(res, false, from, pos);\n        }\n\n        return null;\n      }\n\n      function parseClassRanges() {\n        // ClassRanges ::\n        //      [empty]\n        //      NonemptyClassRanges\n\n        var res;\n        if (current(']')) {\n          // Empty array means nothing insinde of the ClassRange.\n          return [];\n        } else {\n          res = parseNonemptyClassRanges();\n          if (!res) {\n            bail('nonEmptyClassRanges');\n          }\n          return res;\n        }\n      }\n\n      function parseHelperClassRanges(atom) {\n        var from, to, res;\n        if (current('-') && !next(']')) {\n          // ClassAtom - ClassAtom ClassRanges\n          skip('-');\n\n          res = parseClassAtom();\n          if (!res) {\n            bail('classAtom');\n          }\n          to = pos;\n          var classRanges = parseClassRanges();\n          if (!classRanges) {\n            bail('classRanges');\n          }\n          from = atom.range[0];\n          if (classRanges.type === 'empty') {\n            return [createClassRange(atom, res, from, to)];\n          }\n          return [createClassRange(atom, res, from, to)].concat(classRanges);\n        }\n\n        res = parseNonemptyClassRangesNoDash();\n        if (!res) {\n          bail('nonEmptyClassRangesNoDash');\n        }\n\n        return [atom].concat(res);\n      }\n\n      function parseNonemptyClassRanges() {\n        // NonemptyClassRanges ::\n        //      ClassAtom\n        //      ClassAtom NonemptyClassRangesNoDash\n        //      ClassAtom - ClassAtom ClassRanges\n\n        var atom = parseClassAtom();\n        if (!atom) {\n          bail('classAtom');\n        }\n\n        if (current(']')) {\n          // ClassAtom\n          return [atom];\n        }\n\n        // ClassAtom NonemptyClassRangesNoDash\n        // ClassAtom - ClassAtom ClassRanges\n        return parseHelperClassRanges(atom);\n      }\n\n      function parseNonemptyClassRangesNoDash() {\n        // NonemptyClassRangesNoDash ::\n        //      ClassAtom\n        //      ClassAtomNoDash NonemptyClassRangesNoDash\n        //      ClassAtomNoDash - ClassAtom ClassRanges\n\n        var res = parseClassAtom();\n        if (!res) {\n          bail('classAtom');\n        }\n        if (current(']')) {\n          //      ClassAtom\n          return res;\n        }\n\n        // ClassAtomNoDash NonemptyClassRangesNoDash\n        // ClassAtomNoDash - ClassAtom ClassRanges\n        return parseHelperClassRanges(res);\n      }\n\n      function parseClassAtom() {\n        // ClassAtom ::\n        //      -\n        //      ClassAtomNoDash\n        if (match('-')) {\n          return createCharacter('-');\n        } else {\n          return parseClassAtomNoDash();\n        }\n      }\n\n      function parseClassAtomNoDash() {\n        // ClassAtomNoDash ::\n        //      SourceCharacter but not one of \\ or ] or -\n        //      \\ ClassEscape\n\n        var res;\n        if (res = matchReg(/^[^\\\\\\]-]/)) {\n          return createCharacter(res[0]);\n        } else if (match('\\\\')) {\n          res = parseClassEscape();\n          if (!res) {\n            bail('classEscape');\n          }\n\n          return parseUnicodeSurrogatePairEscape(res);\n        }\n      }\n\n      function bail(message, details, from, to) {\n        from = from == null ? pos : from;\n        to = to == null ? from : to;\n\n        var contextStart = Math.max(0, from - 10);\n        var contextEnd = Math.min(to + 10, str.length);\n\n        // Output a bit of context and a line pointing to where our error is.\n        //\n        // We are assuming that there are no actual newlines in the content as this is a regular expression.\n        var context = '    ' + str.substring(contextStart, contextEnd);\n        var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';\n\n        throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\\n' + context + '\\n' + pointer);\n      }\n\n      var backrefDenied = [];\n      var closedCaptureCounter = 0;\n      var firstIteration = true;\n      var hasUnicodeFlag = (flags || \"\").indexOf(\"u\") !== -1;\n      var pos = 0;\n\n      // Convert the input to a string and treat the empty string special.\n      str = String(str);\n      if (str === '') {\n        str = '(?:)';\n      }\n\n      var result = parseDisjunction();\n\n      if (result.range[1] !== str.length) {\n        bail('Could not parse entire input - got stuck', '', result.range[1]);\n      }\n\n      // The spec requires to interpret the `\\2` in `/\\2()()/` as backreference.\n      // As the parser collects the number of capture groups as the string is\n      // parsed it is impossible to make these decisions at the point when the\n      // `\\2` is handled. In case the local decision turns out to be wrong after\n      // the parsing has finished, the input string is parsed a second time with\n      // the total number of capture groups set.\n      //\n      // SEE: https://github.com/jviereck/regjsparser/issues/70\n      for (var i = 0; i < backrefDenied.length; i++) {\n        if (backrefDenied[i] <= closedCaptureCounter) {\n          // Parse the input a second time.\n          pos = 0;\n          firstIteration = false;\n          return parseDisjunction();\n        }\n      }\n\n      return result;\n    }\n\n    var regjsparser = {\n      parse: parse\n    };\n\n    if (typeof module !== 'undefined' && module.exports) {\n      module.exports = regjsparser;\n    } else {\n      window.regjsparser = regjsparser;\n    }\n\n  }());\n  });\n\n  var require$$3 = (parser && typeof parser === 'object' && 'default' in parser ? parser['default'] : parser);\n\n  var regjsgen = __commonjs(function (module, exports, global) {\n  /*!\n   * RegJSGen\n   * Copyright 2014 Benjamin Tan <https://d10.github.io/>\n   * Available under MIT license <http://d10.mit-license.org/>\n   */\n  ;(function() {\n    'use strict';\n\n    /** Used to determine if values are of the language type `Object` */\n    var objectTypes = {\n      'function': true,\n      'object': true\n    };\n\n    /** Used as a reference to the global object */\n    var root = (objectTypes[typeof window] && window) || this;\n\n    /** Backup possible global object */\n    var oldRoot = root;\n\n    /** Detect free variable `exports` */\n    var freeExports = objectTypes[typeof exports] && exports;\n\n    /** Detect free variable `module` */\n    var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n    /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */\n    var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n      root = freeGlobal;\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    /*! Based on https://mths.be/fromcodepoint v0.2.0 by @mathias */\n\n    var stringFromCharCode = String.fromCharCode;\n    var floor = Math.floor;\n    function fromCodePoint() {\n      var MAX_SIZE = 0x4000;\n      var codeUnits = [];\n      var highSurrogate;\n      var lowSurrogate;\n      var index = -1;\n      var length = arguments.length;\n      if (!length) {\n        return '';\n      }\n      var result = '';\n      while (++index < length) {\n        var codePoint = Number(arguments[index]);\n        if (\n          !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n          codePoint < 0 || // not a valid Unicode code point\n          codePoint > 0x10FFFF || // not a valid Unicode code point\n          floor(codePoint) != codePoint // not an integer\n        ) {\n          throw RangeError('Invalid code point: ' + codePoint);\n        }\n        if (codePoint <= 0xFFFF) {\n          // BMP code point\n          codeUnits.push(codePoint);\n        } else {\n          // Astral code point; split in surrogate halves\n          // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n          codePoint -= 0x10000;\n          highSurrogate = (codePoint >> 10) + 0xD800;\n          lowSurrogate = (codePoint % 0x400) + 0xDC00;\n          codeUnits.push(highSurrogate, lowSurrogate);\n        }\n        if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n          result += stringFromCharCode.apply(null, codeUnits);\n          codeUnits.length = 0;\n        }\n      }\n      return result;\n    }\n\n    function assertType(type, expected) {\n      if (expected.indexOf('|') == -1) {\n        if (type == expected) {\n          return;\n        }\n\n        throw Error('Invalid node type: ' + type);\n      }\n\n      expected = assertType.hasOwnProperty(expected)\n        ? assertType[expected]\n        : (assertType[expected] = RegExp('^(?:' + expected + ')$'));\n\n      if (expected.test(type)) {\n        return;\n      }\n\n      throw Error('Invalid node type: ' + type);\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    function generate(node) {\n      var type = node.type;\n\n      if (generate.hasOwnProperty(type) && typeof generate[type] == 'function') {\n        return generate[type](node);\n      }\n\n      throw Error('Invalid node type: ' + type);\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    function generateAlternative(node) {\n      assertType(node.type, 'alternative');\n\n      var terms = node.body,\n          length = terms ? terms.length : 0;\n\n      if (length == 1) {\n        return generateTerm(terms[0]);\n      } else {\n        var i = -1,\n            result = '';\n\n        while (++i < length) {\n          result += generateTerm(terms[i]);\n        }\n\n        return result;\n      }\n    }\n\n    function generateAnchor(node) {\n      assertType(node.type, 'anchor');\n\n      switch (node.kind) {\n        case 'start':\n          return '^';\n        case 'end':\n          return '$';\n        case 'boundary':\n          return '\\\\b';\n        case 'not-boundary':\n          return '\\\\B';\n        default:\n          throw Error('Invalid assertion');\n      }\n    }\n\n    function generateAtom(node) {\n      assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');\n\n      return generate(node);\n    }\n\n    function generateCharacterClass(node) {\n      assertType(node.type, 'characterClass');\n\n      var classRanges = node.body,\n          length = classRanges ? classRanges.length : 0;\n\n      var i = -1,\n          result = '[';\n\n      if (node.negative) {\n        result += '^';\n      }\n\n      while (++i < length) {\n        result += generateClassAtom(classRanges[i]);\n      }\n\n      result += ']';\n\n      return result;\n    }\n\n    function generateCharacterClassEscape(node) {\n      assertType(node.type, 'characterClassEscape');\n\n      return '\\\\' + node.value;\n    }\n\n    function generateCharacterClassRange(node) {\n      assertType(node.type, 'characterClassRange');\n\n      var min = node.min,\n          max = node.max;\n\n      if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {\n        throw Error('Invalid character class range');\n      }\n\n      return generateClassAtom(min) + '-' + generateClassAtom(max);\n    }\n\n    function generateClassAtom(node) {\n      assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');\n\n      return generate(node);\n    }\n\n    function generateDisjunction(node) {\n      assertType(node.type, 'disjunction');\n\n      var body = node.body,\n          length = body ? body.length : 0;\n\n      if (length == 0) {\n        throw Error('No body');\n      } else if (length == 1) {\n        return generate(body[0]);\n      } else {\n        var i = -1,\n            result = '';\n\n        while (++i < length) {\n          if (i != 0) {\n            result += '|';\n          }\n          result += generate(body[i]);\n        }\n\n        return result;\n      }\n    }\n\n    function generateDot(node) {\n      assertType(node.type, 'dot');\n\n      return '.';\n    }\n\n    function generateGroup(node) {\n      assertType(node.type, 'group');\n\n      var result = '(';\n\n      switch (node.behavior) {\n        case 'normal':\n          break;\n        case 'ignore':\n          result += '?:';\n          break;\n        case 'lookahead':\n          result += '?=';\n          break;\n        case 'negativeLookahead':\n          result += '?!';\n          break;\n        default:\n          throw Error('Invalid behaviour: ' + node.behaviour);\n      }\n\n      var body = node.body,\n          length = body ? body.length : 0;\n\n      if (length == 1) {\n        result += generate(body[0]);\n      } else {\n        var i = -1;\n\n        while (++i < length) {\n          result += generate(body[i]);\n        }\n      }\n\n      result += ')';\n\n      return result;\n    }\n\n    function generateQuantifier(node) {\n      assertType(node.type, 'quantifier');\n\n      var quantifier = '',\n          min = node.min,\n          max = node.max;\n\n      switch (max) {\n        case undefined:\n        case null:\n          switch (min) {\n            case 0:\n              quantifier = '*'\n              break;\n            case 1:\n              quantifier = '+';\n              break;\n            default:\n              quantifier = '{' + min + ',}';\n              break;\n          }\n          break;\n        default:\n          if (min == max) {\n            quantifier = '{' + min + '}';\n          }\n          else if (min == 0 && max == 1) {\n            quantifier = '?';\n          } else {\n            quantifier = '{' + min + ',' + max + '}';\n          }\n          break;\n      }\n\n      if (!node.greedy) {\n        quantifier += '?';\n      }\n\n      return generateAtom(node.body[0]) + quantifier;\n    }\n\n    function generateReference(node) {\n      assertType(node.type, 'reference');\n\n      return '\\\\' + node.matchIndex;\n    }\n\n    function generateTerm(node) {\n      assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value');\n\n      return generate(node);\n    }\n\n    function generateValue(node) {\n      assertType(node.type, 'value');\n\n      var kind = node.kind,\n          codePoint = node.codePoint;\n\n      switch (kind) {\n        case 'controlLetter':\n          return '\\\\c' + fromCodePoint(codePoint + 64);\n        case 'hexadecimalEscape':\n          return '\\\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);\n        case 'identifier':\n          return '\\\\' + fromCodePoint(codePoint);\n        case 'null':\n          return '\\\\' + codePoint;\n        case 'octal':\n          return '\\\\' + codePoint.toString(8);\n        case 'singleEscape':\n          switch (codePoint) {\n            case 0x0008:\n              return '\\\\b';\n            case 0x009:\n              return '\\\\t';\n            case 0x00A:\n              return '\\\\n';\n            case 0x00B:\n              return '\\\\v';\n            case 0x00C:\n              return '\\\\f';\n            case 0x00D:\n              return '\\\\r';\n            default:\n              throw Error('Invalid codepoint: ' + codePoint);\n          }\n        case 'symbol':\n          return fromCodePoint(codePoint);\n        case 'unicodeEscape':\n          return '\\\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);\n        case 'unicodeCodePointEscape':\n          return '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n        default:\n          throw Error('Unsupported node kind: ' + kind);\n      }\n    }\n\n    /*--------------------------------------------------------------------------*/\n\n    generate.alternative = generateAlternative;\n    generate.anchor = generateAnchor;\n    generate.characterClass = generateCharacterClass;\n    generate.characterClassEscape = generateCharacterClassEscape;\n    generate.characterClassRange = generateCharacterClassRange;\n    generate.disjunction = generateDisjunction;\n    generate.dot = generateDot;\n    generate.group = generateGroup;\n    generate.quantifier = generateQuantifier;\n    generate.reference = generateReference;\n    generate.value = generateValue;\n\n    /*--------------------------------------------------------------------------*/\n\n    // export regjsgen\n    // some AMD build optimizers, like r.js, check for condition patterns like the following:\n    if (true) {\n      // define as an anonymous module so, through path mapping, it can be aliased\n      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n        return {\n          'generate': generate\n        };\n      }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n    // check for `exports` after `define` in case a build optimizer adds an `exports` object\n    else if (freeExports && freeModule) {\n      // in Narwhal, Node.js, Rhino -require, or RingoJS\n      freeExports.generate = generate;\n    }\n    // in a browser or Rhino\n    else {\n      root.regjsgen = {\n        'generate': generate\n      };\n    }\n  }.call(__commonjs_global));\n  });\n\n  var require$$4 = (regjsgen && typeof regjsgen === 'object' && 'default' in regjsgen ? regjsgen['default'] : regjsgen);\n\n  var rewritePattern = __commonjs(function (module) {\n  var generate = require$$4.generate;\n  var parse = require$$3.parse;\n  var regenerate = require$$0$2;\n  var iuMappings = require$$1;\n  var ESCAPE_SETS = require$$0$1;\n\n  function getCharacterClassEscapeSet(character) {\n  \tif (unicode) {\n  \t\tif (ignoreCase) {\n  \t\t\treturn ESCAPE_SETS.UNICODE_IGNORE_CASE[character];\n  \t\t}\n  \t\treturn ESCAPE_SETS.UNICODE[character];\n  \t}\n  \treturn ESCAPE_SETS.REGULAR[character];\n  }\n\n  var object = {};\n  var hasOwnProperty = object.hasOwnProperty;\n  function has(object, property) {\n  \treturn hasOwnProperty.call(object, property);\n  }\n\n  // Prepare a Regenerate set containing all code points, used for negative\n  // character classes (if any).\n  var UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF);\n  // Without the `u` flag, the range stops at 0xFFFF.\n  // https://mths.be/es6#sec-pattern-semantics\n  var BMP_SET = regenerate().addRange(0x0, 0xFFFF);\n\n  // Prepare a Regenerate set containing all code points that are supposed to be\n  // matched by `/./u`. https://mths.be/es6#sec-atom\n  var DOT_SET_UNICODE = UNICODE_SET.clone() // all Unicode code points\n  \t.remove(\n  \t\t// minus `LineTerminator`s (https://mths.be/es6#sec-line-terminators):\n  \t\t0x000A, // Line Feed <LF>\n  \t\t0x000D, // Carriage Return <CR>\n  \t\t0x2028, // Line Separator <LS>\n  \t\t0x2029  // Paragraph Separator <PS>\n  \t);\n  // Prepare a Regenerate set containing all code points that are supposed to be\n  // matched by `/./` (only BMP code points).\n  var DOT_SET = DOT_SET_UNICODE.clone()\n  \t.intersection(BMP_SET);\n\n  // Add a range of code points + any case-folded code points in that range to a\n  // set.\n  regenerate.prototype.iuAddRange = function(min, max) {\n  \tvar $this = this;\n  \tdo {\n  \t\tvar folded = caseFold(min);\n  \t\tif (folded) {\n  \t\t\t$this.add(folded);\n  \t\t}\n  \t} while (++min <= max);\n  \treturn $this;\n  };\n\n  function assign(target, source) {\n  \tfor (var key in source) {\n  \t\t// Note: `hasOwnProperty` is not needed here.\n  \t\ttarget[key] = source[key];\n  \t}\n  }\n\n  function update(item, pattern) {\n  \t// TODO: Test if memoizing `pattern` here is worth the effort.\n  \tif (!pattern) {\n  \t\treturn;\n  \t}\n  \tvar tree = parse(pattern, '');\n  \tswitch (tree.type) {\n  \t\tcase 'characterClass':\n  \t\tcase 'group':\n  \t\tcase 'value':\n  \t\t\t// No wrapping needed.\n  \t\t\tbreak;\n  \t\tdefault:\n  \t\t\t// Wrap the pattern in a non-capturing group.\n  \t\t\ttree = wrap(tree, pattern);\n  \t}\n  \tassign(item, tree);\n  }\n\n  function wrap(tree, pattern) {\n  \t// Wrap the pattern in a non-capturing group.\n  \treturn {\n  \t\t'type': 'group',\n  \t\t'behavior': 'ignore',\n  \t\t'body': [tree],\n  \t\t'raw': '(?:' + pattern + ')'\n  \t};\n  }\n\n  function caseFold(codePoint) {\n  \treturn has(iuMappings, codePoint) ? iuMappings[codePoint] : false;\n  }\n\n  var ignoreCase = false;\n  var unicode = false;\n  function processCharacterClass(characterClassItem) {\n  \tvar set = regenerate();\n  \tvar body = characterClassItem.body.forEach(function(item) {\n  \t\tswitch (item.type) {\n  \t\t\tcase 'value':\n  \t\t\t\tset.add(item.codePoint);\n  \t\t\t\tif (ignoreCase && unicode) {\n  \t\t\t\t\tvar folded = caseFold(item.codePoint);\n  \t\t\t\t\tif (folded) {\n  \t\t\t\t\t\tset.add(folded);\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t\tbreak;\n  \t\t\tcase 'characterClassRange':\n  \t\t\t\tvar min = item.min.codePoint;\n  \t\t\t\tvar max = item.max.codePoint;\n  \t\t\t\tset.addRange(min, max);\n  \t\t\t\tif (ignoreCase && unicode) {\n  \t\t\t\t\tset.iuAddRange(min, max);\n  \t\t\t\t}\n  \t\t\t\tbreak;\n  \t\t\tcase 'characterClassEscape':\n  \t\t\t\tset.add(getCharacterClassEscapeSet(item.value));\n  \t\t\t\tbreak;\n  \t\t\t// The `default` clause is only here as a safeguard; it should never be\n  \t\t\t// reached. Code coverage tools should ignore it.\n  \t\t\t/* istanbul ignore next */\n  \t\t\tdefault:\n  \t\t\t\tthrow Error('Unknown term type: ' + item.type);\n  \t\t}\n  \t});\n  \tif (characterClassItem.negative) {\n  \t\tset = (unicode ? UNICODE_SET : BMP_SET).clone().remove(set);\n  \t}\n  \tupdate(characterClassItem, set.toString());\n  \treturn characterClassItem;\n  }\n\n  function processTerm(item) {\n  \tswitch (item.type) {\n  \t\tcase 'dot':\n  \t\t\tupdate(\n  \t\t\t\titem,\n  \t\t\t\t(unicode ? DOT_SET_UNICODE : DOT_SET).toString()\n  \t\t\t);\n  \t\t\tbreak;\n  \t\tcase 'characterClass':\n  \t\t\titem = processCharacterClass(item);\n  \t\t\tbreak;\n  \t\tcase 'characterClassEscape':\n  \t\t\tupdate(\n  \t\t\t\titem,\n  \t\t\t\tgetCharacterClassEscapeSet(item.value).toString()\n  \t\t\t);\n  \t\t\tbreak;\n  \t\tcase 'alternative':\n  \t\tcase 'disjunction':\n  \t\tcase 'group':\n  \t\tcase 'quantifier':\n  \t\t\titem.body = item.body.map(processTerm);\n  \t\t\tbreak;\n  \t\tcase 'value':\n  \t\t\tvar codePoint = item.codePoint;\n  \t\t\tvar set = regenerate(codePoint);\n  \t\t\tif (ignoreCase && unicode) {\n  \t\t\t\tvar folded = caseFold(codePoint);\n  \t\t\t\tif (folded) {\n  \t\t\t\t\tset.add(folded);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\tupdate(item, set.toString());\n  \t\t\tbreak;\n  \t\tcase 'anchor':\n  \t\tcase 'empty':\n  \t\tcase 'group':\n  \t\tcase 'reference':\n  \t\t\t// Nothing to do here.\n  \t\t\tbreak;\n  \t\t// The `default` clause is only here as a safeguard; it should never be\n  \t\t// reached. Code coverage tools should ignore it.\n  \t\t/* istanbul ignore next */\n  \t\tdefault:\n  \t\t\tthrow Error('Unknown term type: ' + item.type);\n  \t}\n  \treturn item;\n  };\n\n  module.exports = function(pattern, flags) {\n  \tvar tree = parse(pattern, flags);\n  \tignoreCase = flags ? flags.indexOf('i') > -1 : false;\n  \tunicode = flags ? flags.indexOf('u') > -1 : false;\n  \tassign(tree, processTerm(tree));\n  \treturn generate(tree);\n  };\n  });\n\n  var rewritePattern$1 = (rewritePattern && typeof rewritePattern === 'object' && 'default' in rewritePattern ? rewritePattern['default'] : rewritePattern);\n\n  var Literal = (function (Node) {\n  \tfunction Literal () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) Literal.__proto__ = Node;\n  \tLiteral.prototype = Object.create( Node && Node.prototype );\n  \tLiteral.prototype.constructor = Literal;\n\n  \tLiteral.prototype.initialise = function initialise () {\n  \t\tif ( typeof this.value === 'string' ) {\n  \t\t\tthis.program.indentExclusionElements.push( this );\n  \t\t}\n  \t};\n\n  \tLiteral.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( transforms.numericLiteral ) {\n  \t\t\tvar leading = this.raw.slice( 0, 2 );\n  \t\t\tif ( leading === '0b' || leading === '0o' ) {\n  \t\t\t\tcode.overwrite( this.start, this.end, String( this.value ), true );\n  \t\t\t}\n  \t\t}\n\n  \t\tif ( this.regex ) {\n  \t\t\tvar ref = this.regex;\n  \t\t\tvar pattern = ref.pattern;\n  \t\t\tvar flags = ref.flags;\n\n  \t\t\tif ( transforms.stickyRegExp && /y/.test( flags ) ) throw new CompileError( this, 'Regular expression sticky flag is not supported' );\n  \t\t\tif ( transforms.unicodeRegExp && /u/.test( flags ) ) {\n  \t\t\t\tcode.overwrite( this.start, this.end, (\"/\" + (rewritePattern$1( pattern, flags )) + \"/\" + (flags.replace( 'u', '' ))) );\n  \t\t\t}\n  \t\t}\n  \t};\n\n  \treturn Literal;\n  }(Node));\n\n  var MemberExpression = (function (Node) {\n  \tfunction MemberExpression () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) MemberExpression.__proto__ = Node;\n  \tMemberExpression.prototype = Object.create( Node && Node.prototype );\n  \tMemberExpression.prototype.constructor = MemberExpression;\n\n  \tMemberExpression.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( transforms.reservedProperties && reserved[ this.property.name ] ) {\n  \t\t\tcode.overwrite( this.object.end, this.property.start, \"['\" );\n  \t\t\tcode.insertLeft( this.property.end, \"']\" );\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn MemberExpression;\n  }(Node));\n\n  var NewExpression = (function (Node) {\n  \tfunction NewExpression () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) NewExpression.__proto__ = Node;\n  \tNewExpression.prototype = Object.create( Node && Node.prototype );\n  \tNewExpression.prototype.constructor = NewExpression;\n\n  \tNewExpression.prototype.initialise = function initialise ( transforms ) {\n  \t\tvar this$1 = this;\n\n  \t\tif ( transforms.spreadRest && this.arguments.length ) {\n  \t\t\tvar lexicalBoundary = this.findLexicalBoundary();\n\n  \t\t\tvar i = this.arguments.length;\n  \t\t\twhile ( i-- ) {\n  \t\t\t\tvar arg = this$1.arguments[i];\n  \t\t\t\tif ( arg.type === 'SpreadElement' && isArguments( arg.argument ) ) {\n  \t\t\t\t\tthis$1.argumentsArrayAlias = lexicalBoundary.getArgumentsArrayAlias();\n  \t\t\t\t\tbreak;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \tNewExpression.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( transforms.spreadRest && this.arguments.length ) {\n  \t\t\tvar firstArgument = this.arguments[0];\n  \t\t\tvar isNew = true;\n  \t\t\tvar hasSpreadElements = spread( code, this.arguments, firstArgument.start, this.argumentsArrayAlias, isNew );\n\n  \t\t\tif ( hasSpreadElements ) {\n  \t\t\t\tcode.insertRight( this.start + 'new'.length, ' (Function.prototype.bind.apply(' );\n  \t\t\t\tcode.overwrite( this.callee.end, firstArgument.start, ', [ null ].concat( ' );\n  \t\t\t\tcode.insertLeft( this.end, ' ))' );\n  \t\t\t}\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn NewExpression;\n  }(Node));\n\n  var ObjectExpression = (function (Node) {\n  \tfunction ObjectExpression () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) ObjectExpression.__proto__ = Node;\n  \tObjectExpression.prototype = Object.create( Node && Node.prototype );\n  \tObjectExpression.prototype.constructor = ObjectExpression;\n\n  \tObjectExpression.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tvar this$1 = this;\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n\n  \t\tvar firstPropertyStart = this.start + 1;\n  \t\tvar regularPropertyCount = 0;\n  \t\tvar spreadPropertyCount = 0;\n  \t\tvar computedPropertyCount = 0;\n\n  \t\tfor ( var i$2 = 0, list = this.properties; i$2 < list.length; i$2 += 1 ) {\n  \t\t\tvar prop = list[i$2];\n\n  \t\t\tif ( prop.type === 'SpreadProperty' ) {\n  \t\t\t\tspreadPropertyCount += 1;\n  \t\t\t} else if ( prop.computed ) {\n  \t\t\t\tcomputedPropertyCount += 1;\n  \t\t\t} else if ( prop.type === 'Property' ) {\n  \t\t\t\tregularPropertyCount += 1;\n  \t\t\t}\n  \t\t}\n\n  \t\tif ( spreadPropertyCount ) {\n  \t\t\tif ( !this.program.options.objectAssign ) {\n  \t\t\t\tthrow new CompileError( this, 'Object spread operator requires specified objectAssign option with \\'Object.assign\\' or polyfill helper.' );\n  \t\t\t}\n  \t\t\t// enclose run of non-spread properties in curlies\n  \t\t\tvar i = this.properties.length;\n  \t\t\tif ( regularPropertyCount ) {\n  \t\t\t\twhile ( i-- ) {\n  \t\t\t\t\tvar prop$1 = this$1.properties[i];\n\n  \t\t\t\t\tif ( prop$1.type === 'Property' && !prop$1.computed ) {\n  \t\t\t\t\t\tvar lastProp = this$1.properties[ i - 1 ];\n  \t\t\t\t\t\tvar nextProp = this$1.properties[ i + 1 ];\n\n  \t\t\t\t\t\tif ( !lastProp || lastProp.type !== 'Property' || lastProp.computed ) {\n  \t\t\t\t\t\t\tcode.insertRight( prop$1.start, '{' );\n  \t\t\t\t\t\t}\n\n  \t\t\t\t\t\tif ( !nextProp || nextProp.type !== 'Property' || nextProp.computed ) {\n  \t\t\t\t\t\t\tcode.insertLeft( prop$1.end, '}' );\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\t// wrap the whole thing in Object.assign\n  \t\t\tfirstPropertyStart = this.properties[0].start;\n  \t\t\tcode.overwrite( this.start, firstPropertyStart, ((this.program.options.objectAssign) + \"({}, \"));\n  \t\t\tcode.overwrite( this.properties[ this.properties.length - 1 ].end, this.end, ')' );\n  \t\t}\n\n  \t\tif ( computedPropertyCount && transforms.computedProperty ) {\n  \t\t\tvar i0 = this.getIndentation();\n\n  \t\t\tvar isSimpleAssignment;\n  \t\t\tvar name;\n\n  \t\t\tif ( this.parent.type === 'VariableDeclarator' && this.parent.parent.declarations.length === 1 ) {\n  \t\t\t\tisSimpleAssignment = true;\n  \t\t\t\tname = this.parent.id.alias || this.parent.id.name; // TODO is this right?\n  \t\t\t} else if ( this.parent.type === 'AssignmentExpression' && this.parent.parent.type === 'ExpressionStatement' && this.parent.left.type === 'Identifier' ) {\n  \t\t\t\tisSimpleAssignment = true;\n  \t\t\t\tname = this.parent.left.alias || this.parent.left.name; // TODO is this right?\n  \t\t\t} else if ( this.parent.type === 'AssignmentPattern' && this.parent.left.type === 'Identifier' ) {\n  \t\t\t\tisSimpleAssignment = true;\n  \t\t\t\tname = this.parent.left.alias || this.parent.left.name; // TODO is this right?\n  \t\t\t}\n\n  \t\t\t// handle block scoping\n  \t\t\tvar declaration = this.findScope( false ).findDeclaration( name );\n  \t\t\tif ( declaration ) name = declaration.name;\n\n  \t\t\tvar start = firstPropertyStart;\n  \t\t\tvar end = this.end;\n\n  \t\t\tif ( isSimpleAssignment ) {\n  \t\t\t\t// ???\n  \t\t\t} else {\n  \t\t\t\tname = this.findScope( true ).createIdentifier( 'obj' );\n\n  \t\t\t\tvar statement = this.findNearest( /(?:Statement|Declaration)$/ );\n  \t\t\t\tcode.insertLeft( statement.end, (\"\\n\" + i0 + \"var \" + name + \";\") );\n\n  \t\t\t\tcode.insertRight( this.start, (\"( \" + name + \" = \") );\n  \t\t\t}\n\n  \t\t\tvar len = this.properties.length;\n  \t\t\tvar lastComputedProp;\n  \t\t\tvar sawNonComputedProperty = false;\n\n  \t\t\tfor ( var i$1 = 0; i$1 < len; i$1 += 1 ) {\n  \t\t\t\tvar prop$2 = this$1.properties[i$1];\n\n  \t\t\t\tif ( prop$2.computed ) {\n  \t\t\t\t\tlastComputedProp = prop$2;\n  \t\t\t\t\tvar moveStart = i$1 > 0 ? this$1.properties[ i$1 - 1 ].end : start;\n\n  \t\t\t\t\tvar propId = isSimpleAssignment ? (\";\\n\" + i0 + name) : (\", \" + name);\n\n  \t\t\t\t\tif (moveStart < prop$2.start) {\n  \t\t\t\t\t\tcode.overwrite( moveStart, prop$2.start, propId );\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tcode.insertRight( prop$2.start, propId );\n  \t\t\t\t\t}\n\n  \t\t\t\t\tvar c = prop$2.key.end;\n  \t\t\t\t\twhile ( code.original[c] !== ']' ) c += 1;\n  \t\t\t\t\tc += 1;\n\n  \t\t\t\t\tif ( prop$2.value.start > c ) code.remove( c, prop$2.value.start );\n  \t\t\t\t\tcode.insertLeft( c, ' = ' );\n  \t\t\t\t\tcode.move( moveStart, prop$2.end, end );\n\n  \t\t\t\t\tif ( i$1 < len - 1 && ! sawNonComputedProperty ) {\n  \t\t\t\t\t\t// remove trailing comma\n  \t\t\t\t\t\tc = prop$2.end;\n  \t\t\t\t\t\twhile ( code.original[c] !== ',' ) c += 1;\n\n  \t\t\t\t\t\tcode.remove( prop$2.end, c + 1 );\n  \t\t\t\t\t}\n\n  \t\t\t\t\tif ( prop$2.method && transforms.conciseMethodProperty ) {\n  \t\t\t\t\t\tcode.insertRight( prop$2.value.start, 'function ' );\n  \t\t\t\t\t}\n  \t\t\t\t} else {\n  \t\t\t\t\tsawNonComputedProperty = true;\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\t// special case\n  \t\t\tif ( computedPropertyCount === len ) {\n  \t\t\t\tcode.remove( this.properties[ len - 1 ].end, this.end - 1 );\n  \t\t\t}\n\n  \t\t\tif ( !isSimpleAssignment ) {\n  \t\t\t\tcode.insertLeft( lastComputedProp.end, (\", \" + name + \" )\") );\n  \t\t\t}\n  \t\t}\n  \t};\n\n  \treturn ObjectExpression;\n  }(Node));\n\n  var Property = (function (Node) {\n  \tfunction Property () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) Property.__proto__ = Node;\n  \tProperty.prototype = Object.create( Node && Node.prototype );\n  \tProperty.prototype.constructor = Property;\n\n  \tProperty.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( transforms.conciseMethodProperty && !this.computed && this.parent.type !== 'ObjectPattern' ) {\n  \t\t\tif ( this.shorthand ) {\n  \t\t\t\tcode.insertRight( this.start, ((this.key.name) + \": \") );\n  \t\t\t} else if ( this.method ) {\n  \t\t\t\tvar name = '';\n  \t\t\t\tif ( this.program.options.namedFunctionExpressions !== false ) {\n  \t\t\t\t\tif ( this.key.type === 'Literal' && typeof this.key.value === 'number' ) {\n  \t\t\t\t\t\tname = \"\";\n  \t\t\t\t\t} else if ( this.key.type === 'Identifier' ) {\n  \t\t\t\t\t\tif ( reserved[ this.key.name ] ||\n  \t\t\t\t\t\t\t ! /^[a-z_$][a-z0-9_$]*$/i.test( this.key.name ) ||\n  \t\t\t\t\t\t     this.value.body.scope.references[this.key.name] ) {\n  \t\t\t\t\t\t\tname = this.findScope( true ).createIdentifier( this.key.name );\n  \t\t\t\t\t\t} else {\n  \t\t\t\t\t\t\tname = this.key.name;\n  \t\t\t\t\t\t}\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tname = this.findScope( true ).createIdentifier( this.key.value );\n  \t\t\t\t\t}\n  \t\t\t\t\tname = ' ' + name;\n  \t\t\t\t}\n\n  \t\t\t\tif ( this.value.generator ) code.remove( this.start, this.key.start );\n  \t\t\t\tcode.insertLeft( this.key.end, (\": function\" + (this.value.generator ? '*' : '') + name) );\n  \t\t\t}\n  \t\t}\n\n  \t\tif ( transforms.reservedProperties && reserved[ this.key.name ] ) {\n  \t\t\tcode.insertRight( this.key.start, \"'\" );\n  \t\t\tcode.insertLeft( this.key.end, \"'\" );\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn Property;\n  }(Node));\n\n  var ReturnStatement = (function (Node) {\n  \tfunction ReturnStatement () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) ReturnStatement.__proto__ = Node;\n  \tReturnStatement.prototype = Object.create( Node && Node.prototype );\n  \tReturnStatement.prototype.constructor = ReturnStatement;\n\n  \tReturnStatement.prototype.initialise = function initialise ( transforms ) {\n  \t\tthis.loop = this.findNearest( loopStatement );\n  \t\tthis.nearestFunction = this.findNearest( /Function/ );\n\n  \t\tif ( this.loop && ( !this.nearestFunction || this.loop.depth > this.nearestFunction.depth ) ) {\n  \t\t\tthis.loop.canReturn = true;\n  \t\t\tthis.shouldWrap = true;\n  \t\t}\n\n  \t\tif ( this.argument ) this.argument.initialise( transforms );\n  \t};\n\n  \tReturnStatement.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tvar shouldWrap = this.shouldWrap && this.loop && this.loop.shouldRewriteAsFunction;\n\n  \t\tif ( this.argument ) {\n  \t\t\tif ( shouldWrap ) code.insertRight( this.argument.start, \"{ v: \" );\n  \t\t\tthis.argument.transpile( code, transforms );\n  \t\t\tif ( shouldWrap ) code.insertLeft( this.argument.end, \" }\" );\n  \t\t} else if ( shouldWrap ) {\n  \t\t\tcode.insertLeft( this.start + 6, ' {}' );\n  \t\t}\n  \t};\n\n  \treturn ReturnStatement;\n  }(Node));\n\n  var SpreadProperty = (function (Node) {\n  \tfunction SpreadProperty () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) SpreadProperty.__proto__ = Node;\n  \tSpreadProperty.prototype = Object.create( Node && Node.prototype );\n  \tSpreadProperty.prototype.constructor = SpreadProperty;\n\n  \tSpreadProperty.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tcode.remove( this.start, this.argument.start );\n  \t\tcode.remove( this.argument.end, this.end );\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn SpreadProperty;\n  }(Node));\n\n  var Super = (function (Node) {\n  \tfunction Super () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) Super.__proto__ = Node;\n  \tSuper.prototype = Object.create( Node && Node.prototype );\n  \tSuper.prototype.constructor = Super;\n\n  \tSuper.prototype.initialise = function initialise ( transforms ) {\n  \t\tif ( transforms.classes ) {\n  \t\t\tthis.method = this.findNearest( 'MethodDefinition' );\n  \t\t\tif ( !this.method ) throw new CompileError( this, 'use of super outside class method' );\n\n  \t\t\tvar parentClass = this.findNearest( 'ClassBody' ).parent;\n  \t\t\tthis.superClassName = parentClass.superClass && (parentClass.superClass.name || 'superclass');\n\n  \t\t\tif ( !this.superClassName ) throw new CompileError( this, 'super used in base class' );\n\n  \t\t\tthis.isCalled = this.parent.type === 'CallExpression' && this === this.parent.callee;\n\n  \t\t\tif ( this.method.kind !== 'constructor' && this.isCalled ) {\n  \t\t\t\tthrow new CompileError( this, 'super() not allowed outside class constructor' );\n  \t\t\t}\n\n  \t\t\tthis.isMember = this.parent.type === 'MemberExpression';\n\n  \t\t\tif ( !this.isCalled && !this.isMember ) {\n  \t\t\t\tthrow new CompileError( this, 'Unexpected use of `super` (expected `super(...)` or `super.*`)' );\n  \t\t\t}\n  \t\t}\n\n  \t\tif ( transforms.arrow ) {\n  \t\t\tvar lexicalBoundary = this.findLexicalBoundary();\n  \t\t\tvar arrowFunction = this.findNearest( 'ArrowFunctionExpression' );\n  \t\t\tvar loop = this.findNearest( loopStatement );\n\n  \t\t\tif ( arrowFunction && arrowFunction.depth > lexicalBoundary.depth ) {\n  \t\t\t\tthis.thisAlias = lexicalBoundary.getThisAlias();\n  \t\t\t}\n\n  \t\t\tif ( loop && loop.body.contains( this ) && loop.depth > lexicalBoundary.depth ) {\n  \t\t\t\tthis.thisAlias = lexicalBoundary.getThisAlias();\n  \t\t\t}\n  \t\t}\n  \t};\n\n  \tSuper.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( transforms.classes ) {\n  \t\t\tvar expression = ( this.isCalled || this.method.static ) ?\n  \t\t\t\tthis.superClassName :\n  \t\t\t\t((this.superClassName) + \".prototype\");\n\n  \t\t\tcode.overwrite( this.start, this.end, expression, true );\n\n  \t\t\tvar callExpression = this.isCalled ? this.parent : this.parent.parent;\n\n  \t\t\tif ( callExpression && callExpression.type === 'CallExpression' ) {\n  \t\t\t\tif ( !this.noCall ) { // special case – `super( ...args )`\n  \t\t\t\t\tcode.insertLeft( callExpression.callee.end, '.call' );\n  \t\t\t\t}\n\n  \t\t\t\tvar thisAlias = this.thisAlias || 'this';\n\n  \t\t\t\tif ( callExpression.arguments.length ) {\n  \t\t\t\t\tcode.insertLeft( callExpression.arguments[0].start, (thisAlias + \", \") );\n  \t\t\t\t} else {\n  \t\t\t\t\tcode.insertLeft( callExpression.end - 1, (\"\" + thisAlias) );\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t};\n\n  \treturn Super;\n  }(Node));\n\n  var TaggedTemplateExpression = (function (Node) {\n  \tfunction TaggedTemplateExpression () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) TaggedTemplateExpression.__proto__ = Node;\n  \tTaggedTemplateExpression.prototype = Object.create( Node && Node.prototype );\n  \tTaggedTemplateExpression.prototype.constructor = TaggedTemplateExpression;\n\n  \tTaggedTemplateExpression.prototype.initialise = function initialise ( transforms ) {\n  \t\tif ( transforms.templateString && !transforms.dangerousTaggedTemplateString ) {\n  \t\t\tthrow new CompileError( this, 'Tagged template strings are not supported. Use `transforms: { templateString: false }` to skip transformation and disable this error, or `transforms: { dangerousTaggedTemplateString: true }` if you know what you\\'re doing' );\n  \t\t}\n\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \tTaggedTemplateExpression.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( transforms.templateString && transforms.dangerousTaggedTemplateString ) {\n  \t\t\tvar ordered = this.quasi.expressions.concat( this.quasi.quasis ).sort( function ( a, b ) { return a.start - b.start; } );\n\n  \t\t\t// insert strings at start\n  \t\t\tvar templateStrings = this.quasi.quasis.map( function ( quasi ) { return JSON.stringify( quasi.value.cooked ); } );\n  \t\t\tcode.overwrite( this.tag.end, ordered[0].start, (\"([\" + (templateStrings.join(', ')) + \"]\") );\n\n  \t\t\tvar lastIndex = ordered[0].start;\n  \t\t\tordered.forEach( function ( node ) {\n  \t\t\t\tif ( node.type === 'TemplateElement' ) {\n  \t\t\t\t\tcode.remove( lastIndex, node.end );\n  \t\t\t\t} else {\n  \t\t\t\t\tcode.overwrite( lastIndex, node.start, ', ' );\n  \t\t\t\t}\n\n  \t\t\t\tlastIndex = node.end;\n  \t\t\t});\n\n  \t\t\tcode.overwrite( lastIndex, this.end, ')' );\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn TaggedTemplateExpression;\n  }(Node));\n\n  var TemplateElement = (function (Node) {\n  \tfunction TemplateElement () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) TemplateElement.__proto__ = Node;\n  \tTemplateElement.prototype = Object.create( Node && Node.prototype );\n  \tTemplateElement.prototype.constructor = TemplateElement;\n\n  \tTemplateElement.prototype.initialise = function initialise () {\n  \t\tthis.program.indentExclusionElements.push( this );\n  \t};\n\n  \treturn TemplateElement;\n  }(Node));\n\n  var TemplateLiteral = (function (Node) {\n  \tfunction TemplateLiteral () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) TemplateLiteral.__proto__ = Node;\n  \tTemplateLiteral.prototype = Object.create( Node && Node.prototype );\n  \tTemplateLiteral.prototype.constructor = TemplateLiteral;\n\n  \tTemplateLiteral.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( transforms.templateString && this.parent.type !== 'TaggedTemplateExpression' ) {\n  \t\t\tvar ordered = this.expressions.concat( this.quasis )\n  \t\t\t\t.sort( function ( a, b ) { return a.start - b.start || a.end - b.end; } )\n  \t\t\t\t.filter( function ( node, i ) {\n  \t\t\t\t\t// include all expressions\n  \t\t\t\t\tif ( node.type !== 'TemplateElement' ) return true;\n\n  \t\t\t\t\t// include all non-empty strings\n  \t\t\t\t\tif ( node.value.raw ) return true;\n\n  \t\t\t\t\t// exclude all empty strings not at the head\n  \t\t\t\t\treturn !i;\n  \t\t\t\t});\n\n  \t\t\t// special case – we may be able to skip the first element,\n  \t\t\t// if it's the empty string, but only if the second and\n  \t\t\t// third elements aren't both expressions (since they maybe\n  \t\t\t// be numeric, and `1 + 2 + '3' === '33'`)\n  \t\t\tif ( ordered.length >= 3 ) {\n  \t\t\t\tvar first = ordered[0];\n  \t\t\t\tvar third = ordered[2];\n  \t\t\t\tif ( first.type === 'TemplateElement' && first.value.raw === '' && third.type === 'TemplateElement' ) {\n  \t\t\t\t\tordered.shift();\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\tvar parenthesise = ( this.quasis.length !== 1 || this.expressions.length !== 0 ) &&\n  \t\t\t                     this.parent.type !== 'AssignmentExpression' &&\n  \t\t\t                     this.parent.type !== 'AssignmentPattern' &&\n  \t\t\t                     this.parent.type !== 'VariableDeclarator' &&\n  \t\t\t                     ( this.parent.type !== 'BinaryExpression' || this.parent.operator !== '+' );\n\n  \t\t\tif ( parenthesise ) code.insertRight( this.start, '(' );\n\n  \t\t\tvar lastIndex = this.start;\n\n  \t\t\tordered.forEach( function ( node, i ) {\n  \t\t\t\tif ( node.type === 'TemplateElement' ) {\n  \t\t\t\t\tvar replacement = '';\n  \t\t\t\t\tif ( i ) replacement += ' + ';\n  \t\t\t\t\treplacement += JSON.stringify( node.value.cooked );\n\n  \t\t\t\t\tcode.overwrite( lastIndex, node.end, replacement );\n  \t\t\t\t} else {\n  \t\t\t\t\tvar parenthesise = node.type !== 'Identifier'; // TODO other cases where it's safe\n\n  \t\t\t\t\tvar replacement$1 = '';\n  \t\t\t\t\tif ( i ) replacement$1 += ' + ';\n  \t\t\t\t\tif ( parenthesise ) replacement$1 += '(';\n\n  \t\t\t\t\tcode.overwrite( lastIndex, node.start, replacement$1 );\n\n  \t\t\t\t\tif ( parenthesise ) code.insertLeft( node.end, ')' );\n  \t\t\t\t}\n\n  \t\t\t\tlastIndex = node.end;\n  \t\t\t});\n\n  \t\t\tvar close = '';\n  \t\t\tif ( parenthesise ) close += ')';\n\n  \t\t\tcode.overwrite( lastIndex, this.end, close );\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n  \t};\n\n  \treturn TemplateLiteral;\n  }(Node));\n\n  var ThisExpression = (function (Node) {\n  \tfunction ThisExpression () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) ThisExpression.__proto__ = Node;\n  \tThisExpression.prototype = Object.create( Node && Node.prototype );\n  \tThisExpression.prototype.constructor = ThisExpression;\n\n  \tThisExpression.prototype.initialise = function initialise ( transforms ) {\n  \t\tif ( transforms.arrow ) {\n  \t\t\tvar lexicalBoundary = this.findLexicalBoundary();\n  \t\t\tvar arrowFunction = this.findNearest( 'ArrowFunctionExpression' );\n  \t\t\tvar loop = this.findNearest( loopStatement );\n\n  \t\t\tif ( ( arrowFunction && arrowFunction.depth > lexicalBoundary.depth )\n  \t\t\t|| ( loop && loop.body.contains( this ) && loop.depth > lexicalBoundary.depth )\n  \t\t\t|| ( loop && loop.right && loop.right.contains( this ) ) ) {\n  \t\t\t\tthis.alias = lexicalBoundary.getThisAlias();\n  \t\t\t}\n  \t\t}\n  \t};\n\n  \tThisExpression.prototype.transpile = function transpile ( code ) {\n  \t\tif ( this.alias ) {\n  \t\t\tcode.overwrite( this.start, this.end, this.alias, true );\n  \t\t}\n  \t};\n\n  \treturn ThisExpression;\n  }(Node));\n\n  var UpdateExpression = (function (Node) {\n  \tfunction UpdateExpression () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) UpdateExpression.__proto__ = Node;\n  \tUpdateExpression.prototype = Object.create( Node && Node.prototype );\n  \tUpdateExpression.prototype.constructor = UpdateExpression;\n\n  \tUpdateExpression.prototype.initialise = function initialise ( transforms ) {\n  \t\tif ( this.argument.type === 'Identifier' ) {\n  \t\t\tvar declaration = this.findScope( false ).findDeclaration( this.argument.name );\n  \t\t\tif ( declaration && declaration.kind === 'const' ) {\n  \t\t\t\tthrow new CompileError( this, ((this.argument.name) + \" is read-only\") );\n  \t\t\t}\n\n  \t\t\t// special case – https://gitlab.com/Rich-Harris/buble/issues/150\n  \t\t\tvar statement = declaration && declaration.node.ancestor( 3 );\n  \t\t\tif ( statement && statement.type === 'ForStatement' && statement.body.contains( this ) ) {\n  \t\t\t\tstatement.reassigned[ this.argument.name ] = true;\n  \t\t\t}\n  \t\t}\n\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \treturn UpdateExpression;\n  }(Node));\n\n  var VariableDeclaration = (function (Node) {\n  \tfunction VariableDeclaration () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) VariableDeclaration.__proto__ = Node;\n  \tVariableDeclaration.prototype = Object.create( Node && Node.prototype );\n  \tVariableDeclaration.prototype.constructor = VariableDeclaration;\n\n  \tVariableDeclaration.prototype.initialise = function initialise ( transforms ) {\n  \t\tthis.scope = this.findScope( this.kind === 'var' );\n  \t\tthis.declarations.forEach( function ( declarator ) { return declarator.initialise( transforms ); } );\n  \t};\n\n  \tVariableDeclaration.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tvar this$1 = this;\n\n  \t\tvar i0 = this.getIndentation();\n  \t\tvar kind = this.kind;\n\n  \t\tif ( transforms.letConst && kind !== 'var' ) {\n  \t\t\tkind = 'var';\n  \t\t\tcode.overwrite( this.start, this.start + this.kind.length, kind, true );\n  \t\t}\n\n  \t\tif ( transforms.destructuring && this.parent.type !== 'ForOfStatement' ) {\n  \t\t\tvar c = this.start;\n  \t\t\tvar lastDeclaratorIsPattern;\n\n  \t\t\tthis.declarations.forEach( function ( declarator, i ) {\n  \t\t\t\tif ( declarator.id.type === 'Identifier' ) {\n  \t\t\t\t\tif ( i > 0 && this$1.declarations[ i - 1 ].id.type !== 'Identifier' ) {\n  \t\t\t\t\t\tcode.overwrite( c, declarator.id.start, \"var \" );\n  \t\t\t\t\t}\n  \t\t\t\t} else {\n  \t\t\t\t\tvar inline = loopStatement.test( this$1.parent.type );\n\n  \t\t\t\t\tif ( i === 0 ) {\n  \t\t\t\t\t\tcode.remove( c, declarator.id.start );\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tcode.overwrite( c, declarator.id.start, (\";\\n\" + i0) );\n  \t\t\t\t\t}\n\n  \t\t\t\t\tvar simple = declarator.init.type === 'Identifier' && !declarator.init.rewritten;\n\n  \t\t\t\t\tvar name = simple ? declarator.init.name : declarator.findScope( true ).createIdentifier( 'ref' );\n\n  \t\t\t\t\tvar c$1 = declarator.start;\n\n  \t\t\t\t\tvar statementGenerators = [];\n\n  \t\t\t\t\tif ( simple ) {\n  \t\t\t\t\t\tcode.remove( declarator.id.end, declarator.end );\n  \t\t\t\t\t} else {\n  \t\t\t\t\t\tstatementGenerators.push( function ( start, prefix, suffix ) {\n  \t\t\t\t\t\t\tcode.insertRight( declarator.id.end, (\"var \" + name) );\n  \t\t\t\t\t\t\tcode.insertLeft( declarator.init.end, (\"\" + suffix) );\n  \t\t\t\t\t\t\tcode.move( declarator.id.end, declarator.end, start );\n  \t\t\t\t\t\t});\n  \t\t\t\t\t}\n\n  \t\t\t\t\tdestructure( code, declarator.findScope( false ), declarator.id, name, inline, statementGenerators );\n\n  \t\t\t\t\tvar prefix = inline ? 'var ' : '';\n  \t\t\t\t\tvar suffix = inline ? \", \" : (\";\\n\" + i0);\n  \t\t\t\t\tstatementGenerators.forEach( function ( fn, j ) {\n  \t\t\t\t\t\tif ( i === this$1.declarations.length - 1 && j === statementGenerators.length - 1 ) {\n  \t\t\t\t\t\t\tsuffix = inline ? '' : ';';\n  \t\t\t\t\t\t}\n\n  \t\t\t\t\t\tfn( declarator.start, j === 0 ? prefix : '', suffix );\n  \t\t\t\t\t});\n  \t\t\t\t}\n\n  \t\t\t\tdeclarator.transpile( code, transforms );\n\n  \t\t\t\tc = declarator.end;\n  \t\t\t\tlastDeclaratorIsPattern = declarator.id.type !== 'Identifier';\n  \t\t\t});\n\n  \t\t\tif ( lastDeclaratorIsPattern ) {\n  \t\t\t\tcode.remove( c, this.end );\n  \t\t\t}\n  \t\t}\n\n  \t\telse {\n  \t\t\tthis.declarations.forEach( function ( declarator ) {\n  \t\t\t\tdeclarator.transpile( code, transforms );\n  \t\t\t});\n  \t\t}\n  \t};\n\n  \treturn VariableDeclaration;\n  }(Node));\n\n  var VariableDeclarator = (function (Node) {\n  \tfunction VariableDeclarator () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) VariableDeclarator.__proto__ = Node;\n  \tVariableDeclarator.prototype = Object.create( Node && Node.prototype );\n  \tVariableDeclarator.prototype.constructor = VariableDeclarator;\n\n  \tVariableDeclarator.prototype.initialise = function initialise ( transforms ) {\n  \t\tvar kind = this.parent.kind;\n  \t\tif ( kind === 'let' && this.parent.parent.type === 'ForStatement' ) {\n  \t\t\tkind = 'for.let'; // special case...\n  \t\t}\n\n  \t\tthis.parent.scope.addDeclaration( this.id, kind );\n  \t\tNode.prototype.initialise.call( this, transforms );\n  \t};\n\n  \tVariableDeclarator.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tif ( !this.init && transforms.letConst && this.parent.kind !== 'var' ) {\n  \t\t\tvar inLoop = this.findNearest( /Function|^For(In|Of)?Statement|^(?:Do)?WhileStatement/ );\n  \t\t\tif ( inLoop && ! /Function/.test( inLoop.type ) && ! this.isLeftDeclaratorOfLoop() ) {\n  \t\t\t\tcode.insertLeft( this.id.end, ' = (void 0)' );\n  \t\t\t}\n  \t\t}\n\n  \t\tif ( this.id ) this.id.transpile( code, transforms );\n  \t\tif ( this.init ) this.init.transpile( code, transforms );\n  \t};\n\n  \tVariableDeclarator.prototype.isLeftDeclaratorOfLoop = function isLeftDeclaratorOfLoop () {\n  \t\treturn this.parent\n  \t\t\t&& this.parent.type === 'VariableDeclaration'\n  \t\t\t&& this.parent.parent\n  \t\t\t&& (this.parent.parent.type === 'ForInStatement'\n  \t\t\t\t|| this.parent.parent.type === 'ForOfStatement')\n  \t\t\t&& this.parent.parent.left\n  \t\t\t&& this.parent.parent.left.declarations[0] === this;\n  \t};\n\n  \treturn VariableDeclarator;\n  }(Node));\n\n  var types = {\n  \tArrayExpression: ArrayExpression,\n  \tArrowFunctionExpression: ArrowFunctionExpression,\n  \tAssignmentExpression: AssignmentExpression,\n  \tBinaryExpression: BinaryExpression,\n  \tBreakStatement: BreakStatement,\n  \tCallExpression: CallExpression,\n  \tClassBody: ClassBody,\n  \tClassDeclaration: ClassDeclaration,\n  \tClassExpression: ClassExpression,\n  \tContinueStatement: ContinueStatement,\n  \tDoWhileStatement: LoopStatement,\n  \tExportNamedDeclaration: ExportNamedDeclaration,\n  \tExportDefaultDeclaration: ExportDefaultDeclaration,\n  \tForStatement: ForStatement,\n  \tForInStatement: ForInStatement,\n  \tForOfStatement: ForOfStatement,\n  \tFunctionDeclaration: FunctionDeclaration,\n  \tFunctionExpression: FunctionExpression,\n  \tIdentifier: Identifier,\n  \tIfStatement: IfStatement,\n  \tImportDeclaration: ImportDeclaration,\n  \tImportDefaultSpecifier: ImportDefaultSpecifier,\n  \tImportSpecifier: ImportSpecifier,\n  \tJSXAttribute: JSXAttribute,\n  \tJSXClosingElement: JSXClosingElement,\n  \tJSXElement: JSXElement,\n  \tJSXExpressionContainer: JSXExpressionContainer,\n  \tJSXOpeningElement: JSXOpeningElement,\n  \tJSXSpreadAttribute: JSXSpreadAttribute,\n  \tLiteral: Literal,\n  \tMemberExpression: MemberExpression,\n  \tNewExpression: NewExpression,\n  \tObjectExpression: ObjectExpression,\n  \tProperty: Property,\n  \tReturnStatement: ReturnStatement,\n  \tSpreadProperty: SpreadProperty,\n  \tSuper: Super,\n  \tTaggedTemplateExpression: TaggedTemplateExpression,\n  \tTemplateElement: TemplateElement,\n  \tTemplateLiteral: TemplateLiteral,\n  \tThisExpression: ThisExpression,\n  \tUpdateExpression: UpdateExpression,\n  \tVariableDeclaration: VariableDeclaration,\n  \tVariableDeclarator: VariableDeclarator,\n  \tWhileStatement: LoopStatement\n  };\n\n  var statementsWithBlocks = {\n  \tIfStatement: 'consequent',\n  \tForStatement: 'body',\n  \tForInStatement: 'body',\n  \tForOfStatement: 'body',\n  \tWhileStatement: 'body',\n  \tDoWhileStatement: 'body',\n  \tArrowFunctionExpression: 'body'\n  };\n\n  function wrap ( raw, parent ) {\n  \tif ( !raw ) return;\n\n  \tif ( 'length' in raw ) {\n  \t\tvar i = raw.length;\n  \t\twhile ( i-- ) wrap( raw[i], parent );\n  \t\treturn;\n  \t}\n\n  \t// with e.g. shorthand properties, key and value are\n  \t// the same node. We don't want to wrap an object twice\n  \tif ( raw.__wrapped ) return;\n  \traw.__wrapped = true;\n\n  \tif ( !keys[ raw.type ] ) {\n  \t\tkeys[ raw.type ] = Object.keys( raw ).filter( function ( key ) { return typeof raw[ key ] === 'object'; } );\n  \t}\n\n  \t// special case – body-less if/for/while statements. TODO others?\n  \tvar bodyType = statementsWithBlocks[ raw.type ];\n  \tif ( bodyType && raw[ bodyType ].type !== 'BlockStatement' ) {\n  \t\tvar expression = raw[ bodyType ];\n\n  \t\t// create a synthetic block statement, otherwise all hell\n  \t\t// breaks loose when it comes to block scoping\n  \t\traw[ bodyType ] = {\n  \t\t\tstart: expression.start,\n  \t\t\tend: expression.end,\n  \t\t\ttype: 'BlockStatement',\n  \t\t\tbody: [ expression ],\n  \t\t\tsynthetic: true\n  \t\t};\n  \t}\n\n  \tnew Node( raw, parent );\n\n  \tvar type = ( raw.type === 'BlockStatement' ? BlockStatement : types[ raw.type ] ) || Node;\n  \traw.__proto__ = type.prototype;\n  }\n\n  var letConst = /^(?:let|const)$/;\n\n  function Scope ( options ) {\n  \toptions = options || {};\n\n  \tthis.parent = options.parent;\n  \tthis.isBlockScope = !!options.block;\n\n  \tvar scope = this;\n  \twhile ( scope.isBlockScope ) scope = scope.parent;\n  \tthis.functionScope = scope;\n\n  \tthis.identifiers = [];\n  \tthis.declarations = Object.create( null );\n  \tthis.references = Object.create( null );\n  \tthis.blockScopedDeclarations = this.isBlockScope ? null : Object.create( null );\n  \tthis.aliases = this.isBlockScope ? null : Object.create( null );\n  }\n\n  Scope.prototype = {\n  \taddDeclaration: function addDeclaration ( node, kind ) {\n  \t\tfor ( var i = 0, list = extractNames( node ); i < list.length; i += 1 ) {\n  \t\t\tvar identifier = list[i];\n\n  \t\t\tvar name = identifier.name;\n  \t\t\tvar existingDeclaration = this.declarations[ name ];\n  \t\t\tif ( existingDeclaration && ( letConst.test( kind ) || letConst.test( existingDeclaration.kind ) ) ) {\n  \t\t\t\t// TODO warn about double var declarations?\n  \t\t\t\tthrow new CompileError( identifier, (name + \" is already declared\") );\n  \t\t\t}\n\n  \t\t\tvar declaration = { name: name, node: identifier, kind: kind, instances: [] };\n  \t\t\tthis.declarations[ name ] = declaration;\n\n  \t\t\tif ( this.isBlockScope ) {\n  \t\t\t\tif ( !this.functionScope.blockScopedDeclarations[ name ] ) this.functionScope.blockScopedDeclarations[ name ] = [];\n  \t\t\t\tthis.functionScope.blockScopedDeclarations[ name ].push( declaration );\n  \t\t\t}\n  \t\t}\n  \t},\n\n  \taddReference: function addReference ( identifier ) {\n  \t\tif ( this.consolidated ) {\n  \t\t\tthis.consolidateReference( identifier );\n  \t\t} else {\n  \t\t\tthis.identifiers.push( identifier );\n  \t\t}\n  \t},\n\n  \tconsolidate: function consolidate () {\n  \t\tvar this$1 = this;\n\n  \t\tfor ( var i = 0; i < this$1.identifiers.length; i += 1 ) { // we might push to the array during consolidation, so don't cache length\n  \t\t\tvar identifier = this$1.identifiers[i];\n  \t\t\tthis$1.consolidateReference( identifier );\n  \t\t}\n\n  \t\tthis.consolidated = true; // TODO understand why this is necessary... seems bad\n  \t},\n\n  \tconsolidateReference: function consolidateReference ( identifier ) {\n  \t\tvar declaration = this.declarations[ identifier.name ];\n  \t\tif ( declaration ) {\n  \t\t\tdeclaration.instances.push( identifier );\n  \t\t} else {\n  \t\t\tthis.references[ identifier.name ] = true;\n  \t\t\tif ( this.parent ) this.parent.addReference( identifier );\n  \t\t}\n  \t},\n\n  \tcontains: function contains ( name ) {\n  \t\treturn this.declarations[ name ] ||\n  \t\t       ( this.parent ? this.parent.contains( name ) : false );\n  \t},\n\n  \tcreateIdentifier: function createIdentifier ( base ) {\n  \t\tvar this$1 = this;\n\n  \t\tif ( typeof base === 'number' ) base = base.toString();\n\n  \t\tbase = base\n  \t\t\t.replace( /\\s/g, '' )\n  \t\t\t.replace( /\\[([^\\]]+)\\]/g, '_$1' )\n  \t\t\t.replace( /[^a-zA-Z0-9_$]/g, '_' )\n  \t\t\t.replace( /_{2,}/, '_' );\n\n  \t\tvar name = base;\n  \t\tvar counter = 1;\n\n  \t\twhile ( this$1.declarations[ name ] || this$1.references[ name ] || this$1.aliases[ name ] || name in reserved ) {\n  \t\t\tname = base + \"$\" + (counter++);\n  \t\t}\n\n  \t\tthis.aliases[ name ] = true;\n  \t\treturn name;\n  \t},\n\n  \tfindDeclaration: function findDeclaration ( name ) {\n  \t\treturn this.declarations[ name ] ||\n  \t\t       ( this.parent && this.parent.findDeclaration( name ) );\n  \t}\n  };\n\n  function isUseStrict ( node ) {\n  \tif ( !node ) return false;\n  \tif ( node.type !== 'ExpressionStatement' ) return false;\n  \tif ( node.expression.type !== 'Literal' ) return false;\n  \treturn node.expression.value === 'use strict';\n  }\n\n  var BlockStatement = (function (Node) {\n  \tfunction BlockStatement () {\n  \t\tNode.apply(this, arguments);\n  \t}\n\n  \tif ( Node ) BlockStatement.__proto__ = Node;\n  \tBlockStatement.prototype = Object.create( Node && Node.prototype );\n  \tBlockStatement.prototype.constructor = BlockStatement;\n\n  \tBlockStatement.prototype.createScope = function createScope () {\n  \t\tvar this$1 = this;\n\n  \t\tthis.parentIsFunction = /Function/.test( this.parent.type );\n  \t\tthis.isFunctionBlock = this.parentIsFunction || this.parent.type === 'Root';\n  \t\tthis.scope = new Scope({\n  \t\t\tblock: !this.isFunctionBlock,\n  \t\t\tparent: this.parent.findScope( false )\n  \t\t});\n\n  \t\tif ( this.parentIsFunction ) {\n  \t\t\tthis.parent.params.forEach( function ( node ) {\n  \t\t\t\tthis$1.scope.addDeclaration( node, 'param' );\n  \t\t\t});\n  \t\t}\n  \t};\n\n  \tBlockStatement.prototype.initialise = function initialise ( transforms ) {\n  \t\tthis.thisAlias = null;\n  \t\tthis.argumentsAlias = null;\n  \t\tthis.defaultParameters = [];\n\n  \t\t// normally the scope gets created here, during initialisation,\n  \t\t// but in some cases (e.g. `for` statements), we need to create\n  \t\t// the scope early, as it pertains to both the init block and\n  \t\t// the body of the statement\n  \t\tif ( !this.scope ) this.createScope();\n\n  \t\tthis.body.forEach( function ( node ) { return node.initialise( transforms ); } );\n\n  \t\tthis.scope.consolidate();\n  \t};\n\n  \tBlockStatement.prototype.findLexicalBoundary = function findLexicalBoundary () {\n  \t\tif ( this.type === 'Program' ) return this;\n  \t\tif ( /^Function/.test( this.parent.type ) ) return this;\n\n  \t\treturn this.parent.findLexicalBoundary();\n  \t};\n\n  \tBlockStatement.prototype.findScope = function findScope ( functionScope ) {\n  \t\tif ( functionScope && !this.isFunctionBlock ) return this.parent.findScope( functionScope );\n  \t\treturn this.scope;\n  \t};\n\n  \tBlockStatement.prototype.getArgumentsAlias = function getArgumentsAlias () {\n  \t\tif ( !this.argumentsAlias ) {\n  \t\t\tthis.argumentsAlias = this.scope.createIdentifier( 'arguments' );\n  \t\t}\n\n  \t\treturn this.argumentsAlias;\n  \t};\n\n  \tBlockStatement.prototype.getArgumentsArrayAlias = function getArgumentsArrayAlias () {\n  \t\tif ( !this.argumentsArrayAlias ) {\n  \t\t\tthis.argumentsArrayAlias = this.scope.createIdentifier( 'argsArray' );\n  \t\t}\n\n  \t\treturn this.argumentsArrayAlias;\n  \t};\n\n  \tBlockStatement.prototype.getThisAlias = function getThisAlias () {\n  \t\tif ( !this.thisAlias ) {\n  \t\t\tthis.thisAlias = this.scope.createIdentifier( 'this' );\n  \t\t}\n\n  \t\treturn this.thisAlias;\n  \t};\n\n  \tBlockStatement.prototype.getIndentation = function getIndentation () {\n  \t\tvar this$1 = this;\n\n  \t\tif ( this.indentation === undefined ) {\n  \t\t\tvar source = this.program.magicString.original;\n\n  \t\t\tvar useOuter = this.synthetic || !this.body.length;\n  \t\t\tvar c = useOuter ? this.start : this.body[0].start;\n\n  \t\t\twhile ( c && source[c] !== '\\n' ) c -= 1;\n\n  \t\t\tthis.indentation = '';\n\n  \t\t\twhile ( true ) { // eslint-disable-line no-constant-condition\n  \t\t\t\tc += 1;\n  \t\t\t\tvar char = source[c];\n\n  \t\t\t\tif ( char !== ' ' && char !== '\\t' ) break;\n\n  \t\t\t\tthis$1.indentation += char;\n  \t\t\t}\n\n  \t\t\tvar indentString = this.program.magicString.getIndentString();\n\n  \t\t\t// account for dedented class constructors\n  \t\t\tvar parent = this.parent;\n  \t\t\twhile ( parent ) {\n  \t\t\t\tif ( parent.kind === 'constructor' && !parent.parent.parent.superClass ) {\n  \t\t\t\t\tthis$1.indentation = this$1.indentation.replace( indentString, '' );\n  \t\t\t\t}\n\n  \t\t\t\tparent = parent.parent;\n  \t\t\t}\n\n  \t\t\tif ( useOuter ) this.indentation += indentString;\n  \t\t}\n\n  \t\treturn this.indentation;\n  \t};\n\n  \tBlockStatement.prototype.transpile = function transpile ( code, transforms ) {\n  \t\tvar this$1 = this;\n\n  \t\tvar indentation = this.getIndentation();\n\n  \t\tvar introStatementGenerators = [];\n\n  \t\tif ( this.argumentsAlias ) {\n  \t\t\tintroStatementGenerators.push( function ( start, prefix, suffix ) {\n  \t\t\t\tvar assignment = prefix + \"var \" + (this$1.argumentsAlias) + \" = arguments\" + suffix;\n  \t\t\t\tcode.insertLeft( start, assignment );\n  \t\t\t});\n  \t\t}\n\n  \t\tif ( this.thisAlias ) {\n  \t\t\tintroStatementGenerators.push( function ( start, prefix, suffix ) {\n  \t\t\t\tvar assignment = prefix + \"var \" + (this$1.thisAlias) + \" = this\" + suffix;\n  \t\t\t\tcode.insertLeft( start, assignment );\n  \t\t\t});\n  \t\t}\n\n  \t\tif ( this.argumentsArrayAlias ) {\n  \t\t\tintroStatementGenerators.push( function ( start, prefix, suffix ) {\n  \t\t\t\tvar i = this$1.scope.createIdentifier( 'i' );\n  \t\t\t\tvar assignment = prefix + \"var \" + i + \" = arguments.length, \" + (this$1.argumentsArrayAlias) + \" = Array(\" + i + \");\\n\" + indentation + \"while ( \" + i + \"-- ) \" + (this$1.argumentsArrayAlias) + \"[\" + i + \"] = arguments[\" + i + \"]\" + suffix;\n  \t\t\t\tcode.insertLeft( start, assignment );\n  \t\t\t});\n  \t\t}\n\n  \t\tif ( /Function/.test( this.parent.type ) ) {\n  \t\t\tthis.transpileParameters( code, transforms, indentation, introStatementGenerators );\n  \t\t}\n\n  \t\tif ( transforms.letConst && this.isFunctionBlock ) {\n  \t\t\tthis.transpileBlockScopedIdentifiers( code );\n  \t\t}\n\n  \t\tNode.prototype.transpile.call( this, code, transforms );\n\n  \t\tif ( this.synthetic ) {\n  \t\t\tif ( this.parent.type === 'ArrowFunctionExpression' ) {\n  \t\t\t\tvar expr = this.body[0];\n\n  \t\t\t\tif ( introStatementGenerators.length ) {\n  \t\t\t\t\tcode.insertLeft( this.start, \"{\" ).insertRight( this.end, ((this.parent.getIndentation()) + \"}\") );\n\n  \t\t\t\t\tcode.insertRight( expr.start, (\"\\n\" + indentation + \"return \") );\n  \t\t\t\t\tcode.insertLeft( expr.end, \";\\n\" );\n  \t\t\t\t} else if ( transforms.arrow ) {\n  \t\t\t\t\tcode.insertLeft( expr.start, \"{ return \" );\n  \t\t\t\t\tcode.insertLeft( expr.end, \"; }\" );\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\telse if ( introStatementGenerators.length ) {\n  \t\t\t\tcode.insertLeft( this.start, \"{\" ).insertRight( this.end, \"}\" );\n  \t\t\t}\n  \t\t}\n\n  \t\tvar start;\n  \t\tif ( isUseStrict( this.body[0] ) ) {\n  \t\t\tstart = this.body[0].end;\n  \t\t} else if ( this.synthetic || this.parent.type === 'Root' ) {\n  \t\t\tstart = this.start;\n  \t\t} else {\n  \t\t\tstart = this.start + 1;\n  \t\t}\n\n  \t\tvar prefix = \"\\n\" + indentation;\n  \t\tvar suffix = ';';\n  \t\tintroStatementGenerators.forEach( function ( fn, i ) {\n  \t\t\tif ( i === introStatementGenerators.length - 1 ) suffix = \";\\n\";\n  \t\t\tfn( start, prefix, suffix );\n  \t\t});\n  \t};\n\n  \tBlockStatement.prototype.transpileParameters = function transpileParameters ( code, transforms, indentation, introStatementGenerators ) {\n  \t\tvar this$1 = this;\n\n  \t\tvar params = this.parent.params;\n\n  \t\tparams.forEach( function ( param ) {\n  \t\t\tif ( param.type === 'AssignmentPattern' && param.left.type === 'Identifier' ) {\n  \t\t\t\tif ( transforms.defaultParameter ) {\n  \t\t\t\t\tintroStatementGenerators.push( function ( start, prefix, suffix ) {\n  \t\t\t\t\t\tvar lhs = prefix + \"if ( \" + (param.left.name) + \" === void 0 ) \" + (param.left.name);\n\n  \t\t\t\t\t\tcode\n  \t\t\t\t\t\t\t.insertRight( param.left.end, lhs )\n  \t\t\t\t\t\t\t.move( param.left.end, param.right.end, start )\n  \t\t\t\t\t\t\t.insertLeft( param.right.end, suffix );\n  \t\t\t\t\t});\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\telse if ( param.type === 'RestElement' ) {\n  \t\t\t\tif ( transforms.spreadRest ) {\n  \t\t\t\t\tintroStatementGenerators.push( function ( start, prefix, suffix ) {\n  \t\t\t\t\t\tvar penultimateParam = params[ params.length - 2 ];\n\n  \t\t\t\t\t\tif ( penultimateParam ) {\n  \t\t\t\t\t\t\tcode.remove( penultimateParam ? penultimateParam.end : param.start, param.end );\n  \t\t\t\t\t\t} else {\n  \t\t\t\t\t\t\tvar start$1 = param.start, end = param.end; // TODO https://gitlab.com/Rich-Harris/buble/issues/8\n\n  \t\t\t\t\t\t\twhile ( /\\s/.test( code.original[ start$1 - 1 ] ) ) start$1 -= 1;\n  \t\t\t\t\t\t\twhile ( /\\s/.test( code.original[ end ] ) ) end += 1;\n\n  \t\t\t\t\t\t\tcode.remove( start$1, end );\n  \t\t\t\t\t\t}\n\n  \t\t\t\t\t\tvar name = param.argument.name;\n  \t\t\t\t\t\tvar len = this$1.scope.createIdentifier( 'len' );\n  \t\t\t\t\t\tvar count = params.length - 1;\n\n  \t\t\t\t\t\tif ( count ) {\n  \t\t\t\t\t\t\tcode.insertLeft( start, (prefix + \"var \" + name + \" = [], \" + len + \" = arguments.length - \" + count + \";\\n\" + indentation + \"while ( \" + len + \"-- > 0 ) \" + name + \"[ \" + len + \" ] = arguments[ \" + len + \" + \" + count + \" ]\" + suffix) );\n  \t\t\t\t\t\t} else {\n  \t\t\t\t\t\t\tcode.insertLeft( start, (prefix + \"var \" + name + \" = [], \" + len + \" = arguments.length;\\n\" + indentation + \"while ( \" + len + \"-- ) \" + name + \"[ \" + len + \" ] = arguments[ \" + len + \" ]\" + suffix) );\n  \t\t\t\t\t\t}\n  \t\t\t\t\t});\n  \t\t\t\t}\n  \t\t\t}\n\n  \t\t\telse if ( param.type !== 'Identifier' ) {\n  \t\t\t\tif ( transforms.parameterDestructuring ) {\n  \t\t\t\t\tvar ref = this$1.scope.createIdentifier( 'ref' );\n  \t\t\t\t\tdestructure( code, this$1.scope, param, ref, false, introStatementGenerators );\n  \t\t\t\t\tcode.insertLeft( param.start, ref );\n  \t\t\t\t}\n  \t\t\t}\n  \t\t});\n  \t};\n\n  \tBlockStatement.prototype.transpileBlockScopedIdentifiers = function transpileBlockScopedIdentifiers ( code ) {\n  \t\tvar this$1 = this;\n\n  \t\tObject.keys( this.scope.blockScopedDeclarations ).forEach( function ( name ) {\n  \t\t\tvar declarations = this$1.scope.blockScopedDeclarations[ name ];\n\n  \t\t\tfor ( var i = 0, list = declarations; i < list.length; i += 1 ) {\n  \t\t\t\tvar declaration = list[i];\n\n  \t\t\t\tvar cont = false; // TODO implement proper continue...\n\n  \t\t\t\tif ( declaration.kind === 'for.let' ) {\n  \t\t\t\t\t// special case\n  \t\t\t\t\tvar forStatement = declaration.node.findNearest( 'ForStatement' );\n\n  \t\t\t\t\tif ( forStatement.shouldRewriteAsFunction ) {\n  \t\t\t\t\t\tvar outerAlias = this$1.scope.createIdentifier( name );\n  \t\t\t\t\t\tvar innerAlias = forStatement.reassigned[ name ] ?\n  \t\t\t\t\t\t\tthis$1.scope.createIdentifier( name ) :\n  \t\t\t\t\t\t\tname;\n\n  \t\t\t\t\t\tdeclaration.name = outerAlias;\n  \t\t\t\t\t\tcode.overwrite( declaration.node.start, declaration.node.end, outerAlias, true );\n\n  \t\t\t\t\t\tforStatement.aliases[ name ] = {\n  \t\t\t\t\t\t\touter: outerAlias,\n  \t\t\t\t\t\t\tinner: innerAlias\n  \t\t\t\t\t\t};\n\n  \t\t\t\t\t\tfor ( var i$1 = 0, list$1 = declaration.instances; i$1 < list$1.length; i$1 += 1 ) {\n  \t\t\t\t\t\t\tvar identifier = list$1[i$1];\n\n  \t\t\t\t\t\t\tvar alias = forStatement.body.contains( identifier ) ?\n  \t\t\t\t\t\t\t\tinnerAlias :\n  \t\t\t\t\t\t\t\touterAlias;\n\n  \t\t\t\t\t\t\tif ( name !== alias ) {\n  \t\t\t\t\t\t\t\tcode.overwrite( identifier.start, identifier.end, alias, true );\n  \t\t\t\t\t\t\t}\n  \t\t\t\t\t\t}\n\n  \t\t\t\t\t\tcont = true;\n  \t\t\t\t\t}\n  \t\t\t\t}\n\n  \t\t\t\tif ( !cont ) {\n  \t\t\t\t\tvar alias$1 = this$1.scope.createIdentifier( name );\n\n  \t\t\t\t\tif ( name !== alias$1 ) {\n  \t\t\t\t\t\tdeclaration.name = alias$1;\n  \t\t\t\t\t\tcode.overwrite( declaration.node.start, declaration.node.end, alias$1, true );\n\n  \t\t\t\t\t\tfor ( var i$2 = 0, list$2 = declaration.instances; i$2 < list$2.length; i$2 += 1 ) {\n  \t\t\t\t\t\t\tvar identifier$1 = list$2[i$2];\n\n  \t\t\t\t\t\t\tidentifier$1.rewritten = true;\n  \t\t\t\t\t\t\tcode.overwrite( identifier$1.start, identifier$1.end, alias$1, true );\n  \t\t\t\t\t\t}\n  \t\t\t\t\t}\n  \t\t\t\t}\n  \t\t\t}\n  \t\t});\n  \t};\n\n  \treturn BlockStatement;\n  }(Node));\n\n  function Program ( source, ast, transforms, options ) {\n  \tvar this$1 = this;\n\n  \tthis.type = 'Root';\n\n  \t// options\n  \tthis.jsx = options.jsx || 'React.createElement';\n  \tthis.options = options;\n\n  \tthis.source = source;\n  \tthis.magicString = new MagicString( source );\n\n  \tthis.ast = ast;\n  \tthis.depth = 0;\n\n  \twrap( this.body = ast, this );\n  \tthis.body.__proto__ = BlockStatement.prototype;\n\n  \tthis.indentExclusionElements = [];\n  \tthis.body.initialise( transforms );\n\n  \tthis.indentExclusions = Object.create( null );\n  \tfor ( var i$1 = 0, list = this.indentExclusionElements; i$1 < list.length; i$1 += 1 ) {\n  \t\tvar node = list[i$1];\n\n  \t\tfor ( var i = node.start; i < node.end; i += 1 ) {\n  \t\t\tthis$1.indentExclusions[ i ] = true;\n  \t\t}\n  \t}\n\n  \tthis.body.transpile( this.magicString, transforms );\n  }\n\n  Program.prototype = {\n  \texport: function export$1 ( options ) {\n  \t\tif ( options === void 0 ) options = {};\n\n  \t\treturn {\n  \t\t\tcode: this.magicString.toString(),\n  \t\t\tmap: this.magicString.generateMap({\n  \t\t\t\tfile: options.file,\n  \t\t\t\tsource: options.source,\n  \t\t\t\tincludeContent: options.includeContent !== false\n  \t\t\t})\n  \t\t};\n  \t},\n\n  \tfindNearest: function findNearest () {\n  \t\treturn null;\n  \t},\n\n  \tfindScope: function findScope () {\n  \t\treturn null;\n  \t}\n  };\n\n  var matrix = {\n  \tchrome: {\n  \t\t    48: 1333689725,\n  \t\t    49: 1342078975,\n  \t\t    50: 1610514431,\n  \t\t    51: 1610514431,\n  \t\t    52: 2147385343\n  \t},\n  \tfirefox: {\n  \t\t    43: 1207307741,\n  \t\t    44: 1207307741,\n  \t\t    45: 1207307741,\n  \t\t    46: 1476267485,\n  \t\t    47: 1476296671,\n  \t\t    48: 1476296671\n  \t},\n  \tsafari: {\n  \t\t     8: 1073741824,\n  \t\t     9: 1328940894\n  \t},\n  \tie: {\n  \t\t     8: 0,\n  \t\t     9: 1073741824,\n  \t\t    10: 1073741824,\n  \t\t    11: 1073770592\n  \t},\n  \tedge: {\n  \t\t    12: 1591620701,\n  \t\t    13: 1608400479\n  \t},\n  \tnode: {\n  \t\t'0.10': 1075052608,\n  \t\t'0.12': 1091830852,\n  \t\t     4: 1327398527,\n  \t\t     5: 1327398527,\n  \t\t     6: 1610514431\n  \t}\n  };\n\n  var features = [\n  \t'arrow',\n  \t'classes',\n  \t'collections',\n  \t'computedProperty',\n  \t'conciseMethodProperty',\n  \t'constLoop',\n  \t'constRedef',\n  \t'defaultParameter',\n  \t'destructuring',\n  \t'extendNatives',\n  \t'forOf',\n  \t'generator',\n  \t'letConst',\n  \t'letLoop',\n  \t'letLoopScope',\n  \t'moduleExport',\n  \t'moduleImport',\n  \t'numericLiteral',\n  \t'objectProto',\n  \t'objectSuper',\n  \t'oldOctalLiteral',\n  \t'parameterDestructuring',\n  \t'spreadRest',\n  \t'stickyRegExp',\n  \t'symbol',\n  \t'templateString',\n  \t'unicodeEscape',\n  \t'unicodeIdentifier',\n  \t'unicodeRegExp',\n\n  \t// ES2016\n  \t'exponentiation',\n\n  \t// additional transforms, not from\n  \t// https://featuretests.io\n  \t'reservedProperties'\n  ];\n\n  var version = \"0.15.2\";\n\n  var ref = [\n  \tacornObjectSpread,\n  \tacornJsx\n  ].reduce( function ( final, plugin ) { return plugin( final ); }, acorn );\n  var parse = ref.parse;\n\n  var dangerousTransforms = [\n  \t'dangerousTaggedTemplateString',\n  \t'dangerousForOf'\n  ];\n\n  function target ( target ) {\n  \tvar targets = Object.keys( target );\n  \tvar bitmask = targets.length ?\n  \t\t2147483647 :\n  \t\t1073741824;\n\n  \tObject.keys( target ).forEach( function ( environment ) {\n  \t\tvar versions = matrix[ environment ];\n  \t\tif ( !versions ) throw new Error( (\"Unknown environment '\" + environment + \"'. Please raise an issue at https://gitlab.com/Rich-Harris/buble/issues\") );\n\n  \t\tvar targetVersion = target[ environment ];\n  \t\tif ( !( targetVersion in versions ) ) throw new Error( (\"Support data exists for the following versions of \" + environment + \": \" + (Object.keys( versions ).join( ', ')) + \". Please raise an issue at https://gitlab.com/Rich-Harris/buble/issues\") );\n  \t\tvar support = versions[ targetVersion ];\n\n  \t\tbitmask &= support;\n  \t});\n\n  \tvar transforms = Object.create( null );\n  \tfeatures.forEach( function ( name, i ) {\n  \t\ttransforms[ name ] = !( bitmask & 1 << i );\n  \t});\n\n  \tdangerousTransforms.forEach( function ( name ) {\n  \t\ttransforms[ name ] = false;\n  \t});\n\n  \treturn transforms;\n  }\n\n  function transform ( source, options ) {\n  \tif ( options === void 0 ) options = {};\n\n  \tvar ast;\n\n  \ttry {\n  \t\tast = parse( source, {\n  \t\t\tecmaVersion: 7,\n  \t\t\tpreserveParens: true,\n  \t\t\tsourceType: 'module',\n  \t\t\tplugins: {\n  \t\t\t\tjsx: true,\n  \t\t\t\tobjectSpread: true\n  \t\t\t}\n  \t\t});\n  \t} catch ( err ) {\n  \t\terr.snippet = getSnippet( source, err.loc );\n  \t\terr.toString = function () { return ((err.name) + \": \" + (err.message) + \"\\n\" + (err.snippet)); };\n  \t\tthrow err;\n  \t}\n\n  \tvar transforms = target( options.target || {} );\n  \tObject.keys( options.transforms || {} ).forEach( function ( name ) {\n  \t\tif ( name === 'modules' ) {\n  \t\t\tif ( !( 'moduleImport' in options.transforms ) ) transforms.moduleImport = options.transforms.modules;\n  \t\t\tif ( !( 'moduleExport' in options.transforms ) ) transforms.moduleExport = options.transforms.modules;\n  \t\t\treturn;\n  \t\t}\n\n  \t\tif ( !( name in transforms ) ) throw new Error( (\"Unknown transform '\" + name + \"'\") );\n  \t\ttransforms[ name ] = options.transforms[ name ];\n  \t});\n\n  \treturn new Program( source, ast, transforms, options ).export( options );\n  }\n\n  exports.target = target;\n  exports.transform = transform;\n  exports.VERSION = version;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/webpack/buildin/global.js\")))\n\n/***/ }),\n\n/***/ \"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/ieee754/index.js\":\n/***/ (function(module, exports) {\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n/***/ }),\n\n/***/ \"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/isarray/index.js\":\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n/***/ }),\n\n/***/ \"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/magic-string/dist/magic-string.cjs.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Buffer) {\n\nvar vlq = __webpack_require__(\"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/vlq/src/vlq.js\");\n\nfunction Chunk ( start, end, content ) {\n\tthis.start = start;\n\tthis.end = end;\n\tthis.original = content;\n\n\tthis.intro = '';\n\tthis.outro = '';\n\n\tthis.content = content;\n\tthis.storeName = false;\n\tthis.edited = false;\n\n\t// we make these non-enumerable, for sanity while debugging\n\tObject.defineProperties( this, {\n\t\tprevious: { writable: true, value: null },\n\t\tnext: { writable: true, value: null }\n\t});\n}\n\nChunk.prototype = {\n\tappend: function append ( content ) {\n\t\tthis.outro += content;\n\t},\n\n\tclone: function clone () {\n\t\tvar chunk = new Chunk( this.start, this.end, this.original );\n\n\t\tchunk.intro = this.intro;\n\t\tchunk.outro = this.outro;\n\t\tchunk.content = this.content;\n\t\tchunk.storeName = this.storeName;\n\t\tchunk.edited = this.edited;\n\n\t\treturn chunk;\n\t},\n\n\tcontains: function contains ( index ) {\n\t\treturn this.start < index && index < this.end;\n\t},\n\n\teachNext: function eachNext ( fn ) {\n\t\tvar chunk = this;\n\t\twhile ( chunk ) {\n\t\t\tfn( chunk );\n\t\t\tchunk = chunk.next;\n\t\t}\n\t},\n\n\teachPrevious: function eachPrevious ( fn ) {\n\t\tvar chunk = this;\n\t\twhile ( chunk ) {\n\t\t\tfn( chunk );\n\t\t\tchunk = chunk.previous;\n\t\t}\n\t},\n\n\tedit: function edit ( content, storeName ) {\n\t\tthis.content = content;\n\t\tthis.storeName = storeName;\n\n\t\tthis.edited = true;\n\n\t\treturn this;\n\t},\n\n\tprepend: function prepend ( content ) {\n\t\tthis.intro = content + this.intro;\n\t},\n\n\tsplit: function split ( index ) {\n\t\tvar sliceIndex = index - this.start;\n\n\t\tvar originalBefore = this.original.slice( 0, sliceIndex );\n\t\tvar originalAfter = this.original.slice( sliceIndex );\n\n\t\tthis.original = originalBefore;\n\n\t\tvar newChunk = new Chunk( index, this.end, originalAfter );\n\t\tnewChunk.outro = this.outro;\n\t\tthis.outro = '';\n\n\t\tthis.end = index;\n\n\t\tif ( this.edited ) {\n\t\t\t// TODO is this block necessary?...\n\t\t\tnewChunk.edit( '', false );\n\t\t\tthis.content = '';\n\t\t} else {\n\t\t\tthis.content = originalBefore;\n\t\t}\n\n\t\tnewChunk.next = this.next;\n\t\tif ( newChunk.next ) newChunk.next.previous = newChunk;\n\t\tnewChunk.previous = this;\n\t\tthis.next = newChunk;\n\n\t\treturn newChunk;\n\t},\n\n\ttoString: function toString () {\n\t\treturn this.intro + this.content + this.outro;\n\t},\n\n\ttrimEnd: function trimEnd ( rx ) {\n\t\tthis.outro = this.outro.replace( rx, '' );\n\t\tif ( this.outro.length ) return true;\n\n\t\tvar trimmed = this.content.replace( rx, '' );\n\n\t\tif ( trimmed.length ) {\n\t\t\tif ( trimmed !== this.content ) {\n\t\t\t\tthis.split( this.start + trimmed.length ).edit( '', false );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.edit( '', false );\n\n\t\t\tthis.intro = this.intro.replace( rx, '' );\n\t\t\tif ( this.intro.length ) return true;\n\t\t}\n\t},\n\n\ttrimStart: function trimStart ( rx ) {\n\t\tthis.intro = this.intro.replace( rx, '' );\n\t\tif ( this.intro.length ) return true;\n\n\t\tvar trimmed = this.content.replace( rx, '' );\n\n\t\tif ( trimmed.length ) {\n\t\t\tif ( trimmed !== this.content ) {\n\t\t\t\tthis.split( this.end - trimmed.length );\n\t\t\t\tthis.edit( '', false );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.edit( '', false );\n\n\t\t\tthis.outro = this.outro.replace( rx, '' );\n\t\t\tif ( this.outro.length ) return true;\n\t\t}\n\t}\n};\n\nvar _btoa;\n\nif ( typeof window !== 'undefined' && typeof window.btoa === 'function' ) {\n\t_btoa = window.btoa;\n} else if ( typeof Buffer === 'function' ) {\n\t_btoa = function ( str ) { return new Buffer( str ).toString( 'base64' ); };\n} else {\n\t_btoa = function () {\n\t\tthrow new Error( 'Unsupported environment: `window.btoa` or `Buffer` should be supported.' );\n\t};\n}\n\nvar btoa = _btoa;\n\nfunction SourceMap ( properties ) {\n\tthis.version = 3;\n\n\tthis.file           = properties.file;\n\tthis.sources        = properties.sources;\n\tthis.sourcesContent = properties.sourcesContent;\n\tthis.names          = properties.names;\n\tthis.mappings       = properties.mappings;\n}\n\nSourceMap.prototype = {\n\ttoString: function toString () {\n\t\treturn JSON.stringify( this );\n\t},\n\n\ttoUrl: function toUrl () {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa( this.toString() );\n\t}\n};\n\nfunction guessIndent ( code ) {\n\tvar lines = code.split( '\\n' );\n\n\tvar tabbed = lines.filter( function ( line ) { return /^\\t+/.test( line ); } );\n\tvar spaced = lines.filter( function ( line ) { return /^ {2,}/.test( line ); } );\n\n\tif ( tabbed.length === 0 && spaced.length === 0 ) {\n\t\treturn null;\n\t}\n\n\t// More lines tabbed than spaced? Assume tabs, and\n\t// default to tabs in the case of a tie (or nothing\n\t// to go on)\n\tif ( tabbed.length >= spaced.length ) {\n\t\treturn '\\t';\n\t}\n\n\t// Otherwise, we need to guess the multiple\n\tvar min = spaced.reduce( function ( previous, current ) {\n\t\tvar numSpaces = /^ +/.exec( current )[0].length;\n\t\treturn Math.min( numSpaces, previous );\n\t}, Infinity );\n\n\treturn new Array( min + 1 ).join( ' ' );\n}\n\nfunction getLocator ( source ) {\n\tvar originalLines = source.split( '\\n' );\n\n\tvar start = 0;\n\tvar lineRanges = originalLines.map( function ( line, i ) {\n\t\tvar end = start + line.length + 1;\n\t\tvar range = { start: start, end: end, line: i };\n\n\t\tstart = end;\n\t\treturn range;\n\t});\n\n\tvar i = 0;\n\n\tfunction rangeContains ( range, index ) {\n\t\treturn range.start <= index && index < range.end;\n\t}\n\n\tfunction getLocation ( range, index ) {\n\t\treturn { line: range.line, column: index - range.start };\n\t}\n\n\treturn function locate ( index ) {\n\t\tvar range = lineRanges[i];\n\n\t\tvar d = index >= range.end ? 1 : -1;\n\n\t\twhile ( range ) {\n\t\t\tif ( rangeContains( range, index ) ) return getLocation( range, index );\n\n\t\t\ti += d;\n\t\t\trange = lineRanges[i];\n\t\t}\n\t};\n}\n\nfunction encodeMappings ( original, intro, chunk, hires, sourcemapLocations, sourceIndex, offsets, names ) {\n\tvar rawLines = [];\n\n\tvar generatedCodeLine = intro.split( '\\n' ).length - 1;\n\tvar rawSegments = rawLines[ generatedCodeLine ] = [];\n\n\tvar generatedCodeColumn = 0;\n\n\tvar locate = getLocator( original );\n\n\tfunction addEdit ( content, original, loc, nameIndex, i ) {\n\t\tif ( i || content.length ) {\n\t\t\trawSegments.push({\n\t\t\t\tgeneratedCodeLine: generatedCodeLine,\n\t\t\t\tgeneratedCodeColumn: generatedCodeColumn,\n\t\t\t\tsourceCodeLine: loc.line,\n\t\t\t\tsourceCodeColumn: loc.column,\n\t\t\t\tsourceCodeName: nameIndex,\n\t\t\t\tsourceIndex: sourceIndex\n\t\t\t});\n\t\t}\n\n\t\tvar lines = content.split( '\\n' );\n\t\tvar lastLine = lines.pop();\n\n\t\tif ( lines.length ) {\n\t\t\tgeneratedCodeLine += lines.length;\n\t\t\trawLines[ generatedCodeLine ] = rawSegments = [];\n\t\t\tgeneratedCodeColumn = lastLine.length;\n\t\t} else {\n\t\t\tgeneratedCodeColumn += lastLine.length;\n\t\t}\n\n\t\tlines = original.split( '\\n' );\n\t\tlastLine = lines.pop();\n\n\t\tif ( lines.length ) {\n\t\t\tloc.line += lines.length;\n\t\t\tloc.column = lastLine.length;\n\t\t} else {\n\t\t\tloc.column += lastLine.length;\n\t\t}\n\t}\n\n\tfunction addUneditedChunk ( chunk, loc ) {\n\t\tvar originalCharIndex = chunk.start;\n\t\tvar first = true;\n\n\t\twhile ( originalCharIndex < chunk.end ) {\n\t\t\tif ( hires || first || sourcemapLocations[ originalCharIndex ] ) {\n\t\t\t\trawSegments.push({\n\t\t\t\t\tgeneratedCodeLine: generatedCodeLine,\n\t\t\t\t\tgeneratedCodeColumn: generatedCodeColumn,\n\t\t\t\t\tsourceCodeLine: loc.line,\n\t\t\t\t\tsourceCodeColumn: loc.column,\n\t\t\t\t\tsourceCodeName: -1,\n\t\t\t\t\tsourceIndex: sourceIndex\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif ( original[ originalCharIndex ] === '\\n' ) {\n\t\t\t\tloc.line += 1;\n\t\t\t\tloc.column = 0;\n\t\t\t\tgeneratedCodeLine += 1;\n\t\t\t\trawLines[ generatedCodeLine ] = rawSegments = [];\n\t\t\t\tgeneratedCodeColumn = 0;\n\t\t\t} else {\n\t\t\t\tloc.column += 1;\n\t\t\t\tgeneratedCodeColumn += 1;\n\t\t\t}\n\n\t\t\toriginalCharIndex += 1;\n\t\t\tfirst = false;\n\t\t}\n\t}\n\n\twhile ( chunk ) {\n\t\tvar loc = locate( chunk.start );\n\n\t\tif ( chunk.intro.length ) {\n\t\t\taddEdit( chunk.intro, '', loc, -1, !!chunk.previous );\n\t\t}\n\n\t\tif ( chunk.edited ) {\n\t\t\taddEdit( chunk.content, chunk.original, loc, chunk.storeName ? names.indexOf( chunk.original ) : -1, !!chunk.previous );\n\t\t} else {\n\t\t\taddUneditedChunk( chunk, loc );\n\t\t}\n\n\t\tif ( chunk.outro.length ) {\n\t\t\taddEdit( chunk.outro, '', loc, -1, !!chunk.previous );\n\t\t}\n\n\t\tvar nextChunk = chunk.next;\n\t\tchunk = nextChunk;\n\t}\n\n\toffsets.sourceIndex = offsets.sourceIndex || 0;\n\toffsets.sourceCodeLine = offsets.sourceCodeLine || 0;\n\toffsets.sourceCodeColumn = offsets.sourceCodeColumn || 0;\n\toffsets.sourceCodeName = offsets.sourceCodeName || 0;\n\n\tvar encoded = rawLines.map( function ( segments ) {\n\t\tvar generatedCodeColumn = 0;\n\n\t\treturn segments.map( function ( segment ) {\n\t\t\tvar arr = [\n\t\t\t\tsegment.generatedCodeColumn - generatedCodeColumn,\n\t\t\t\tsegment.sourceIndex - offsets.sourceIndex,\n\t\t\t\tsegment.sourceCodeLine - offsets.sourceCodeLine,\n\t\t\t\tsegment.sourceCodeColumn - offsets.sourceCodeColumn\n\t\t\t];\n\n\t\t\tgeneratedCodeColumn = segment.generatedCodeColumn;\n\t\t\toffsets.sourceIndex = segment.sourceIndex;\n\t\t\toffsets.sourceCodeLine = segment.sourceCodeLine;\n\t\t\toffsets.sourceCodeColumn = segment.sourceCodeColumn;\n\n\t\t\tif ( ~segment.sourceCodeName ) {\n\t\t\t\tarr.push( segment.sourceCodeName - offsets.sourceCodeName );\n\t\t\t\toffsets.sourceCodeName = segment.sourceCodeName;\n\t\t\t}\n\n\t\t\treturn vlq.encode( arr );\n\t\t}).join( ',' );\n\t}).join( ';' );\n\n\treturn encoded;\n}\n\nfunction getRelativePath ( from, to ) {\n\tvar fromParts = from.split( /[\\/\\\\]/ );\n\tvar toParts = to.split( /[\\/\\\\]/ );\n\n\tfromParts.pop(); // get dirname\n\n\twhile ( fromParts[0] === toParts[0] ) {\n\t\tfromParts.shift();\n\t\ttoParts.shift();\n\t}\n\n\tif ( fromParts.length ) {\n\t\tvar i = fromParts.length;\n\t\twhile ( i-- ) fromParts[i] = '..';\n\t}\n\n\treturn fromParts.concat( toParts ).join( '/' );\n}\n\nvar toString = Object.prototype.toString;\n\nfunction isObject ( thing ) {\n\treturn toString.call( thing ) === '[object Object]';\n}\n\nfunction MagicString ( string, options ) {\n\tif ( options === void 0 ) options = {};\n\n\tvar chunk = new Chunk( 0, string.length, string );\n\n\tObject.defineProperties( this, {\n\t\toriginal:              { writable: true, value: string },\n\t\toutro:                 { writable: true, value: '' },\n\t\tintro:                 { writable: true, value: '' },\n\t\tfirstChunk:            { writable: true, value: chunk },\n\t\tlastChunk:             { writable: true, value: chunk },\n\t\tlastSearchedChunk:     { writable: true, value: chunk },\n\t\tbyStart:               { writable: true, value: {} },\n\t\tbyEnd:                 { writable: true, value: {} },\n\t\tfilename:              { writable: true, value: options.filename },\n\t\tindentExclusionRanges: { writable: true, value: options.indentExclusionRanges },\n\t\tsourcemapLocations:    { writable: true, value: {} },\n\t\tstoredNames:           { writable: true, value: {} },\n\t\tindentStr:             { writable: true, value: guessIndent( string ) }\n\t});\n\n\tif ( false ) {}\n\n\tthis.byStart[ 0 ] = chunk;\n\tthis.byEnd[ string.length ] = chunk;\n}\n\nMagicString.prototype = {\n\taddSourcemapLocation: function addSourcemapLocation ( char ) {\n\t\tthis.sourcemapLocations[ char ] = true;\n\t},\n\n\tappend: function append ( content ) {\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'outro content must be a string' );\n\n\t\tthis.outro += content;\n\t\treturn this;\n\t},\n\n\tclone: function clone () {\n\t\tvar cloned = new MagicString( this.original, { filename: this.filename });\n\n\t\tvar originalChunk = this.firstChunk;\n\t\tvar clonedChunk = cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone();\n\n\t\twhile ( originalChunk ) {\n\t\t\tcloned.byStart[ clonedChunk.start ] = clonedChunk;\n\t\t\tcloned.byEnd[ clonedChunk.end ] = clonedChunk;\n\n\t\t\tvar nextOriginalChunk = originalChunk.next;\n\t\t\tvar nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();\n\n\t\t\tif ( nextClonedChunk ) {\n\t\t\t\tclonedChunk.next = nextClonedChunk;\n\t\t\t\tnextClonedChunk.previous = clonedChunk;\n\n\t\t\t\tclonedChunk = nextClonedChunk;\n\t\t\t}\n\n\t\t\toriginalChunk = nextOriginalChunk;\n\t\t}\n\n\t\tcloned.lastChunk = clonedChunk;\n\n\t\tif ( this.indentExclusionRanges ) {\n\t\t\tcloned.indentExclusionRanges = typeof this.indentExclusionRanges[0] === 'number' ?\n\t\t\t\t[ this.indentExclusionRanges[0], this.indentExclusionRanges[1] ] :\n\t\t\t\tthis.indentExclusionRanges.map( function ( range ) { return [ range.start, range.end ]; } );\n\t\t}\n\n\t\tObject.keys( this.sourcemapLocations ).forEach( function ( loc ) {\n\t\t\tcloned.sourcemapLocations[ loc ] = true;\n\t\t});\n\n\t\treturn cloned;\n\t},\n\n\tgenerateMap: function generateMap ( options ) {\n\t\toptions = options || {};\n\n\t\tvar names = Object.keys( this.storedNames );\n\n\t\tif ( false ) {}\n\t\tvar map = new SourceMap({\n\t\t\tfile: ( options.file ? options.file.split( /[\\/\\\\]/ ).pop() : null ),\n\t\t\tsources: [ options.source ? getRelativePath( options.file || '', options.source ) : null ],\n\t\t\tsourcesContent: options.includeContent ? [ this.original ] : [ null ],\n\t\t\tnames: names,\n\t\t\tmappings: this.getMappings( options.hires, 0, {}, names )\n\t\t});\n\t\tif ( false ) {}\n\n\t\treturn map;\n\t},\n\n\tgetIndentString: function getIndentString () {\n\t\treturn this.indentStr === null ? '\\t' : this.indentStr;\n\t},\n\n\tgetMappings: function getMappings ( hires, sourceIndex, offsets, names ) {\n\t\treturn encodeMappings( this.original, this.intro, this.firstChunk, hires, this.sourcemapLocations, sourceIndex, offsets, names );\n\t},\n\n\tindent: function indent ( indentStr, options ) {\n\t\tvar this$1 = this;\n\n\t\tvar pattern = /^[^\\r\\n]/gm;\n\n\t\tif ( isObject( indentStr ) ) {\n\t\t\toptions = indentStr;\n\t\t\tindentStr = undefined;\n\t\t}\n\n\t\tindentStr = indentStr !== undefined ? indentStr : ( this.indentStr || '\\t' );\n\n\t\tif ( indentStr === '' ) return this; // noop\n\n\t\toptions = options || {};\n\n\t\t// Process exclusion ranges\n\t\tvar isExcluded = {};\n\n\t\tif ( options.exclude ) {\n\t\t\tvar exclusions = typeof options.exclude[0] === 'number' ? [ options.exclude ] : options.exclude;\n\t\t\texclusions.forEach( function ( exclusion ) {\n\t\t\t\tfor ( var i = exclusion[0]; i < exclusion[1]; i += 1 ) {\n\t\t\t\t\tisExcluded[i] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tvar shouldIndentNextCharacter = options.indentStart !== false;\n\t\tvar replacer = function ( match ) {\n\t\t\tif ( shouldIndentNextCharacter ) return (\"\" + indentStr + match);\n\t\t\tshouldIndentNextCharacter = true;\n\t\t\treturn match;\n\t\t};\n\n\t\tthis.intro = this.intro.replace( pattern, replacer );\n\n\t\tvar charIndex = 0;\n\n\t\tvar chunk = this.firstChunk;\n\n\t\twhile ( chunk ) {\n\t\t\tvar end = chunk.end;\n\n\t\t\tif ( chunk.edited ) {\n\t\t\t\tif ( !isExcluded[ charIndex ] ) {\n\t\t\t\t\tchunk.content = chunk.content.replace( pattern, replacer );\n\n\t\t\t\t\tif ( chunk.content.length ) {\n\t\t\t\t\t\tshouldIndentNextCharacter = chunk.content[ chunk.content.length - 1 ] === '\\n';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcharIndex = chunk.start;\n\n\t\t\t\twhile ( charIndex < end ) {\n\t\t\t\t\tif ( !isExcluded[ charIndex ] ) {\n\t\t\t\t\t\tvar char = this$1.original[ charIndex ];\n\n\t\t\t\t\t\tif ( char === '\\n' ) {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = true;\n\t\t\t\t\t\t} else if ( char !== '\\r' && shouldIndentNextCharacter ) {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = false;\n\n\t\t\t\t\t\t\tif ( charIndex === chunk.start ) {\n\t\t\t\t\t\t\t\tchunk.prepend( indentStr );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvar rhs = chunk.split( charIndex );\n\t\t\t\t\t\t\t\trhs.prepend( indentStr );\n\n\t\t\t\t\t\t\t\tthis$1.byStart[ charIndex ] = rhs;\n\t\t\t\t\t\t\t\tthis$1.byEnd[ charIndex ] = chunk;\n\n\t\t\t\t\t\t\t\tchunk = rhs;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcharIndex += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcharIndex = chunk.end;\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tthis.outro = this.outro.replace( pattern, replacer );\n\n\t\treturn this;\n\t},\n\n\tinsert: function insert () {\n\t\tthrow new Error( 'magicString.insert(...) is deprecated. Use insertRight(...) or insertLeft(...)' );\n\t},\n\n\tinsertLeft: function insertLeft ( index, content ) {\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'inserted content must be a string' );\n\n\t\tif ( false ) {}\n\n\t\tthis._split( index );\n\n\t\tvar chunk = this.byEnd[ index ];\n\n\t\tif ( chunk ) {\n\t\t\tchunk.append( content );\n\t\t} else {\n\t\t\tthis.intro += content;\n\t\t}\n\n\t\tif ( false ) {}\n\t\treturn this;\n\t},\n\n\tinsertRight: function insertRight ( index, content ) {\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'inserted content must be a string' );\n\n\t\tif ( false ) {}\n\n\t\tthis._split( index );\n\n\t\tvar chunk = this.byStart[ index ];\n\n\t\tif ( chunk ) {\n\t\t\tchunk.prepend( content );\n\t\t} else {\n\t\t\tthis.outro += content;\n\t\t}\n\n\t\tif ( false ) {}\n\t\treturn this;\n\t},\n\n\tmove: function move ( start, end, index ) {\n\t\tif ( index >= start && index <= end ) throw new Error( 'Cannot move a selection inside itself' );\n\n\t\tif ( false ) {}\n\n\t\tthis._split( start );\n\t\tthis._split( end );\n\t\tthis._split( index );\n\n\t\tvar first = this.byStart[ start ];\n\t\tvar last = this.byEnd[ end ];\n\n\t\tvar oldLeft = first.previous;\n\t\tvar oldRight = last.next;\n\n\t\tvar newRight = this.byStart[ index ];\n\t\tif ( !newRight && last === this.lastChunk ) return this;\n\t\tvar newLeft = newRight ? newRight.previous : this.lastChunk;\n\n\t\tif ( oldLeft ) oldLeft.next = oldRight;\n\t\tif ( oldRight ) oldRight.previous = oldLeft;\n\n\t\tif ( newLeft ) newLeft.next = first;\n\t\tif ( newRight ) newRight.previous = last;\n\n\t\tif ( !first.previous ) this.firstChunk = last.next;\n\t\tif ( !last.next ) {\n\t\t\tthis.lastChunk = first.previous;\n\t\t\tthis.lastChunk.next = null;\n\t\t}\n\n\t\tfirst.previous = newLeft;\n\t\tlast.next = newRight;\n\n\t\tif ( !newLeft ) this.firstChunk = first;\n\t\tif ( !newRight ) this.lastChunk = last;\n\n\t\tif ( false ) {}\n\t\treturn this;\n\t},\n\n\toverwrite: function overwrite ( start, end, content, storeName ) {\n\t\tvar this$1 = this;\n\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'replacement content must be a string' );\n\n\t\twhile ( start < 0 ) start += this$1.original.length;\n\t\twhile ( end < 0 ) end += this$1.original.length;\n\n\t\tif ( end > this.original.length ) throw new Error( 'end is out of bounds' );\n\t\tif ( start === end ) throw new Error( 'Cannot overwrite a zero-length range – use insertLeft or insertRight instead' );\n\n\t\tif ( false ) {}\n\n\t\tthis._split( start );\n\t\tthis._split( end );\n\n\t\tif ( storeName ) {\n\t\t\tvar original = this.original.slice( start, end );\n\t\t\tthis.storedNames[ original ] = true;\n\t\t}\n\n\t\tvar first = this.byStart[ start ];\n\t\tvar last = this.byEnd[ end ];\n\n\t\tif ( first ) {\n\t\t\tfirst.edit( content, storeName );\n\n\t\t\tif ( first !== last ) {\n\t\t\t\tfirst.outro = '';\n\n\t\t\t\tvar chunk = first.next;\n\t\t\t\twhile ( chunk !== last ) {\n\t\t\t\t\tchunk.edit( '', false );\n\t\t\t\t\tchunk.intro = chunk.outro = '';\n\t\t\t\t\tchunk = chunk.next;\n\t\t\t\t}\n\n\t\t\t\tchunk.edit( '', false );\n\t\t\t\tchunk.intro = '';\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\t// must be inserting at the end\n\t\t\tvar newChunk = new Chunk( start, end, '' ).edit( content, storeName );\n\n\t\t\t// TODO last chunk in the array may not be the last chunk, if it's moved...\n\t\t\tlast.next = newChunk;\n\t\t\tnewChunk.previous = last;\n\t\t}\n\n\t\tif ( false ) {}\n\t\treturn this;\n\t},\n\n\tprepend: function prepend ( content ) {\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'outro content must be a string' );\n\n\t\tthis.intro = content + this.intro;\n\t\treturn this;\n\t},\n\n\tremove: function remove ( start, end ) {\n\t\tvar this$1 = this;\n\n\t\twhile ( start < 0 ) start += this$1.original.length;\n\t\twhile ( end < 0 ) end += this$1.original.length;\n\n\t\tif ( start === end ) return this;\n\n\t\tif ( start < 0 || end > this.original.length ) throw new Error( 'Character is out of bounds' );\n\t\tif ( start > end ) throw new Error( 'end must be greater than start' );\n\n\t\treturn this.overwrite( start, end, '', false );\n\t},\n\n\tslice: function slice ( start, end ) {\n\t\tvar this$1 = this;\n\t\tif ( start === void 0 ) start = 0;\n\t\tif ( end === void 0 ) end = this.original.length;\n\n\t\twhile ( start < 0 ) start += this$1.original.length;\n\t\twhile ( end < 0 ) end += this$1.original.length;\n\n\t\tvar result = '';\n\n\t\t// find start chunk\n\t\tvar chunk = this.firstChunk;\n\t\twhile ( chunk && ( chunk.start > start || chunk.end <= start ) ) {\n\n\t\t\t// found end chunk before start\n\t\t\tif ( chunk.start < end && chunk.end >= end ) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tif ( chunk && chunk.edited && chunk.start !== start ) throw new Error((\"Cannot use replaced character \" + start + \" as slice start anchor.\"));\n\n\t\tvar startChunk = chunk;\n\t\twhile ( chunk ) {\n\t\t\tif ( chunk.intro && ( startChunk !== chunk || chunk.start === start ) ) {\n\t\t\t\tresult += chunk.intro;\n\t\t\t}\n\n\t\t\tvar containsEnd = chunk.start < end && chunk.end >= end;\n\t\t\tif ( containsEnd && chunk.edited && chunk.end !== end ) throw new Error((\"Cannot use replaced character \" + end + \" as slice end anchor.\"));\n\n\t\t\tvar sliceStart = startChunk === chunk ? start - chunk.start : 0;\n\t\t\tvar sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;\n\n\t\t\tresult += chunk.content.slice( sliceStart, sliceEnd );\n\n\t\t\tif ( chunk.outro && ( !containsEnd || chunk.end === end ) ) {\n\t\t\t\tresult += chunk.outro;\n\t\t\t}\n\n\t\t\tif ( containsEnd ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t// TODO deprecate this? not really very useful\n\tsnip: function snip ( start, end ) {\n\t\tvar clone = this.clone();\n\t\tclone.remove( 0, start );\n\t\tclone.remove( end, clone.original.length );\n\n\t\treturn clone;\n\t},\n\n\t_split: function _split ( index ) {\n\t\tvar this$1 = this;\n\n\t\tif ( this.byStart[ index ] || this.byEnd[ index ] ) return;\n\n\t\tif ( false ) {}\n\n\t\tvar chunk = this.lastSearchedChunk;\n\t\tvar searchForward = index > chunk.end;\n\n\t\twhile ( true ) {\n\t\t\tif ( chunk.contains( index ) ) return this$1._splitChunk( chunk, index );\n\n\t\t\tchunk = searchForward ?\n\t\t\t\tthis$1.byStart[ chunk.end ] :\n\t\t\t\tthis$1.byEnd[ chunk.start ];\n\t\t}\n\t},\n\n\t_splitChunk: function _splitChunk ( chunk, index ) {\n\t\tif ( chunk.edited && chunk.content.length ) { // zero-length edited chunks are a special case (overlapping replacements)\n\t\t\tvar loc = getLocator( this.original )( index );\n\t\t\tthrow new Error( (\"Cannot split a chunk that has already been edited (\" + (loc.line) + \":\" + (loc.column) + \" – \\\"\" + (chunk.original) + \"\\\")\") );\n\t\t}\n\n\t\tvar newChunk = chunk.split( index );\n\n\t\tthis.byEnd[ index ] = chunk;\n\t\tthis.byStart[ index ] = newChunk;\n\t\tthis.byEnd[ newChunk.end ] = newChunk;\n\n\t\tif ( chunk === this.lastChunk ) this.lastChunk = newChunk;\n\n\t\tthis.lastSearchedChunk = chunk;\n\t\tif ( false ) {}\n\t\treturn true;\n\t},\n\n\ttoString: function toString () {\n\t\tvar str = this.intro;\n\n\t\tvar chunk = this.firstChunk;\n\t\twhile ( chunk ) {\n\t\t\tstr += chunk.toString();\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn str + this.outro;\n\t},\n\n\ttrimLines: function trimLines () {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t},\n\n\ttrim: function trim ( charType ) {\n\t\treturn this.trimStart( charType ).trimEnd( charType );\n\t},\n\n\ttrimEnd: function trimEnd ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( ( charType || '\\\\s' ) + '+$' );\n\n\t\tthis.outro = this.outro.replace( rx, '' );\n\t\tif ( this.outro.length ) return this;\n\n\t\tvar chunk = this.lastChunk;\n\n\t\tdo {\n\t\t\tvar end = chunk.end;\n\t\t\tvar aborted = chunk.trimEnd( rx );\n\n\t\t\t// if chunk was trimmed, we have a new lastChunk\n\t\t\tif ( chunk.end !== end ) {\n\t\t\t\tthis$1.lastChunk = chunk.next;\n\n\t\t\t\tthis$1.byEnd[ chunk.end ] = chunk;\n\t\t\t\tthis$1.byStart[ chunk.next.start ] = chunk.next;\n\t\t\t}\n\n\t\t\tif ( aborted ) return this$1;\n\t\t\tchunk = chunk.previous;\n\t\t} while ( chunk );\n\n\t\treturn this;\n\t},\n\n\ttrimStart: function trimStart ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( '^' + ( charType || '\\\\s' ) + '+' );\n\n\t\tthis.intro = this.intro.replace( rx, '' );\n\t\tif ( this.intro.length ) return this;\n\n\t\tvar chunk = this.firstChunk;\n\n\t\tdo {\n\t\t\tvar end = chunk.end;\n\t\t\tvar aborted = chunk.trimStart( rx );\n\n\t\t\tif ( chunk.end !== end ) {\n\t\t\t\t// special case...\n\t\t\t\tif ( chunk === this$1.lastChunk ) this$1.lastChunk = chunk.next;\n\n\t\t\t\tthis$1.byEnd[ chunk.end ] = chunk;\n\t\t\t\tthis$1.byStart[ chunk.next.start ] = chunk.next;\n\t\t\t}\n\n\t\t\tif ( aborted ) return this$1;\n\t\t\tchunk = chunk.next;\n\t\t} while ( chunk );\n\n\t\treturn this;\n\t}\n};\n\nvar hasOwnProp = Object.prototype.hasOwnProperty;\n\nfunction Bundle ( options ) {\n\tif ( options === void 0 ) options = {};\n\n\tthis.intro = options.intro || '';\n\tthis.separator = options.separator !== undefined ? options.separator : '\\n';\n\n\tthis.sources = [];\n\n\tthis.uniqueSources = [];\n\tthis.uniqueSourceIndexByFilename = {};\n}\n\nBundle.prototype = {\n\taddSource: function addSource ( source ) {\n\t\tif ( source instanceof MagicString ) {\n\t\t\treturn this.addSource({\n\t\t\t\tcontent: source,\n\t\t\t\tfilename: source.filename,\n\t\t\t\tseparator: this.separator\n\t\t\t});\n\t\t}\n\n\t\tif ( !isObject( source ) || !source.content ) {\n\t\t\tthrow new Error( 'bundle.addSource() takes an object with a `content` property, which should be an instance of MagicString, and an optional `filename`' );\n\t\t}\n\n\t\t[ 'filename', 'indentExclusionRanges', 'separator' ].forEach( function ( option ) {\n\t\t\tif ( !hasOwnProp.call( source, option ) ) source[ option ] = source.content[ option ];\n\t\t});\n\n\t\tif ( source.separator === undefined ) { // TODO there's a bunch of this sort of thing, needs cleaning up\n\t\t\tsource.separator = this.separator;\n\t\t}\n\n\t\tif ( source.filename ) {\n\t\t\tif ( !hasOwnProp.call( this.uniqueSourceIndexByFilename, source.filename ) ) {\n\t\t\t\tthis.uniqueSourceIndexByFilename[ source.filename ] = this.uniqueSources.length;\n\t\t\t\tthis.uniqueSources.push({ filename: source.filename, content: source.content.original });\n\t\t\t} else {\n\t\t\t\tvar uniqueSource = this.uniqueSources[ this.uniqueSourceIndexByFilename[ source.filename ] ];\n\t\t\t\tif ( source.content.original !== uniqueSource.content ) {\n\t\t\t\t\tthrow new Error( (\"Illegal source: same filename (\" + (source.filename) + \"), different contents\") );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.sources.push( source );\n\t\treturn this;\n\t},\n\n\tappend: function append ( str, options ) {\n\t\tthis.addSource({\n\t\t\tcontent: new MagicString( str ),\n\t\t\tseparator: ( options && options.separator ) || ''\n\t\t});\n\n\t\treturn this;\n\t},\n\n\tclone: function clone () {\n\t\tvar bundle = new Bundle({\n\t\t\tintro: this.intro,\n\t\t\tseparator: this.separator\n\t\t});\n\n\t\tthis.sources.forEach( function ( source ) {\n\t\t\tbundle.addSource({\n\t\t\t\tfilename: source.filename,\n\t\t\t\tcontent: source.content.clone(),\n\t\t\t\tseparator: source.separator\n\t\t\t});\n\t\t});\n\n\t\treturn bundle;\n\t},\n\n\tgenerateMap: function generateMap ( options ) {\n\t\tvar this$1 = this;\n\n\t\tvar offsets = {};\n\n\t\tvar names = [];\n\t\tthis.sources.forEach( function ( source ) {\n\t\t\tObject.keys( source.content.storedNames ).forEach( function ( name ) {\n\t\t\t\tif ( !~names.indexOf( name ) ) names.push( name );\n\t\t\t});\n\t\t});\n\n\t\tvar encoded = (\n\t\t\tgetSemis( this.intro ) +\n\t\t\tthis.sources.map( function ( source, i ) {\n\t\t\t\tvar prefix = ( i > 0 ) ? ( getSemis( source.separator ) || ',' ) : '';\n\t\t\t\tvar mappings;\n\n\t\t\t\t// we don't bother encoding sources without a filename\n\t\t\t\tif ( !source.filename ) {\n\t\t\t\t\tmappings = getSemis( source.content.toString() );\n\t\t\t\t} else {\n\t\t\t\t\tvar sourceIndex = this$1.uniqueSourceIndexByFilename[ source.filename ];\n\t\t\t\t\tmappings = source.content.getMappings( options.hires, sourceIndex, offsets, names );\n\t\t\t\t}\n\n\t\t\t\treturn prefix + mappings;\n\t\t\t}).join( '' )\n\t\t);\n\n\t\treturn new SourceMap({\n\t\t\tfile: ( options.file ? options.file.split( /[\\/\\\\]/ ).pop() : null ),\n\t\t\tsources: this.uniqueSources.map( function ( source ) {\n\t\t\t\treturn options.file ? getRelativePath( options.file, source.filename ) : source.filename;\n\t\t\t}),\n\t\t\tsourcesContent: this.uniqueSources.map( function ( source ) {\n\t\t\t\treturn options.includeContent ? source.content : null;\n\t\t\t}),\n\t\t\tnames: names,\n\t\t\tmappings: encoded\n\t\t});\n\t},\n\n\tgetIndentString: function getIndentString () {\n\t\tvar indentStringCounts = {};\n\n\t\tthis.sources.forEach( function ( source ) {\n\t\t\tvar indentStr = source.content.indentStr;\n\n\t\t\tif ( indentStr === null ) return;\n\n\t\t\tif ( !indentStringCounts[ indentStr ] ) indentStringCounts[ indentStr ] = 0;\n\t\t\tindentStringCounts[ indentStr ] += 1;\n\t\t});\n\n\t\treturn ( Object.keys( indentStringCounts ).sort( function ( a, b ) {\n\t\t\treturn indentStringCounts[a] - indentStringCounts[b];\n\t\t})[0] ) || '\\t';\n\t},\n\n\tindent: function indent ( indentStr ) {\n\t\tvar this$1 = this;\n\n\t\tif ( !arguments.length ) {\n\t\t\tindentStr = this.getIndentString();\n\t\t}\n\n\t\tif ( indentStr === '' ) return this; // noop\n\n\t\tvar trailingNewline = !this.intro || this.intro.slice( -1 ) === '\\n';\n\n\t\tthis.sources.forEach( function ( source, i ) {\n\t\t\tvar separator = source.separator !== undefined ? source.separator : this$1.separator;\n\t\t\tvar indentStart = trailingNewline || ( i > 0 && /\\r?\\n$/.test( separator ) );\n\n\t\t\tsource.content.indent( indentStr, {\n\t\t\t\texclude: source.indentExclusionRanges,\n\t\t\t\tindentStart: indentStart//: trailingNewline || /\\r?\\n$/.test( separator )  //true///\\r?\\n/.test( separator )\n\t\t\t});\n\n\t\t\t// TODO this is a very slow way to determine this\n\t\t\ttrailingNewline = source.content.toString().slice( 0, -1 ) === '\\n';\n\t\t});\n\n\t\tif ( this.intro ) {\n\t\t\tthis.intro = indentStr + this.intro.replace( /^[^\\n]/gm, function ( match, index ) {\n\t\t\t\treturn index > 0 ? indentStr + match : match;\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tprepend: function prepend ( str ) {\n\t\tthis.intro = str + this.intro;\n\t\treturn this;\n\t},\n\n\ttoString: function toString () {\n\t\tvar this$1 = this;\n\n\t\tvar body = this.sources.map( function ( source, i ) {\n\t\t\tvar separator = source.separator !== undefined ? source.separator : this$1.separator;\n\t\t\tvar str = ( i > 0 ? separator : '' ) + source.content.toString();\n\n\t\t\treturn str;\n\t\t}).join( '' );\n\n\t\treturn this.intro + body;\n\t},\n\n\ttrimLines: function trimLines () {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t},\n\n\ttrim: function trim ( charType ) {\n\t\treturn this.trimStart( charType ).trimEnd( charType );\n\t},\n\n\ttrimStart: function trimStart ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( '^' + ( charType || '\\\\s' ) + '+' );\n\t\tthis.intro = this.intro.replace( rx, '' );\n\n\t\tif ( !this.intro ) {\n\t\t\tvar source;\n\t\t\tvar i = 0;\n\n\t\t\tdo {\n\t\t\t\tsource = this$1.sources[i];\n\n\t\t\t\tif ( !source ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tsource.content.trimStart( charType );\n\t\t\t\ti += 1;\n\t\t\t} while ( source.content.toString() === '' ); // TODO faster way to determine non-empty source?\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttrimEnd: function trimEnd ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( ( charType || '\\\\s' ) + '+$' );\n\n\t\tvar source;\n\t\tvar i = this.sources.length - 1;\n\n\t\tdo {\n\t\t\tsource = this$1.sources[i];\n\n\t\t\tif ( !source ) {\n\t\t\t\tthis$1.intro = this$1.intro.replace( rx, '' );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tsource.content.trimEnd( charType );\n\t\t\ti -= 1;\n\t\t} while ( source.content.toString() === '' ); // TODO faster way to determine non-empty source?\n\n\t\treturn this;\n\t}\n};\n\nfunction getSemis ( str ) {\n\treturn new Array( str.split( '\\n' ).length ).join( ';' );\n}\n\nMagicString.Bundle = Bundle;\n\nmodule.exports = MagicString;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/node-libs-browser/node_modules/buffer/index.js\").Buffer))\n\n/***/ }),\n\n/***/ \"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/node-libs-browser/node_modules/buffer/index.js\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(\"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(\"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(\"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/webpack/buildin/global.js\")))\n\n/***/ }),\n\n/***/ \"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/vlq/src/vlq.js\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"decode\"] = decode;\n/* harmony export (immutable) */ __webpack_exports__[\"encode\"] = encode;\nvar charToInteger = {};\nvar integerToChar = {};\n\n'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split( '' ).forEach( function ( char, i ) {\n\tcharToInteger[ char ] = i;\n\tintegerToChar[ i ] = char;\n});\n\nfunction decode ( string ) {\n\tvar result = [];\n\tvar shift = 0;\n\tvar value = 0;\n\n\tfor ( var i = 0; i < string.length; i += 1 ) {\n\t\tvar integer = charToInteger[ string[i] ];\n\n\t\tif ( integer === undefined ) {\n\t\t\tthrow new Error( 'Invalid character (' + string[i] + ')' );\n\t\t}\n\n\t\tvar hasContinuationBit = integer & 32;\n\n\t\tinteger &= 31;\n\t\tvalue += integer << shift;\n\n\t\tif ( hasContinuationBit ) {\n\t\t\tshift += 5;\n\t\t} else {\n\t\t\tvar shouldNegate = value & 1;\n\t\t\tvalue >>= 1;\n\n\t\t\tresult.push( shouldNegate ? -value : value );\n\n\t\t\t// reset\n\t\t\tvalue = shift = 0;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction encode ( value ) {\n\tvar result;\n\n\tif ( typeof value === 'number' ) {\n\t\tresult = encodeInteger( value );\n\t} else {\n\t\tresult = '';\n\t\tfor ( var i = 0; i < value.length; i += 1 ) {\n\t\t\tresult += encodeInteger( value[i] );\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction encodeInteger ( num ) {\n\tvar result = '';\n\n\tif ( num < 0 ) {\n\t\tnum = ( -num << 1 ) | 1;\n\t} else {\n\t\tnum <<= 1;\n\t}\n\n\tdo {\n\t\tvar clamped = num & 31;\n\t\tnum >>= 5;\n\n\t\tif ( num > 0 ) {\n\t\t\tclamped |= 32;\n\t\t}\n\n\t\tresult += integerToChar[ clamped ];\n\t} while ( num > 0 );\n\n\treturn result;\n}\n\n\n/***/ }),\n\n/***/ \"/home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/webpack/buildin/global.js\":\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ })\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// 9f0e56f7e164c1756812.worker.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/css-in-js-playground/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"/home/travis/build/DSchau/css-in-js-playground/node_modules/awesome-typescript-loader/dist/entry.js!/home/travis/build/DSchau/css-in-js-playground/src/Worker.ts\");\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9f0e56f7e164c1756812","import * as buble from 'buble';\n\nonmessage = ev => {\n  const { data } = ev;\n  const { code } = data;\n  try {\n    const { code: transformed } = buble.transform(code, {\n      transforms: {\n        modules: false,\n        templateString: false\n      }\n    });\n    (postMessage as any)(transformed);\n  } catch (e) {\n    console.warn(e);\n  }\n};\n\nexport default () => {}; // only to get around annoying typescript errors\n\n\n\n// WEBPACK FOOTER //\n// ./src/Worker.ts","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.acorn = global.acorn || {})));\n}(this, function (exports) { 'use strict';\n\n  // Reserved word lists for various dialects of the language\n\n  var reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    7: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n  }\n\n  // And the keywords\n\n  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\"\n\n  var keywords = {\n    5: ecma5AndLessKeywords,\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\n  }\n\n  // ## Character categories\n\n  // Big ugly regular expressions that match characters in the\n  // whitespace, identifier, and identifier-start categories. These\n  // are only applied when a character is found to actually have a\n  // code point above 128.\n  // Generated by `bin/generate-identifier-regex.js`.\n\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fd5\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ae\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\"\n  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d4-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d01-\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf8\\u1cf9\\u1dc0-\\u1df5\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\"\n\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\")\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\")\n\n  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null\n\n  // These are a run-length and offset encoded representation of the\n  // >0xffff code points that are a valid part of identifiers. The\n  // offset starts at 0x10000, and each pair of numbers represents an\n  // offset to the next range, and then a size of the range. They were\n  // generated by bin/generate-identifier-regex.js\n  var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,17,26,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,449,56,264,8,2,36,18,0,50,29,881,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,0,32,6124,20,754,9486,1,3071,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,10591,541]\n  var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,838,7,2,7,17,9,57,21,2,13,19882,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239]\n\n  // This has a complexity linear to the value of the code. The\n  // assumption is that looking up astral identifier characters is\n  // rare.\n  function isInAstralSet(code, set) {\n    var pos = 0x10000\n    for (var i = 0; i < set.length; i += 2) {\n      pos += set[i]\n      if (pos > code) return false\n      pos += set[i + 1]\n      if (pos >= code) return true\n    }\n  }\n\n  // Test whether a given character code starts an identifier.\n\n  function isIdentifierStart(code, astral) {\n    if (code < 65) return code === 36\n    if (code < 91) return true\n    if (code < 97) return code === 95\n    if (code < 123) return true\n    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    if (astral === false) return false\n    return isInAstralSet(code, astralIdentifierStartCodes)\n  }\n\n  // Test whether a given character is part of an identifier.\n\n  function isIdentifierChar(code, astral) {\n    if (code < 48) return code === 36\n    if (code < 58) return true\n    if (code < 65) return false\n    if (code < 91) return true\n    if (code < 97) return code === 95\n    if (code < 123) return true\n    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))\n    if (astral === false) return false\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n  }\n\n  // ## Token types\n\n  // The assignment of fine-grained, information-carrying type objects\n  // allows the tokenizer to store the information it has about a\n  // token in a way that is very cheap for the parser to look up.\n\n  // All token type variables start with an underscore, to make them\n  // easy to recognize.\n\n  // The `beforeExpr` property is used to disambiguate between regular\n  // expressions and divisions. It is set on all token types that can\n  // be followed by an expression (thus, a slash after them would be a\n  // regular expression).\n  //\n  // The `startsExpr` property is used to check if the token ends a\n  // `yield` expression. It is set on all token types that either can\n  // directly start an expression (like a quotation mark) or can\n  // continue an expression (like the body of a string).\n  //\n  // `isLoop` marks a keyword as starting a loop, which is important\n  // to know when parsing a label, in order to allow or disallow\n  // continue jumps to that label.\n\n  var TokenType = function TokenType(label, conf) {\n    if ( conf === void 0 ) conf = {};\n\n    this.label = label\n    this.keyword = conf.keyword\n    this.beforeExpr = !!conf.beforeExpr\n    this.startsExpr = !!conf.startsExpr\n    this.isLoop = !!conf.isLoop\n    this.isAssign = !!conf.isAssign\n    this.prefix = !!conf.prefix\n    this.postfix = !!conf.postfix\n    this.binop = conf.binop || null\n    this.updateContext = null\n  };\n\n  function binop(name, prec) {\n    return new TokenType(name, {beforeExpr: true, binop: prec})\n  }\n  var beforeExpr = {beforeExpr: true};\n  var startsExpr = {startsExpr: true};\n  // Map keyword names to token types.\n\n  var keywordTypes = {}\n\n  // Succinct definitions of keyword token types\n  function kw(name, options) {\n    if ( options === void 0 ) options = {};\n\n    options.keyword = name\n    return keywordTypes[name] = new TokenType(name, options)\n  }\n\n  var tt = {\n    num: new TokenType(\"num\", startsExpr),\n    regexp: new TokenType(\"regexp\", startsExpr),\n    string: new TokenType(\"string\", startsExpr),\n    name: new TokenType(\"name\", startsExpr),\n    eof: new TokenType(\"eof\"),\n\n    // Punctuation token types.\n    bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n    braceR: new TokenType(\"}\"),\n    parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", beforeExpr),\n    semi: new TokenType(\";\", beforeExpr),\n    colon: new TokenType(\":\", beforeExpr),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", beforeExpr),\n    arrow: new TokenType(\"=>\", beforeExpr),\n    template: new TokenType(\"template\"),\n    ellipsis: new TokenType(\"...\", beforeExpr),\n    backQuote: new TokenType(\"`\", startsExpr),\n    dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n    // Operators. These carry several kinds of properties to help the\n    // parser use them properly (the presence of these properties is\n    // what categorizes them as operators).\n    //\n    // `binop`, when present, specifies that this operator is a binary\n    // operator, and will refer to its precedence.\n    //\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\n    // unary operator.\n    //\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n    // binary operators with a very low precedence, that should result\n    // in AssignmentExpression nodes.\n\n    eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n    assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n    incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n    prefix: new TokenType(\"prefix\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    logicalOR: binop(\"||\", 1),\n    logicalAND: binop(\"&&\", 2),\n    bitwiseOR: binop(\"|\", 3),\n    bitwiseXOR: binop(\"^\", 4),\n    bitwiseAND: binop(\"&\", 5),\n    equality: binop(\"==/!=\", 6),\n    relational: binop(\"</>\", 7),\n    bitShift: binop(\"<</>>\", 8),\n    plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n    modulo: binop(\"%\", 10),\n    star: binop(\"*\", 10),\n    slash: binop(\"/\", 10),\n    starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n    // Keyword token types.\n    _break: kw(\"break\"),\n    _case: kw(\"case\", beforeExpr),\n    _catch: kw(\"catch\"),\n    _continue: kw(\"continue\"),\n    _debugger: kw(\"debugger\"),\n    _default: kw(\"default\", beforeExpr),\n    _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n    _else: kw(\"else\", beforeExpr),\n    _finally: kw(\"finally\"),\n    _for: kw(\"for\", {isLoop: true}),\n    _function: kw(\"function\", startsExpr),\n    _if: kw(\"if\"),\n    _return: kw(\"return\", beforeExpr),\n    _switch: kw(\"switch\"),\n    _throw: kw(\"throw\", beforeExpr),\n    _try: kw(\"try\"),\n    _var: kw(\"var\"),\n    _const: kw(\"const\"),\n    _while: kw(\"while\", {isLoop: true}),\n    _with: kw(\"with\"),\n    _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n    _this: kw(\"this\", startsExpr),\n    _super: kw(\"super\", startsExpr),\n    _class: kw(\"class\"),\n    _extends: kw(\"extends\", beforeExpr),\n    _export: kw(\"export\"),\n    _import: kw(\"import\"),\n    _null: kw(\"null\", startsExpr),\n    _true: kw(\"true\", startsExpr),\n    _false: kw(\"false\", startsExpr),\n    _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n    _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n    _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n  }\n\n  // Matches a whole line break (where CRLF is considered a single\n  // line break). Used to count lines.\n\n  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/\n  var lineBreakG = new RegExp(lineBreak.source, \"g\")\n\n  function isNewLine(code) {\n    return code === 10 || code === 13 || code === 0x2028 || code == 0x2029\n  }\n\n  var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/\n\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g\n\n  function isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\"\n  }\n\n  // Checks if an object has a property.\n\n  function has(obj, propName) {\n    return Object.prototype.hasOwnProperty.call(obj, propName)\n  }\n\n  // These are used when `options.locations` is on, for the\n  // `startLoc` and `endLoc` properties.\n\n  var Position = function Position(line, col) {\n    this.line = line\n    this.column = col\n  };\n\n  Position.prototype.offset = function offset (n) {\n    return new Position(this.line, this.column + n)\n  };\n\n  var SourceLocation = function SourceLocation(p, start, end) {\n    this.start = start\n    this.end = end\n    if (p.sourceFile !== null) this.source = p.sourceFile\n  };\n\n  // The `getLineInfo` function is mostly useful when the\n  // `locations` option is off (for performance reasons) and you\n  // want to find the line/column position for a given character\n  // offset. `input` should be the code string that the offset refers\n  // into.\n\n  function getLineInfo(input, offset) {\n    for (var line = 1, cur = 0;;) {\n      lineBreakG.lastIndex = cur\n      var match = lineBreakG.exec(input)\n      if (match && match.index < offset) {\n        ++line\n        cur = match.index + match[0].length\n      } else {\n        return new Position(line, offset - cur)\n      }\n    }\n  }\n\n  // A second optional argument can be given to further configure\n  // the parser process. These options are recognized:\n\n  var defaultOptions = {\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must\n    // be either 3, or 5, or 6. This influences support for strict\n    // mode, the set of reserved words, support for getters and\n    // setters and other features. The default is 6.\n    ecmaVersion: 6,\n    // Source type (\"script\" or \"module\") for different semantics\n    sourceType: \"script\",\n    // `onInsertedSemicolon` can be a callback that will be called\n    // when a semicolon is automatically inserted. It will be passed\n    // th position of the comma as an offset, and if `locations` is\n    // enabled, it is given the location as a `{line, column}` object\n    // as second argument.\n    onInsertedSemicolon: null,\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n    // trailing commas.\n    onTrailingComma: null,\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\n    // Set `allowReserved` to a boolean value to explicitly turn this on\n    // an off. When this option has the value \"never\", reserved words\n    // and keywords can also not be used as property names.\n    allowReserved: null,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // When enabled, hashbang directive in the beginning of file\n    // is allowed and treated as a line comment.\n    allowHashBang: false,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onToken` option, which will\n    // cause Acorn to call that function with object in the same\n    // format as tokens returned from `tokenizer().getToken()`. Note\n    // that you are not allowed to call the parser from the\n    // callback—that will corrupt its internal state.\n    onToken: null,\n    // A function can be passed as `onComment` option, which will\n    // cause Acorn to call that function with `(block, text, start,\n    // end)` parameters whenever a comment is skipped. `block` is a\n    // boolean indicating whether this is a block (`/* */`) comment,\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback—that will corrupt its internal state.\n    onComment: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // When enabled, parenthesized expressions are represented by\n    // (non-standard) ParenthesizedExpression nodes\n    preserveParens: false,\n    plugins: {}\n  }\n\n  // Interpret and default an options object\n\n  function getOptions(opts) {\n    var options = {}\n    for (var opt in defaultOptions)\n      options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]\n    if (options.allowReserved == null)\n      options.allowReserved = options.ecmaVersion < 5\n\n    if (isArray(options.onToken)) {\n      var tokens = options.onToken\n      options.onToken = function (token) { return tokens.push(token); }\n    }\n    if (isArray(options.onComment))\n      options.onComment = pushComment(options, options.onComment)\n\n    return options\n  }\n\n  function pushComment(options, array) {\n    return function (block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? 'Block' : 'Line',\n        value: text,\n        start: start,\n        end: end\n      }\n      if (options.locations)\n        comment.loc = new SourceLocation(this, startLoc, endLoc)\n      if (options.ranges)\n        comment.range = [start, end]\n      array.push(comment)\n    }\n  }\n\n  // Registered plugins\n  var plugins = {}\n\n  function keywordRegexp(words) {\n    return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\")\n  }\n\n  var Parser = function Parser(options, input, startPos) {\n    this.options = options = getOptions(options)\n    this.sourceFile = options.sourceFile\n    this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5])\n    var reserved = options.allowReserved ? \"\" :\n        reservedWords[options.ecmaVersion] + (options.sourceType == \"module\" ? \" await\" : \"\")\n    this.reservedWords = keywordRegexp(reserved)\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict\n    this.reservedWordsStrict = keywordRegexp(reservedStrict)\n    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind)\n    this.input = String(input)\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false\n\n    // Load plugins\n    this.loadPlugins(options.plugins)\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos\n      this.lineStart = Math.max(0, this.input.lastIndexOf(\"\\n\", startPos))\n      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length\n    } else {\n      this.pos = this.lineStart = 0\n      this.curLine = 1\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = tt.eof\n    // For tokens that include more information than their type, the value\n    this.value = null\n    // Its start and end offset\n    this.start = this.end = this.pos\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition()\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null\n    this.lastTokStart = this.lastTokEnd = this.pos\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext()\n    this.exprAllowed = true\n\n    // Figure out if it's a module code.\n    this.strict = this.inModule = options.sourceType === \"module\"\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1\n\n    // Flags to track whether we are in a function, a generator.\n    this.inFunction = this.inGenerator = false\n    // Labels in scope.\n    this.labels = []\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!')\n      this.skipLineComment(2)\n  };\n\n  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n  Parser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };\n  Parser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };\n\n  Parser.prototype.extend = function extend (name, f) {\n    this[name] = f(this[name])\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n      var this$1 = this;\n\n    for (var name in pluginConfigs) {\n      var plugin = plugins[name]\n      if (!plugin) throw new Error(\"Plugin '\" + name + \"' not found\")\n      plugin(this$1, pluginConfigs[name])\n    }\n  };\n\n  Parser.prototype.parse = function parse () {\n    var node = this.options.program || this.startNode()\n    this.nextToken()\n    return this.parseTopLevel(node)\n  };\n\n  var pp = Parser.prototype\n\n  // ## Parser utilities\n\n  // Test whether a statement node is the string literal `\"use strict\"`.\n\n  pp.isUseStrict = function(stmt) {\n    return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"Literal\" &&\n      stmt.expression.raw.slice(1, -1) === \"use strict\"\n  }\n\n  // Predicate that tests whether the next token is of the given\n  // type, and if yes, consumes it as a side effect.\n\n  pp.eat = function(type) {\n    if (this.type === type) {\n      this.next()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  pp.isContextual = function(name) {\n    return this.type === tt.name && this.value === name\n  }\n\n  // Consumes contextual keyword if possible.\n\n  pp.eatContextual = function(name) {\n    return this.value === name && this.eat(tt.name)\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  pp.expectContextual = function(name) {\n    if (!this.eatContextual(name)) this.unexpected()\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  pp.canInsertSemicolon = function() {\n    return this.type === tt.eof ||\n      this.type === tt.braceR ||\n      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  }\n\n  pp.insertSemicolon = function() {\n    if (this.canInsertSemicolon()) {\n      if (this.options.onInsertedSemicolon)\n        this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc)\n      return true\n    }\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  pp.semicolon = function() {\n    if (!this.eat(tt.semi) && !this.insertSemicolon()) this.unexpected()\n  }\n\n  pp.afterTrailingComma = function(tokType) {\n    if (this.type == tokType) {\n      if (this.options.onTrailingComma)\n        this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc)\n      this.next()\n      return true\n    }\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error.\n\n  pp.expect = function(type) {\n    this.eat(type) || this.unexpected()\n  }\n\n  // Raise an unexpected token error.\n\n  pp.unexpected = function(pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\")\n  }\n\n  var DestructuringErrors = function DestructuringErrors() {\n    this.shorthandAssign = 0\n    this.trailingComma = 0\n  };\n\n  pp.checkPatternErrors = function(refDestructuringErrors, andThrow) {\n    var trailing = refDestructuringErrors && refDestructuringErrors.trailingComma\n    if (!andThrow) return !!trailing\n    if (trailing) this.raise(trailing, \"Comma is not permitted after the rest element\")\n  }\n\n  pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n    var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign\n    if (!andThrow) return !!pos\n    if (pos) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\")\n  }\n\n  var pp$1 = Parser.prototype\n\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  pp$1.parseTopLevel = function(node) {\n    var this$1 = this;\n\n    var first = true\n    if (!node.body) node.body = []\n    while (this.type !== tt.eof) {\n      var stmt = this$1.parseStatement(true, true)\n      node.body.push(stmt)\n      if (first) {\n        if (this$1.isUseStrict(stmt)) this$1.setStrict(true)\n        first = false\n      }\n    }\n    this.next()\n    if (this.options.ecmaVersion >= 6) {\n      node.sourceType = this.options.sourceType\n    }\n    return this.finishNode(node, \"Program\")\n  }\n\n  var loopLabel = {kind: \"loop\"};\n  var switchLabel = {kind: \"switch\"};\n  pp$1.isLet = function() {\n    if (this.type !== tt.name || this.options.ecmaVersion < 6 || this.value != \"let\") return false\n    skipWhiteSpace.lastIndex = this.pos\n    var skip = skipWhiteSpace.exec(this.input)\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next)\n    if (nextCh === 91 || nextCh == 123) return true // '{' and '['\n    if (isIdentifierStart(nextCh, true)) {\n      for (var pos = next + 1; isIdentifierChar(this.input.charCodeAt(pos), true); ++pos) {}\n      var ident = this.input.slice(next, pos)\n      if (!this.isKeyword(ident)) return true\n    }\n    return false\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  pp$1.parseStatement = function(declaration, topLevel) {\n    var starttype = this.type, node = this.startNode(), kind\n\n    if (this.isLet()) {\n      starttype = tt._var\n      kind = \"let\"\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n    case tt._break: case tt._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n    case tt._debugger: return this.parseDebuggerStatement(node)\n    case tt._do: return this.parseDoStatement(node)\n    case tt._for: return this.parseForStatement(node)\n    case tt._function:\n      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected()\n      return this.parseFunctionStatement(node)\n    case tt._class:\n      if (!declaration) this.unexpected()\n      return this.parseClass(node, true)\n    case tt._if: return this.parseIfStatement(node)\n    case tt._return: return this.parseReturnStatement(node)\n    case tt._switch: return this.parseSwitchStatement(node)\n    case tt._throw: return this.parseThrowStatement(node)\n    case tt._try: return this.parseTryStatement(node)\n    case tt._const: case tt._var:\n      kind = kind || this.value\n      if (!declaration && kind != \"var\") this.unexpected()\n      return this.parseVarStatement(node, kind)\n    case tt._while: return this.parseWhileStatement(node)\n    case tt._with: return this.parseWithStatement(node)\n    case tt.braceL: return this.parseBlock()\n    case tt.semi: return this.parseEmptyStatement(node)\n    case tt._export:\n    case tt._import:\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel)\n          this.raise(this.start, \"'import' and 'export' may only appear at the top level\")\n        if (!this.inModule)\n          this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\")\n      }\n      return starttype === tt._import ? this.parseImport(node) : this.parseExport(node)\n\n      // If the statement does not start with a statement keyword or a\n      // brace, it's an ExpressionStatement or LabeledStatement. We\n      // simply start parsing an expression, and afterwards, if the\n      // next token is a colon and the expression was a simple\n      // Identifier node, we switch to interpreting it as a label.\n    default:\n      var maybeName = this.value, expr = this.parseExpression()\n      if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon))\n        return this.parseLabeledStatement(node, maybeName, expr)\n      else return this.parseExpressionStatement(node, expr)\n    }\n  }\n\n  pp$1.parseBreakContinueStatement = function(node, keyword) {\n    var this$1 = this;\n\n    var isBreak = keyword == \"break\"\n    this.next()\n    if (this.eat(tt.semi) || this.insertSemicolon()) node.label = null\n    else if (this.type !== tt.name) this.unexpected()\n    else {\n      node.label = this.parseIdent()\n      this.semicolon()\n    }\n\n    // Verify that there is an actual destination to break or\n    // continue to.\n    for (var i = 0; i < this.labels.length; ++i) {\n      var lab = this$1.labels[i]\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break\n        if (node.label && isBreak) break\n      }\n    }\n    if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword)\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n  }\n\n  pp$1.parseDebuggerStatement = function(node) {\n    this.next()\n    this.semicolon()\n    return this.finishNode(node, \"DebuggerStatement\")\n  }\n\n  pp$1.parseDoStatement = function(node) {\n    this.next()\n    this.labels.push(loopLabel)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    this.expect(tt._while)\n    node.test = this.parseParenExpression()\n    if (this.options.ecmaVersion >= 6)\n      this.eat(tt.semi)\n    else\n      this.semicolon()\n    return this.finishNode(node, \"DoWhileStatement\")\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  pp$1.parseForStatement = function(node) {\n    this.next()\n    this.labels.push(loopLabel)\n    this.expect(tt.parenL)\n    if (this.type === tt.semi) return this.parseFor(node, null)\n    var isLet = this.isLet()\n    if (this.type === tt._var || this.type === tt._const || isLet) {\n      var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value\n      this.next()\n      this.parseVar(init$1, true, kind)\n      this.finishNode(init$1, \"VariableDeclaration\")\n      if ((this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n          !(kind !== \"var\" && init$1.declarations[0].init))\n        return this.parseForIn(node, init$1)\n      return this.parseFor(node, init$1)\n    }\n    var refDestructuringErrors = new DestructuringErrors\n    var init = this.parseExpression(true, refDestructuringErrors)\n    if (this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      this.checkPatternErrors(refDestructuringErrors, true)\n      this.toAssignable(init)\n      this.checkLVal(init)\n      return this.parseForIn(node, init)\n    } else {\n      this.checkExpressionErrors(refDestructuringErrors, true)\n    }\n    return this.parseFor(node, init)\n  }\n\n  pp$1.parseFunctionStatement = function(node) {\n    this.next()\n    return this.parseFunction(node, true)\n  }\n\n  pp$1.parseIfStatement = function(node) {\n    this.next()\n    node.test = this.parseParenExpression()\n    node.consequent = this.parseStatement(false)\n    node.alternate = this.eat(tt._else) ? this.parseStatement(false) : null\n    return this.finishNode(node, \"IfStatement\")\n  }\n\n  pp$1.parseReturnStatement = function(node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n      this.raise(this.start, \"'return' outside of function\")\n    this.next()\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.eat(tt.semi) || this.insertSemicolon()) node.argument = null\n    else { node.argument = this.parseExpression(); this.semicolon() }\n    return this.finishNode(node, \"ReturnStatement\")\n  }\n\n  pp$1.parseSwitchStatement = function(node) {\n    var this$1 = this;\n\n    this.next()\n    node.discriminant = this.parseParenExpression()\n    node.cases = []\n    this.expect(tt.braceL)\n    this.labels.push(switchLabel)\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    for (var cur, sawDefault = false; this.type != tt.braceR;) {\n      if (this$1.type === tt._case || this$1.type === tt._default) {\n        var isCase = this$1.type === tt._case\n        if (cur) this$1.finishNode(cur, \"SwitchCase\")\n        node.cases.push(cur = this$1.startNode())\n        cur.consequent = []\n        this$1.next()\n        if (isCase) {\n          cur.test = this$1.parseExpression()\n        } else {\n          if (sawDefault) this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\")\n          sawDefault = true\n          cur.test = null\n        }\n        this$1.expect(tt.colon)\n      } else {\n        if (!cur) this$1.unexpected()\n        cur.consequent.push(this$1.parseStatement(true))\n      }\n    }\n    if (cur) this.finishNode(cur, \"SwitchCase\")\n    this.next() // Closing brace\n    this.labels.pop()\n    return this.finishNode(node, \"SwitchStatement\")\n  }\n\n  pp$1.parseThrowStatement = function(node) {\n    this.next()\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n      this.raise(this.lastTokEnd, \"Illegal newline after throw\")\n    node.argument = this.parseExpression()\n    this.semicolon()\n    return this.finishNode(node, \"ThrowStatement\")\n  }\n\n  // Reused empty array added for node fields that are always empty.\n\n  var empty = []\n\n  pp$1.parseTryStatement = function(node) {\n    this.next()\n    node.block = this.parseBlock()\n    node.handler = null\n    if (this.type === tt._catch) {\n      var clause = this.startNode()\n      this.next()\n      this.expect(tt.parenL)\n      clause.param = this.parseBindingAtom()\n      this.checkLVal(clause.param, true)\n      this.expect(tt.parenR)\n      clause.body = this.parseBlock()\n      node.handler = this.finishNode(clause, \"CatchClause\")\n    }\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n    if (!node.handler && !node.finalizer)\n      this.raise(node.start, \"Missing catch or finally clause\")\n    return this.finishNode(node, \"TryStatement\")\n  }\n\n  pp$1.parseVarStatement = function(node, kind) {\n    this.next()\n    this.parseVar(node, false, kind)\n    this.semicolon()\n    return this.finishNode(node, \"VariableDeclaration\")\n  }\n\n  pp$1.parseWhileStatement = function(node) {\n    this.next()\n    node.test = this.parseParenExpression()\n    this.labels.push(loopLabel)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, \"WhileStatement\")\n  }\n\n  pp$1.parseWithStatement = function(node) {\n    if (this.strict) this.raise(this.start, \"'with' in strict mode\")\n    this.next()\n    node.object = this.parseParenExpression()\n    node.body = this.parseStatement(false)\n    return this.finishNode(node, \"WithStatement\")\n  }\n\n  pp$1.parseEmptyStatement = function(node) {\n    this.next()\n    return this.finishNode(node, \"EmptyStatement\")\n  }\n\n  pp$1.parseLabeledStatement = function(node, maybeName, expr) {\n    var this$1 = this;\n\n    for (var i = 0; i < this.labels.length; ++i)\n      if (this$1.labels[i].name === maybeName) this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\")\n    var kind = this.type.isLoop ? \"loop\" : this.type === tt._switch ? \"switch\" : null\n    for (var i$1 = this.labels.length - 1; i$1 >= 0; i$1--) {\n      var label = this$1.labels[i$1]\n      if (label.statementStart == node.start) {\n        label.statementStart = this$1.start\n        label.kind = kind\n      } else break\n    }\n    this.labels.push({name: maybeName, kind: kind, statementStart: this.start})\n    node.body = this.parseStatement(true)\n    this.labels.pop()\n    node.label = expr\n    return this.finishNode(node, \"LabeledStatement\")\n  }\n\n  pp$1.parseExpressionStatement = function(node, expr) {\n    node.expression = expr\n    this.semicolon()\n    return this.finishNode(node, \"ExpressionStatement\")\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  pp$1.parseBlock = function(allowStrict) {\n    var this$1 = this;\n\n    var node = this.startNode(), first = true, oldStrict\n    node.body = []\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      var stmt = this$1.parseStatement(true)\n      node.body.push(stmt)\n      if (first && allowStrict && this$1.isUseStrict(stmt)) {\n        oldStrict = this$1.strict\n        this$1.setStrict(this$1.strict = true)\n      }\n      first = false\n    }\n    if (oldStrict === false) this.setStrict(false)\n    return this.finishNode(node, \"BlockStatement\")\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  pp$1.parseFor = function(node, init) {\n    node.init = init\n    this.expect(tt.semi)\n    node.test = this.type === tt.semi ? null : this.parseExpression()\n    this.expect(tt.semi)\n    node.update = this.type === tt.parenR ? null : this.parseExpression()\n    this.expect(tt.parenR)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, \"ForStatement\")\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  pp$1.parseForIn = function(node, init) {\n    var type = this.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n    this.next()\n    node.left = init\n    node.right = this.parseExpression()\n    this.expect(tt.parenR)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, type)\n  }\n\n  // Parse a list of variable declarations.\n\n  pp$1.parseVar = function(node, isFor, kind) {\n    var this$1 = this;\n\n    node.declarations = []\n    node.kind = kind\n    for (;;) {\n      var decl = this$1.startNode()\n      this$1.parseVarId(decl)\n      if (this$1.eat(tt.eq)) {\n        decl.init = this$1.parseMaybeAssign(isFor)\n      } else if (kind === \"const\" && !(this$1.type === tt._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n        this$1.unexpected()\n      } else if (decl.id.type != \"Identifier\" && !(isFor && (this$1.type === tt._in || this$1.isContextual(\"of\")))) {\n        this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\")\n      } else {\n        decl.init = null\n      }\n      node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"))\n      if (!this$1.eat(tt.comma)) break\n    }\n    return node\n  }\n\n  pp$1.parseVarId = function(decl) {\n    decl.id = this.parseBindingAtom()\n    this.checkLVal(decl.id, true)\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$1.parseFunction = function(node, isStatement, allowExpressionBody) {\n    this.initFunction(node)\n    if (this.options.ecmaVersion >= 6)\n      node.generator = this.eat(tt.star)\n    var oldInGen = this.inGenerator\n    this.inGenerator = node.generator\n    if (isStatement || this.type === tt.name)\n      node.id = this.parseIdent()\n    this.parseFunctionParams(node)\n    this.parseFunctionBody(node, allowExpressionBody)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  }\n\n  pp$1.parseFunctionParams = function(node) {\n    this.expect(tt.parenL)\n    node.params = this.parseBindingList(tt.parenR, false, false, true)\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$1.parseClass = function(node, isStatement) {\n    var this$1 = this;\n\n    this.next()\n    this.parseClassId(node, isStatement)\n    this.parseClassSuper(node)\n    var classBody = this.startNode()\n    var hadConstructor = false\n    classBody.body = []\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (this$1.eat(tt.semi)) continue\n      var method = this$1.startNode()\n      var isGenerator = this$1.eat(tt.star)\n      var isMaybeStatic = this$1.type === tt.name && this$1.value === \"static\"\n      this$1.parsePropertyName(method)\n      method.static = isMaybeStatic && this$1.type !== tt.parenL\n      if (method.static) {\n        if (isGenerator) this$1.unexpected()\n        isGenerator = this$1.eat(tt.star)\n        this$1.parsePropertyName(method)\n      }\n      method.kind = \"method\"\n      var isGetSet = false\n      if (!method.computed) {\n        var key = method.key;\n        if (!isGenerator && key.type === \"Identifier\" && this$1.type !== tt.parenL && (key.name === \"get\" || key.name === \"set\")) {\n          isGetSet = true\n          method.kind = key.name\n          key = this$1.parsePropertyName(method)\n        }\n        if (!method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n            key.type === \"Literal\" && key.value === \"constructor\")) {\n          if (hadConstructor) this$1.raise(key.start, \"Duplicate constructor in the same class\")\n          if (isGetSet) this$1.raise(key.start, \"Constructor can't have get/set modifier\")\n          if (isGenerator) this$1.raise(key.start, \"Constructor can't be a generator\")\n          method.kind = \"constructor\"\n          hadConstructor = true\n        }\n      }\n      this$1.parseClassMethod(classBody, method, isGenerator)\n      if (isGetSet) {\n        var paramCount = method.kind === \"get\" ? 0 : 1\n        if (method.value.params.length !== paramCount) {\n          var start = method.value.start\n          if (method.kind === \"get\")\n            this$1.raiseRecoverable(start, \"getter should have no params\")\n          else\n            this$1.raiseRecoverable(start, \"setter should have exactly one param\")\n        }\n        if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n          this$1.raise(method.value.params[0].start, \"Setter cannot use rest params\")\n      }\n    }\n    node.body = this.finishNode(classBody, \"ClassBody\")\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  }\n\n  pp$1.parseClassMethod = function(classBody, method, isGenerator) {\n    method.value = this.parseMethod(isGenerator)\n    classBody.body.push(this.finishNode(method, \"MethodDefinition\"))\n  }\n\n  pp$1.parseClassId = function(node, isStatement) {\n    node.id = this.type === tt.name ? this.parseIdent() : isStatement ? this.unexpected() : null\n  }\n\n  pp$1.parseClassSuper = function(node) {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null\n  }\n\n  // Parses module export declaration.\n\n  pp$1.parseExport = function(node) {\n    var this$1 = this;\n\n    this.next()\n    // export * from '...'\n    if (this.eat(tt.star)) {\n      this.expectContextual(\"from\")\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n      this.semicolon()\n      return this.finishNode(node, \"ExportAllDeclaration\")\n    }\n    if (this.eat(tt._default)) { // export default ...\n      var parens = this.type == tt.parenL\n      var expr = this.parseMaybeAssign()\n      var needsSemi = true\n      if (!parens && (expr.type == \"FunctionExpression\" ||\n                      expr.type == \"ClassExpression\")) {\n        needsSemi = false\n        if (expr.id) {\n          expr.type = expr.type == \"FunctionExpression\"\n            ? \"FunctionDeclaration\"\n            : \"ClassDeclaration\"\n        }\n      }\n      node.declaration = expr\n      if (needsSemi) this.semicolon()\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    // export var|const|let|function|class ...\n    if (this.shouldParseExportStatement()) {\n      node.declaration = this.parseStatement(true)\n      node.specifiers = []\n      node.source = null\n    } else { // export { x, y as z } [from '...']\n      node.declaration = null\n      node.specifiers = this.parseExportSpecifiers()\n      if (this.eatContextual(\"from\")) {\n        node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n      } else {\n        // check for keywords used as local names\n        for (var i = 0; i < node.specifiers.length; i++) {\n          if (this$1.keywords.test(node.specifiers[i].local.name) || this$1.reservedWords.test(node.specifiers[i].local.name)) {\n            this$1.unexpected(node.specifiers[i].local.start)\n          }\n        }\n\n        node.source = null\n      }\n      this.semicolon()\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  }\n\n  pp$1.shouldParseExportStatement = function() {\n    return this.type.keyword || this.isLet()\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  pp$1.parseExportSpecifiers = function() {\n    var this$1 = this;\n\n    var nodes = [], first = true\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var node = this$1.startNode()\n      node.local = this$1.parseIdent(this$1.type === tt._default)\n      node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local\n      nodes.push(this$1.finishNode(node, \"ExportSpecifier\"))\n    }\n    return nodes\n  }\n\n  // Parses import declaration.\n\n  pp$1.parseImport = function(node) {\n    this.next()\n    // import '...'\n    if (this.type === tt.string) {\n      node.specifiers = empty\n      node.source = this.parseExprAtom()\n    } else {\n      node.specifiers = this.parseImportSpecifiers()\n      this.expectContextual(\"from\")\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n    }\n    this.semicolon()\n    return this.finishNode(node, \"ImportDeclaration\")\n  }\n\n  // Parses a comma-separated list of module imports.\n\n  pp$1.parseImportSpecifiers = function() {\n    var this$1 = this;\n\n    var nodes = [], first = true\n    if (this.type === tt.name) {\n      // import defaultObj, { x, y as z } from '...'\n      var node = this.startNode()\n      node.local = this.parseIdent()\n      this.checkLVal(node.local, true)\n      nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"))\n      if (!this.eat(tt.comma)) return nodes\n    }\n    if (this.type === tt.star) {\n      var node$1 = this.startNode()\n      this.next()\n      this.expectContextual(\"as\")\n      node$1.local = this.parseIdent()\n      this.checkLVal(node$1.local, true)\n      nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"))\n      return nodes\n    }\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var node$2 = this$1.startNode()\n      node$2.imported = this$1.parseIdent(true)\n      if (this$1.eatContextual(\"as\")) {\n        node$2.local = this$1.parseIdent()\n      } else {\n        node$2.local = node$2.imported\n        if (this$1.isKeyword(node$2.local.name)) this$1.unexpected(node$2.local.start)\n        if (this$1.reservedWordsStrict.test(node$2.local.name)) this$1.raise(node$2.local.start, \"The keyword '\" + node$2.local.name + \"' is reserved\")\n      }\n      this$1.checkLVal(node$2.local, true)\n      nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"))\n    }\n    return nodes\n  }\n\n  var pp$2 = Parser.prototype\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  pp$2.toAssignable = function(node, isBinding) {\n    var this$1 = this;\n\n    if (this.options.ecmaVersion >= 6 && node) {\n      switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n        break\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\"\n        for (var i = 0; i < node.properties.length; i++) {\n          var prop = node.properties[i]\n          if (prop.kind !== \"init\") this$1.raise(prop.key.start, \"Object pattern can't contain getter or setter\")\n          this$1.toAssignable(prop.value, isBinding)\n        }\n        break\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\"\n        this.toAssignableList(node.elements, isBinding)\n        break\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\"\n          delete node.operator\n          // falls through to AssignmentPattern\n        } else {\n          this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\")\n          break\n        }\n\n      case \"AssignmentPattern\":\n        if (node.right.type === \"YieldExpression\")\n          this.raise(node.right.start, \"Yield expression cannot be a default value\")\n        break\n\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isBinding)\n        break\n\n      case \"MemberExpression\":\n        if (!isBinding) break\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\")\n      }\n    }\n    return node\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  pp$2.toAssignableList = function(exprList, isBinding) {\n    var this$1 = this;\n\n    var end = exprList.length\n    if (end) {\n      var last = exprList[end - 1]\n      if (last && last.type == \"RestElement\") {\n        --end\n      } else if (last && last.type == \"SpreadElement\") {\n        last.type = \"RestElement\"\n        var arg = last.argument\n        this.toAssignable(arg, isBinding)\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\")\n          this.unexpected(arg.start)\n        --end\n      }\n\n      if (isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n        this.unexpected(last.argument.start)\n    }\n    for (var i = 0; i < end; i++) {\n      var elt = exprList[i]\n      if (elt) this$1.toAssignable(elt, isBinding)\n    }\n    return exprList\n  }\n\n  // Parses spread element.\n\n  pp$2.parseSpread = function(refDestructuringErrors) {\n    var node = this.startNode()\n    this.next()\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors)\n    return this.finishNode(node, \"SpreadElement\")\n  }\n\n  pp$2.parseRest = function(allowNonIdent) {\n    var node = this.startNode()\n    this.next()\n\n    // RestElement inside of a function parameter must be an identifier\n    if (allowNonIdent) node.argument = this.type === tt.name ? this.parseIdent() : this.unexpected()\n    else node.argument = this.type === tt.name || this.type === tt.bracketL ? this.parseBindingAtom() : this.unexpected()\n\n    return this.finishNode(node, \"RestElement\")\n  }\n\n  // Parses lvalue (assignable) atom.\n\n  pp$2.parseBindingAtom = function() {\n    if (this.options.ecmaVersion < 6) return this.parseIdent()\n    switch (this.type) {\n    case tt.name:\n      return this.parseIdent()\n\n    case tt.bracketL:\n      var node = this.startNode()\n      this.next()\n      node.elements = this.parseBindingList(tt.bracketR, true, true)\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case tt.braceL:\n      return this.parseObj(true)\n\n    default:\n      this.unexpected()\n    }\n  }\n\n  pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowNonIdent) {\n    var this$1 = this;\n\n    var elts = [], first = true\n    while (!this.eat(close)) {\n      if (first) first = false\n      else this$1.expect(tt.comma)\n      if (allowEmpty && this$1.type === tt.comma) {\n        elts.push(null)\n      } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n        break\n      } else if (this$1.type === tt.ellipsis) {\n        var rest = this$1.parseRest(allowNonIdent)\n        this$1.parseBindingListItem(rest)\n        elts.push(rest)\n        if (this$1.type === tt.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\")\n        this$1.expect(close)\n        break\n      } else {\n        var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc)\n        this$1.parseBindingListItem(elem)\n        elts.push(elem)\n      }\n    }\n    return elts\n  }\n\n  pp$2.parseBindingListItem = function(param) {\n    return param\n  }\n\n  // Parses assignment pattern around given atom if possible.\n\n  pp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n    left = left || this.parseBindingAtom()\n    if (this.options.ecmaVersion < 6 || !this.eat(tt.eq)) return left\n    var node = this.startNodeAt(startPos, startLoc)\n    node.left = left\n    node.right = this.parseMaybeAssign()\n    return this.finishNode(node, \"AssignmentPattern\")\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  pp$2.checkLVal = function(expr, isBinding, checkClashes) {\n    var this$1 = this;\n\n    switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n        this.raiseRecoverable(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\")\n      if (checkClashes) {\n        if (has(checkClashes, expr.name))\n          this.raiseRecoverable(expr.start, \"Argument name clash\")\n        checkClashes[expr.name] = true\n      }\n      break\n\n    case \"MemberExpression\":\n      if (isBinding) this.raiseRecoverable(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\")\n      break\n\n    case \"ObjectPattern\":\n      for (var i = 0; i < expr.properties.length; i++)\n        this$1.checkLVal(expr.properties[i].value, isBinding, checkClashes)\n      break\n\n    case \"ArrayPattern\":\n      for (var i$1 = 0; i$1 < expr.elements.length; i$1++) {\n        var elem = expr.elements[i$1]\n        if (elem) this$1.checkLVal(elem, isBinding, checkClashes)\n      }\n      break\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes)\n      break\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes)\n      break\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, isBinding, checkClashes)\n      break\n\n    default:\n      this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\")\n    }\n  }\n\n  var pp$3 = Parser.prototype\n\n  // Check if property name clashes with already added.\n  // Object/class getters and setters are not allowed to clash —\n  // either with each other or with an init property — and in\n  // strict mode, init properties are also not allowed to be repeated.\n\n  pp$3.checkPropClash = function(prop, propHash) {\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n      return\n    var key = prop.key;\n    var name\n    switch (key.type) {\n    case \"Identifier\": name = key.name; break\n    case \"Literal\": name = String(key.value); break\n    default: return\n    }\n    var kind = prop.kind;\n    if (this.options.ecmaVersion >= 6) {\n      if (name === \"__proto__\" && kind === \"init\") {\n        if (propHash.proto) this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\")\n        propHash.proto = true\n      }\n      return\n    }\n    name = \"$\" + name\n    var other = propHash[name]\n    if (other) {\n      var isGetSet = kind !== \"init\"\n      if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init))\n        this.raiseRecoverable(key.start, \"Redefinition of property\")\n    } else {\n      other = propHash[name] = {\n        init: false,\n        get: false,\n        set: false\n      }\n    }\n    other[kind] = true\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function(s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression. The optional arguments are used to\n  // forbid the `in` operator (in for loops initalization expressions)\n  // and provide reference for storing '=' operator inside shorthand\n  // property assignment in contexts where both object expression\n  // and object pattern might appear (so it's possible to raise\n  // delayed syntax error at correct position).\n\n  pp$3.parseExpression = function(noIn, refDestructuringErrors) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseMaybeAssign(noIn, refDestructuringErrors)\n    if (this.type === tt.comma) {\n      var node = this.startNodeAt(startPos, startLoc)\n      node.expressions = [expr]\n      while (this.eat(tt.comma)) node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors))\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n    if (this.inGenerator && this.isContextual(\"yield\")) return this.parseYield()\n\n    var ownDestructuringErrors = false\n    if (!refDestructuringErrors) {\n      refDestructuringErrors = new DestructuringErrors\n      ownDestructuringErrors = true\n    }\n    var startPos = this.start, startLoc = this.startLoc\n    if (this.type == tt.parenL || this.type == tt.name)\n      this.potentialArrowAt = this.start\n    var left = this.parseMaybeConditional(noIn, refDestructuringErrors)\n    if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc)\n    if (this.type.isAssign) {\n      this.checkPatternErrors(refDestructuringErrors, true)\n      if (!ownDestructuringErrors) DestructuringErrors.call(refDestructuringErrors)\n      var node = this.startNodeAt(startPos, startLoc)\n      node.operator = this.value\n      node.left = this.type === tt.eq ? this.toAssignable(left) : left\n      refDestructuringErrors.shorthandAssign = 0 // reset because shorthand default was used correctly\n      this.checkLVal(left)\n      this.next()\n      node.right = this.parseMaybeAssign(noIn)\n      return this.finishNode(node, \"AssignmentExpression\")\n    } else {\n      if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true)\n    }\n    return left\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseExprOps(noIn, refDestructuringErrors)\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n    if (this.eat(tt.question)) {\n      var node = this.startNodeAt(startPos, startLoc)\n      node.test = expr\n      node.consequent = this.parseMaybeAssign()\n      this.expect(tt.colon)\n      node.alternate = this.parseMaybeAssign(noIn)\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  }\n\n  // Start the precedence parser.\n\n  pp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false)\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    var prec = this.type.binop\n    if (prec != null && (!noIn || this.type !== tt._in)) {\n      if (prec > minPrec) {\n        var logical = this.type === tt.logicalOR || this.type === tt.logicalAND\n        var op = this.value\n        this.next()\n        var startPos = this.start, startLoc = this.startLoc\n        var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn)\n        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical)\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n      }\n    }\n    return left\n  }\n\n  pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n    var node = this.startNodeAt(startPos, startLoc)\n    node.left = left\n    node.operator = op\n    node.right = right\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n  }\n\n  // Parse unary operators, both prefix and postfix.\n\n  pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc, expr\n    if (this.type.prefix) {\n      var node = this.startNode(), update = this.type === tt.incDec\n      node.operator = this.value\n      node.prefix = true\n      this.next()\n      node.argument = this.parseMaybeUnary(null, true)\n      this.checkExpressionErrors(refDestructuringErrors, true)\n      if (update) this.checkLVal(node.argument)\n      else if (this.strict && node.operator === \"delete\" &&\n               node.argument.type === \"Identifier\")\n        this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\")\n      else sawUnary = true\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n    } else {\n      expr = this.parseExprSubscripts(refDestructuringErrors)\n      if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n      while (this.type.postfix && !this.canInsertSemicolon()) {\n        var node$1 = this$1.startNodeAt(startPos, startLoc)\n        node$1.operator = this$1.value\n        node$1.prefix = false\n        node$1.argument = expr\n        this$1.checkLVal(expr)\n        this$1.next()\n        expr = this$1.finishNode(node$1, \"UpdateExpression\")\n      }\n    }\n\n    if (!sawUnary && this.eat(tt.starstar))\n      return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false)\n    else\n      return expr\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  pp$3.parseExprSubscripts = function(refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseExprAtom(refDestructuringErrors)\n    var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\"\n    if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr\n    return this.parseSubscripts(expr, startPos, startLoc)\n  }\n\n  pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n    var this$1 = this;\n\n    for (;;) {\n      if (this$1.eat(tt.dot)) {\n        var node = this$1.startNodeAt(startPos, startLoc)\n        node.object = base\n        node.property = this$1.parseIdent(true)\n        node.computed = false\n        base = this$1.finishNode(node, \"MemberExpression\")\n      } else if (this$1.eat(tt.bracketL)) {\n        var node$1 = this$1.startNodeAt(startPos, startLoc)\n        node$1.object = base\n        node$1.property = this$1.parseExpression()\n        node$1.computed = true\n        this$1.expect(tt.bracketR)\n        base = this$1.finishNode(node$1, \"MemberExpression\")\n      } else if (!noCalls && this$1.eat(tt.parenL)) {\n        var node$2 = this$1.startNodeAt(startPos, startLoc)\n        node$2.callee = base\n        node$2.arguments = this$1.parseExprList(tt.parenR, false)\n        base = this$1.finishNode(node$2, \"CallExpression\")\n      } else if (this$1.type === tt.backQuote) {\n        var node$3 = this$1.startNodeAt(startPos, startLoc)\n        node$3.tag = base\n        node$3.quasi = this$1.parseTemplate()\n        base = this$1.finishNode(node$3, \"TaggedTemplateExpression\")\n      } else {\n        return base\n      }\n    }\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  pp$3.parseExprAtom = function(refDestructuringErrors) {\n    var node, canBeArrow = this.potentialArrowAt == this.start\n    switch (this.type) {\n    case tt._super:\n      if (!this.inFunction)\n        this.raise(this.start, \"'super' outside of function or class\")\n\n    case tt._this:\n      var type = this.type === tt._this ? \"ThisExpression\" : \"Super\"\n      node = this.startNode()\n      this.next()\n      return this.finishNode(node, type)\n\n    case tt.name:\n      var startPos = this.start, startLoc = this.startLoc\n      var id = this.parseIdent(this.type !== tt.name)\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow))\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id])\n      return id\n\n    case tt.regexp:\n      var value = this.value\n      node = this.parseLiteral(value.value)\n      node.regex = {pattern: value.pattern, flags: value.flags}\n      return node\n\n    case tt.num: case tt.string:\n      return this.parseLiteral(this.value)\n\n    case tt._null: case tt._true: case tt._false:\n      node = this.startNode()\n      node.value = this.type === tt._null ? null : this.type === tt._true\n      node.raw = this.type.keyword\n      this.next()\n      return this.finishNode(node, \"Literal\")\n\n    case tt.parenL:\n      return this.parseParenAndDistinguishExpression(canBeArrow)\n\n    case tt.bracketL:\n      node = this.startNode()\n      this.next()\n      node.elements = this.parseExprList(tt.bracketR, true, true, refDestructuringErrors)\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case tt.braceL:\n      return this.parseObj(false, refDestructuringErrors)\n\n    case tt._function:\n      node = this.startNode()\n      this.next()\n      return this.parseFunction(node, false)\n\n    case tt._class:\n      return this.parseClass(this.startNode(), false)\n\n    case tt._new:\n      return this.parseNew()\n\n    case tt.backQuote:\n      return this.parseTemplate()\n\n    default:\n      this.unexpected()\n    }\n  }\n\n  pp$3.parseLiteral = function(value) {\n    var node = this.startNode()\n    node.value = value\n    node.raw = this.input.slice(this.start, this.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n  }\n\n  pp$3.parseParenExpression = function() {\n    this.expect(tt.parenL)\n    var val = this.parseExpression()\n    this.expect(tt.parenR)\n    return val\n  }\n\n  pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc, val\n    if (this.options.ecmaVersion >= 6) {\n      this.next()\n\n      var innerStartPos = this.start, innerStartLoc = this.startLoc\n      var exprList = [], first = true\n      var refDestructuringErrors = new DestructuringErrors, spreadStart, innerParenStart\n      while (this.type !== tt.parenR) {\n        first ? first = false : this$1.expect(tt.comma)\n        if (this$1.type === tt.ellipsis) {\n          spreadStart = this$1.start\n          exprList.push(this$1.parseParenItem(this$1.parseRest()))\n          break\n        } else {\n          if (this$1.type === tt.parenL && !innerParenStart) {\n            innerParenStart = this$1.start\n          }\n          exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem))\n        }\n      }\n      var innerEndPos = this.start, innerEndLoc = this.startLoc\n      this.expect(tt.parenR)\n\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, true)\n        if (innerParenStart) this.unexpected(innerParenStart)\n        return this.parseParenArrowList(startPos, startLoc, exprList)\n      }\n\n      if (!exprList.length) this.unexpected(this.lastTokStart)\n      if (spreadStart) this.unexpected(spreadStart)\n      this.checkExpressionErrors(refDestructuringErrors, true)\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc)\n        val.expressions = exprList\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc)\n      } else {\n        val = exprList[0]\n      }\n    } else {\n      val = this.parseParenExpression()\n    }\n\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(startPos, startLoc)\n      par.expression = val\n      return this.finishNode(par, \"ParenthesizedExpression\")\n    } else {\n      return val\n    }\n  }\n\n  pp$3.parseParenItem = function(item) {\n    return item\n  }\n\n  pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  var empty$1 = []\n\n  pp$3.parseNew = function() {\n    var node = this.startNode()\n    var meta = this.parseIdent(true)\n    if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n      node.meta = meta\n      node.property = this.parseIdent(true)\n      if (node.property.name !== \"target\")\n        this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\")\n      if (!this.inFunction)\n        this.raiseRecoverable(node.start, \"new.target can only be used in functions\")\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var startPos = this.start, startLoc = this.startLoc\n    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true)\n    if (this.eat(tt.parenL)) node.arguments = this.parseExprList(tt.parenR, false)\n    else node.arguments = empty$1\n    return this.finishNode(node, \"NewExpression\")\n  }\n\n  // Parse template expression.\n\n  pp$3.parseTemplateElement = function() {\n    var elem = this.startNode()\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n      cooked: this.value\n    }\n    this.next()\n    elem.tail = this.type === tt.backQuote\n    return this.finishNode(elem, \"TemplateElement\")\n  }\n\n  pp$3.parseTemplate = function() {\n    var this$1 = this;\n\n    var node = this.startNode()\n    this.next()\n    node.expressions = []\n    var curElt = this.parseTemplateElement()\n    node.quasis = [curElt]\n    while (!curElt.tail) {\n      this$1.expect(tt.dollarBraceL)\n      node.expressions.push(this$1.parseExpression())\n      this$1.expect(tt.braceR)\n      node.quasis.push(curElt = this$1.parseTemplateElement())\n    }\n    this.next()\n    return this.finishNode(node, \"TemplateLiteral\")\n  }\n\n  // Parse an object literal or binding pattern.\n\n  pp$3.parseObj = function(isPattern, refDestructuringErrors) {\n    var this$1 = this;\n\n    var node = this.startNode(), first = true, propHash = {}\n    node.properties = []\n    this.next()\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var prop = this$1.startNode(), isGenerator, startPos, startLoc\n      if (this$1.options.ecmaVersion >= 6) {\n        prop.method = false\n        prop.shorthand = false\n        if (isPattern || refDestructuringErrors) {\n          startPos = this$1.start\n          startLoc = this$1.startLoc\n        }\n        if (!isPattern)\n          isGenerator = this$1.eat(tt.star)\n      }\n      this$1.parsePropertyName(prop)\n      this$1.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors)\n      this$1.checkPropClash(prop, propHash)\n      node.properties.push(this$1.finishNode(prop, \"Property\"))\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n  }\n\n  pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors) {\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors)\n      prop.kind = \"init\"\n    } else if (this.options.ecmaVersion >= 6 && this.type === tt.parenL) {\n      if (isPattern) this.unexpected()\n      prop.kind = \"init\"\n      prop.method = true\n      prop.value = this.parseMethod(isGenerator)\n    } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n               (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.type != tt.comma && this.type != tt.braceR)) {\n      if (isGenerator || isPattern) this.unexpected()\n      prop.kind = prop.key.name\n      this.parsePropertyName(prop)\n      prop.value = this.parseMethod(false)\n      var paramCount = prop.kind === \"get\" ? 0 : 1\n      if (prop.value.params.length !== paramCount) {\n        var start = prop.value.start\n        if (prop.kind === \"get\")\n          this.raiseRecoverable(start, \"getter should have no params\")\n        else\n          this.raiseRecoverable(start, \"setter should have exactly one param\")\n      }\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\")\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n      if (this.keywords.test(prop.key.name) ||\n          (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(prop.key.name) ||\n          (this.inGenerator && prop.key.name == \"yield\"))\n        this.raiseRecoverable(prop.key.start, \"'\" + prop.key.name + \"' can not be used as shorthand property\")\n      prop.kind = \"init\"\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n      } else if (this.type === tt.eq && refDestructuringErrors) {\n        if (!refDestructuringErrors.shorthandAssign)\n          refDestructuringErrors.shorthandAssign = this.start\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n      } else {\n        prop.value = prop.key\n      }\n      prop.shorthand = true\n    } else this.unexpected()\n  }\n\n  pp$3.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(tt.bracketL)) {\n        prop.computed = true\n        prop.key = this.parseMaybeAssign()\n        this.expect(tt.bracketR)\n        return prop.key\n      } else {\n        prop.computed = false\n      }\n    }\n    return prop.key = this.type === tt.num || this.type === tt.string ? this.parseExprAtom() : this.parseIdent(true)\n  }\n\n  // Initialize empty function node.\n\n  pp$3.initFunction = function(node) {\n    node.id = null\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = false\n      node.expression = false\n    }\n  }\n\n  // Parse object or class method.\n\n  pp$3.parseMethod = function(isGenerator) {\n    var node = this.startNode(), oldInGen = this.inGenerator\n    this.inGenerator = isGenerator\n    this.initFunction(node)\n    this.expect(tt.parenL)\n    node.params = this.parseBindingList(tt.parenR, false, false)\n    if (this.options.ecmaVersion >= 6)\n      node.generator = isGenerator\n    this.parseFunctionBody(node, false)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, \"FunctionExpression\")\n  }\n\n  // Parse arrow function expression with given parameters.\n\n  pp$3.parseArrowExpression = function(node, params) {\n    var oldInGen = this.inGenerator\n    this.inGenerator = false\n    this.initFunction(node)\n    node.params = this.toAssignableList(params, true)\n    this.parseFunctionBody(node, true)\n    this.inGenerator = oldInGen\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  }\n\n  // Parse function body and check parameters.\n\n  pp$3.parseFunctionBody = function(node, isArrowFunction) {\n    var isExpression = isArrowFunction && this.type !== tt.braceL\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign()\n      node.expression = true\n    } else {\n      // Start a new scope with regard to labels and the `inFunction`\n      // flag (restore them to their old value afterwards).\n      var oldInFunc = this.inFunction, oldLabels = this.labels\n      this.inFunction = true; this.labels = []\n      node.body = this.parseBlock(true)\n      node.expression = false\n      this.inFunction = oldInFunc; this.labels = oldLabels\n    }\n\n    // If this is a strict mode function, verify that argument names\n    // are not repeated, and it does not try to bind the words `eval`\n    // or `arguments`.\n    var useStrict = (!isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) ? node.body.body[0] : null;\n    if (this.strict || useStrict) {\n      var oldStrict = this.strict\n      this.strict = true\n      if (node.id)\n        this.checkLVal(node.id, true)\n      this.checkParams(node, useStrict)\n      this.strict = oldStrict\n    } else if (isArrowFunction) {\n      this.checkParams(node, useStrict)\n    }\n  }\n\n  // Checks function params for various disallowed patterns such as using \"eval\"\n  // or \"arguments\" and duplicate parameters.\n\n  pp$3.checkParams = function(node, useStrict) {\n      var this$1 = this;\n\n      var nameHash = {}\n      for (var i = 0; i < node.params.length; i++) {\n        if (useStrict && this$1.options.ecmaVersion >= 7 && node.params[i].type !== \"Identifier\")\n          this$1.raiseRecoverable(useStrict.start, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n        this$1.checkLVal(node.params[i], true, nameHash)\n      }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var this$1 = this;\n\n    var elts = [], first = true\n    while (!this.eat(close)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (allowTrailingComma && this$1.afterTrailingComma(close)) break\n      } else first = false\n\n      var elt\n      if (allowEmpty && this$1.type === tt.comma)\n        elt = null\n      else if (this$1.type === tt.ellipsis) {\n        elt = this$1.parseSpread(refDestructuringErrors)\n        if (this$1.type === tt.comma && refDestructuringErrors && !refDestructuringErrors.trailingComma) {\n          refDestructuringErrors.trailingComma = this$1.lastTokStart\n        }\n      } else\n        elt = this$1.parseMaybeAssign(false, refDestructuringErrors)\n      elts.push(elt)\n    }\n    return elts\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n\n  pp$3.parseIdent = function(liberal) {\n    var node = this.startNode()\n    if (liberal && this.options.allowReserved == \"never\") liberal = false\n    if (this.type === tt.name) {\n      if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) &&\n          (this.options.ecmaVersion >= 6 ||\n           this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1))\n        this.raiseRecoverable(this.start, \"The keyword '\" + this.value + \"' is reserved\")\n      if (!liberal && this.inGenerator && this.value === \"yield\")\n        this.raiseRecoverable(this.start, \"Can not use 'yield' as identifier inside a generator\")\n      node.name = this.value\n    } else if (liberal && this.type.keyword) {\n      node.name = this.type.keyword\n    } else {\n      this.unexpected()\n    }\n    this.next()\n    return this.finishNode(node, \"Identifier\")\n  }\n\n  // Parses yield expression inside generator.\n\n  pp$3.parseYield = function() {\n    var node = this.startNode()\n    this.next()\n    if (this.type == tt.semi || this.canInsertSemicolon() || (this.type != tt.star && !this.type.startsExpr)) {\n      node.delegate = false\n      node.argument = null\n    } else {\n      node.delegate = this.eat(tt.star)\n      node.argument = this.parseMaybeAssign()\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  }\n\n  var pp$4 = Parser.prototype\n\n  // This function is used to raise exceptions on parse errors. It\n  // takes an offset integer (into the current `input`) to indicate\n  // the location of the error, attaches the position to the end\n  // of the error message, and then raises a `SyntaxError` with that\n  // message.\n\n  pp$4.raise = function(pos, message) {\n    var loc = getLineInfo(this.input, pos)\n    message += \" (\" + loc.line + \":\" + loc.column + \")\"\n    var err = new SyntaxError(message)\n    err.pos = pos; err.loc = loc; err.raisedAt = this.pos\n    throw err\n  }\n\n  pp$4.raiseRecoverable = pp$4.raise\n\n  pp$4.curPosition = function() {\n    if (this.options.locations) {\n      return new Position(this.curLine, this.pos - this.lineStart)\n    }\n  }\n\n  var Node = function Node(parser, pos, loc) {\n    this.type = \"\"\n    this.start = pos\n    this.end = 0\n    if (parser.options.locations)\n      this.loc = new SourceLocation(parser, loc)\n    if (parser.options.directSourceFile)\n      this.sourceFile = parser.options.directSourceFile\n    if (parser.options.ranges)\n      this.range = [pos, 0]\n  };\n\n  // Start an AST node, attaching a start offset.\n\n  var pp$5 = Parser.prototype\n\n  pp$5.startNode = function() {\n    return new Node(this, this.start, this.startLoc)\n  }\n\n  pp$5.startNodeAt = function(pos, loc) {\n    return new Node(this, pos, loc)\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  function finishNodeAt(node, type, pos, loc) {\n    node.type = type\n    node.end = pos\n    if (this.options.locations)\n      node.loc.end = loc\n    if (this.options.ranges)\n      node.range[1] = pos\n    return node\n  }\n\n  pp$5.finishNode = function(node, type) {\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n  }\n\n  // Finish node at given position\n\n  pp$5.finishNodeAt = function(node, type, pos, loc) {\n    return finishNodeAt.call(this, node, type, pos, loc)\n  }\n\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n    this.token = token\n    this.isExpr = !!isExpr\n    this.preserveSpace = !!preserveSpace\n    this.override = override\n  };\n\n  var types = {\n    b_stat: new TokContext(\"{\", false),\n    b_expr: new TokContext(\"{\", true),\n    b_tmpl: new TokContext(\"${\", true),\n    p_stat: new TokContext(\"(\", false),\n    p_expr: new TokContext(\"(\", true),\n    q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.readTmplToken(); }),\n    f_expr: new TokContext(\"function\", true)\n  }\n\n  var pp$6 = Parser.prototype\n\n  pp$6.initialContext = function() {\n    return [types.b_stat]\n  }\n\n  pp$6.braceIsBlock = function(prevType) {\n    if (prevType === tt.colon) {\n      var parent = this.curContext()\n      if (parent === types.b_stat || parent === types.b_expr)\n        return !parent.isExpr\n    }\n    if (prevType === tt._return)\n      return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n    if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR)\n      return true\n    if (prevType == tt.braceL)\n      return this.curContext() === types.b_stat\n    return !this.exprAllowed\n  }\n\n  pp$6.updateContext = function(prevType) {\n    var update, type = this.type\n    if (type.keyword && prevType == tt.dot)\n      this.exprAllowed = false\n    else if (update = type.updateContext)\n      update.call(this, prevType)\n    else\n      this.exprAllowed = type.beforeExpr\n  }\n\n  // Token-specific context update code\n\n  tt.parenR.updateContext = tt.braceR.updateContext = function() {\n    if (this.context.length == 1) {\n      this.exprAllowed = true\n      return\n    }\n    var out = this.context.pop()\n    if (out === types.b_stat && this.curContext() === types.f_expr) {\n      this.context.pop()\n      this.exprAllowed = false\n    } else if (out === types.b_tmpl) {\n      this.exprAllowed = true\n    } else {\n      this.exprAllowed = !out.isExpr\n    }\n  }\n\n  tt.braceL.updateContext = function(prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr)\n    this.exprAllowed = true\n  }\n\n  tt.dollarBraceL.updateContext = function() {\n    this.context.push(types.b_tmpl)\n    this.exprAllowed = true\n  }\n\n  tt.parenL.updateContext = function(prevType) {\n    var statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while\n    this.context.push(statementParens ? types.p_stat : types.p_expr)\n    this.exprAllowed = true\n  }\n\n  tt.incDec.updateContext = function() {\n    // tokExprAllowed stays unchanged\n  }\n\n  tt._function.updateContext = function(prevType) {\n    if (prevType.beforeExpr && prevType !== tt.semi && prevType !== tt._else &&\n        !((prevType === tt.colon || prevType === tt.braceL) && this.curContext() === types.b_stat))\n      this.context.push(types.f_expr)\n    this.exprAllowed = false\n  }\n\n  tt.backQuote.updateContext = function() {\n    if (this.curContext() === types.q_tmpl)\n      this.context.pop()\n    else\n      this.context.push(types.q_tmpl)\n    this.exprAllowed = false\n  }\n\n  // Object type used to represent tokens. Note that normally, tokens\n  // simply exist as properties on the parser object. This is only\n  // used for the onToken callback and the external tokenizer.\n\n  var Token = function Token(p) {\n    this.type = p.type\n    this.value = p.value\n    this.start = p.start\n    this.end = p.end\n    if (p.options.locations)\n      this.loc = new SourceLocation(p, p.startLoc, p.endLoc)\n    if (p.options.ranges)\n      this.range = [p.start, p.end]\n  };\n\n  // ## Tokenizer\n\n  var pp$7 = Parser.prototype\n\n  // Are we running under Rhino?\n  var isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\"\n\n  // Move to the next token\n\n  pp$7.next = function() {\n    if (this.options.onToken)\n      this.options.onToken(new Token(this))\n\n    this.lastTokEnd = this.end\n    this.lastTokStart = this.start\n    this.lastTokEndLoc = this.endLoc\n    this.lastTokStartLoc = this.startLoc\n    this.nextToken()\n  }\n\n  pp$7.getToken = function() {\n    this.next()\n    return new Token(this)\n  }\n\n  // If we're in an ES6 environment, make parsers iterable\n  if (typeof Symbol !== \"undefined\")\n    pp$7[Symbol.iterator] = function () {\n      var self = this\n      return {next: function () {\n        var token = self.getToken()\n        return {\n          done: token.type === tt.eof,\n          value: token\n        }\n      }}\n    }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  pp$7.setStrict = function(strict) {\n    var this$1 = this;\n\n    this.strict = strict\n    if (this.type !== tt.num && this.type !== tt.string) return\n    this.pos = this.start\n    if (this.options.locations) {\n      while (this.pos < this.lineStart) {\n        this$1.lineStart = this$1.input.lastIndexOf(\"\\n\", this$1.lineStart - 2) + 1\n        --this$1.curLine\n      }\n    }\n    this.nextToken()\n  }\n\n  pp$7.curContext = function() {\n    return this.context[this.context.length - 1]\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  pp$7.nextToken = function() {\n    var curContext = this.curContext()\n    if (!curContext || !curContext.preserveSpace) this.skipSpace()\n\n    this.start = this.pos\n    if (this.options.locations) this.startLoc = this.curPosition()\n    if (this.pos >= this.input.length) return this.finishToken(tt.eof)\n\n    if (curContext.override) return curContext.override(this)\n    else this.readToken(this.fullCharCodeAtPos())\n  }\n\n  pp$7.readToken = function(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n      return this.readWord()\n\n    return this.getTokenFromCode(code)\n  }\n\n  pp$7.fullCharCodeAtPos = function() {\n    var code = this.input.charCodeAt(this.pos)\n    if (code <= 0xd7ff || code >= 0xe000) return code\n    var next = this.input.charCodeAt(this.pos + 1)\n    return (code << 10) + next - 0x35fdc00\n  }\n\n  pp$7.skipBlockComment = function() {\n    var this$1 = this;\n\n    var startLoc = this.options.onComment && this.curPosition()\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2)\n    if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\")\n    this.pos = end + 2\n    if (this.options.locations) {\n      lineBreakG.lastIndex = start\n      var match\n      while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n        ++this$1.curLine\n        this$1.lineStart = match.index + match[0].length\n      }\n    }\n    if (this.options.onComment)\n      this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                             startLoc, this.curPosition())\n  }\n\n  pp$7.skipLineComment = function(startSkip) {\n    var this$1 = this;\n\n    var start = this.pos\n    var startLoc = this.options.onComment && this.curPosition()\n    var ch = this.input.charCodeAt(this.pos+=startSkip)\n    while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n      ++this$1.pos\n      ch = this$1.input.charCodeAt(this$1.pos)\n    }\n    if (this.options.onComment)\n      this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                             startLoc, this.curPosition())\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  pp$7.skipSpace = function() {\n    var this$1 = this;\n\n    loop: while (this.pos < this.input.length) {\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      switch (ch) {\n        case 32: case 160: // ' '\n          ++this$1.pos\n          break\n        case 13:\n          if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n            ++this$1.pos\n          }\n        case 10: case 8232: case 8233:\n          ++this$1.pos\n          if (this$1.options.locations) {\n            ++this$1.curLine\n            this$1.lineStart = this$1.pos\n          }\n          break\n        case 47: // '/'\n          switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n            case 42: // '*'\n              this$1.skipBlockComment()\n              break\n            case 47:\n              this$1.skipLineComment(2)\n              break\n            default:\n              break loop\n          }\n          break\n        default:\n          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n            ++this$1.pos\n          } else {\n            break loop\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  pp$7.finishToken = function(type, val) {\n    this.end = this.pos\n    if (this.options.locations) this.endLoc = this.curPosition()\n    var prevType = this.type\n    this.type = type\n    this.value = val\n\n    this.updateContext(prevType)\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n  pp$7.readToken_dot = function() {\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next >= 48 && next <= 57) return this.readNumber(true)\n    var next2 = this.input.charCodeAt(this.pos + 2)\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n      this.pos += 3\n      return this.finishToken(tt.ellipsis)\n    } else {\n      ++this.pos\n      return this.finishToken(tt.dot)\n    }\n  }\n\n  pp$7.readToken_slash = function() { // '/'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (this.exprAllowed) {++this.pos; return this.readRegexp()}\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.slash, 1)\n  }\n\n  pp$7.readToken_mult_modulo_exp = function(code) { // '%*'\n    var next = this.input.charCodeAt(this.pos + 1)\n    var size = 1\n    var tokentype = code === 42 ? tt.star : tt.modulo\n\n    // exponentiation operator ** and **=\n    if (this.options.ecmaVersion >= 7 && next === 42) {\n      ++size\n      tokentype = tt.starstar\n      next = this.input.charCodeAt(this.pos + 2)\n    }\n\n    if (next === 61) return this.finishOp(tt.assign, size + 1)\n    return this.finishOp(tokentype, size)\n  }\n\n  pp$7.readToken_pipe_amp = function(code) { // '|&'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2)\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1)\n  }\n\n  pp$7.readToken_caret = function() { // '^'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.bitwiseXOR, 1)\n  }\n\n  pp$7.readToken_plus_min = function(code) { // '+-'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === code) {\n      if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&\n          lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n        // A `-->` line comment\n        this.skipLineComment(3)\n        this.skipSpace()\n        return this.nextToken()\n      }\n      return this.finishOp(tt.incDec, 2)\n    }\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.plusMin, 1)\n  }\n\n  pp$7.readToken_lt_gt = function(code) { // '<>'\n    var next = this.input.charCodeAt(this.pos + 1)\n    var size = 1\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2\n      if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1)\n      return this.finishOp(tt.bitShift, size)\n    }\n    if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&\n        this.input.charCodeAt(this.pos + 3) == 45) {\n      if (this.inModule) this.unexpected()\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4)\n      this.skipSpace()\n      return this.nextToken()\n    }\n    if (next === 61) size = 2\n    return this.finishOp(tt.relational, size)\n  }\n\n  pp$7.readToken_eq_excl = function(code) { // '=!'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n      this.pos += 2\n      return this.finishToken(tt.arrow)\n    }\n    return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1)\n  }\n\n  pp$7.getTokenFromCode = function(code) {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n    case 46: // '.'\n      return this.readToken_dot()\n\n      // Punctuation tokens.\n    case 40: ++this.pos; return this.finishToken(tt.parenL)\n    case 41: ++this.pos; return this.finishToken(tt.parenR)\n    case 59: ++this.pos; return this.finishToken(tt.semi)\n    case 44: ++this.pos; return this.finishToken(tt.comma)\n    case 91: ++this.pos; return this.finishToken(tt.bracketL)\n    case 93: ++this.pos; return this.finishToken(tt.bracketR)\n    case 123: ++this.pos; return this.finishToken(tt.braceL)\n    case 125: ++this.pos; return this.finishToken(tt.braceR)\n    case 58: ++this.pos; return this.finishToken(tt.colon)\n    case 63: ++this.pos; return this.finishToken(tt.question)\n\n    case 96: // '`'\n      if (this.options.ecmaVersion < 6) break\n      ++this.pos\n      return this.finishToken(tt.backQuote)\n\n    case 48: // '0'\n      var next = this.input.charCodeAt(this.pos + 1)\n      if (next === 120 || next === 88) return this.readRadixNumber(16) // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) return this.readRadixNumber(8) // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2) // '0b', '0B' - binary number\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float.\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n      return this.readNumber(false)\n\n      // Quotes produce strings.\n    case 34: case 39: // '\"', \"'\"\n      return this.readString(code)\n\n      // Operators are parsed inline in tiny state machines. '=' (61) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n    case 47: // '/'\n      return this.readToken_slash()\n\n    case 37: case 42: // '%*'\n      return this.readToken_mult_modulo_exp(code)\n\n    case 124: case 38: // '|&'\n      return this.readToken_pipe_amp(code)\n\n    case 94: // '^'\n      return this.readToken_caret()\n\n    case 43: case 45: // '+-'\n      return this.readToken_plus_min(code)\n\n    case 60: case 62: // '<>'\n      return this.readToken_lt_gt(code)\n\n    case 61: case 33: // '=!'\n      return this.readToken_eq_excl(code)\n\n    case 126: // '~'\n      return this.finishOp(tt.prefix, 1)\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\")\n  }\n\n  pp$7.finishOp = function(type, size) {\n    var str = this.input.slice(this.pos, this.pos + size)\n    this.pos += size\n    return this.finishToken(type, str)\n  }\n\n  // Parse a regular expression. Some context-awareness is necessary,\n  // since a '/' inside a '[]' set does not end the expression.\n\n  function tryCreateRegexp(src, flags, throwErrorAt, parser) {\n    try {\n      return new RegExp(src, flags)\n    } catch (e) {\n      if (throwErrorAt !== undefined) {\n        if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message)\n        throw e\n      }\n    }\n  }\n\n  var regexpUnicodeSupport = !!tryCreateRegexp(\"\\uffff\", \"u\")\n\n  pp$7.readRegexp = function() {\n    var this$1 = this;\n\n    var escaped, inClass, start = this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(start, \"Unterminated regular expression\")\n      var ch = this$1.input.charAt(this$1.pos)\n      if (lineBreak.test(ch)) this$1.raise(start, \"Unterminated regular expression\")\n      if (!escaped) {\n        if (ch === \"[\") inClass = true\n        else if (ch === \"]\" && inClass) inClass = false\n        else if (ch === \"/\" && !inClass) break\n        escaped = ch === \"\\\\\"\n      } else escaped = false\n      ++this$1.pos\n    }\n    var content = this.input.slice(start, this.pos)\n    ++this.pos\n    // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n    // here (don't ask).\n    var mods = this.readWord1()\n    var tmp = content, tmpFlags = \"\"\n    if (mods) {\n      var validFlags = /^[gim]*$/\n      if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/\n      if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\")\n      if (mods.indexOf(\"u\") >= 0) {\n        if (regexpUnicodeSupport) {\n          tmpFlags = \"u\"\n        } else {\n          // Replace each astral symbol and every Unicode escape sequence that\n          // possibly represents an astral symbol or a paired surrogate with a\n          // single ASCII symbol to avoid throwing on regular expressions that\n          // are only valid in combination with the `/u` flag.\n          // Note: replacing with the ASCII symbol `x` might cause false\n          // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n          // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n          // be replaced by `[x-b]` which throws an error.\n          tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n            code = Number(\"0x\" + code)\n            if (code > 0x10FFFF) this$1.raise(start + offset + 3, \"Code point out of bounds\")\n            return \"x\"\n          })\n          tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\")\n          tmpFlags = tmpFlags.replace(\"u\", \"\")\n        }\n      }\n    }\n    // Detect invalid regular expressions.\n    var value = null\n    // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n    // so don't do detection if we are running under Rhino\n    if (!isRhino) {\n      tryCreateRegexp(tmp, tmpFlags, start, this)\n      // Get a regular expression object for this pattern-flag pair, or `null` in\n      // case the current environment doesn't support the flags it uses.\n      value = tryCreateRegexp(content, mods)\n    }\n    return this.finishToken(tt.regexp, {pattern: content, flags: mods, value: value})\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  pp$7.readInt = function(radix, len) {\n    var this$1 = this;\n\n    var start = this.pos, total = 0\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = this$1.input.charCodeAt(this$1.pos), val\n      if (code >= 97) val = code - 97 + 10 // a\n      else if (code >= 65) val = code - 65 + 10 // A\n      else if (code >= 48 && code <= 57) val = code - 48 // 0-9\n      else val = Infinity\n      if (val >= radix) break\n      ++this$1.pos\n      total = total * radix + val\n    }\n    if (this.pos === start || len != null && this.pos - start !== len) return null\n\n    return total\n  }\n\n  pp$7.readRadixNumber = function(radix) {\n    this.pos += 2 // 0x\n    var val = this.readInt(radix)\n    if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix)\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n    return this.finishToken(tt.num, val)\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  pp$7.readNumber = function(startsWithDot) {\n    var start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48\n    if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\")\n    var next = this.input.charCodeAt(this.pos)\n    if (next === 46) { // '.'\n      ++this.pos\n      this.readInt(10)\n      isFloat = true\n      next = this.input.charCodeAt(this.pos)\n    }\n    if (next === 69 || next === 101) { // 'eE'\n      next = this.input.charCodeAt(++this.pos)\n      if (next === 43 || next === 45) ++this.pos // '+-'\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\")\n      isFloat = true\n    }\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n\n    var str = this.input.slice(start, this.pos), val\n    if (isFloat) val = parseFloat(str)\n    else if (!octal || str.length === 1) val = parseInt(str, 10)\n    else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\")\n    else val = parseInt(str, 8)\n    return this.finishToken(tt.num, val)\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  pp$7.readCodePoint = function() {\n    var ch = this.input.charCodeAt(this.pos), code\n\n    if (ch === 123) {\n      if (this.options.ecmaVersion < 6) this.unexpected()\n      var codePos = ++this.pos\n      code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos)\n      ++this.pos\n      if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\")\n    } else {\n      code = this.readHexChar(4)\n    }\n    return code\n  }\n\n  function codePointToString(code) {\n    // UTF-16 Decoding\n    if (code <= 0xFFFF) return String.fromCharCode(code)\n    code -= 0x10000\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n  }\n\n  pp$7.readString = function(quote) {\n    var this$1 = this;\n\n    var out = \"\", chunkStart = ++this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated string constant\")\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      if (ch === quote) break\n      if (ch === 92) { // '\\'\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        out += this$1.readEscapedChar(false)\n        chunkStart = this$1.pos\n      } else {\n        if (isNewLine(ch)) this$1.raise(this$1.start, \"Unterminated string constant\")\n        ++this$1.pos\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++)\n    return this.finishToken(tt.string, out)\n  }\n\n  // Reads template string tokens.\n\n  pp$7.readTmplToken = function() {\n    var this$1 = this;\n\n    var out = \"\", chunkStart = this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated template\")\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n        if (this$1.pos === this$1.start && this$1.type === tt.template) {\n          if (ch === 36) {\n            this$1.pos += 2\n            return this$1.finishToken(tt.dollarBraceL)\n          } else {\n            ++this$1.pos\n            return this$1.finishToken(tt.backQuote)\n          }\n        }\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        return this$1.finishToken(tt.template, out)\n      }\n      if (ch === 92) { // '\\'\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        out += this$1.readEscapedChar(true)\n        chunkStart = this$1.pos\n      } else if (isNewLine(ch)) {\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        ++this$1.pos\n        switch (ch) {\n          case 13:\n            if (this$1.input.charCodeAt(this$1.pos) === 10) ++this$1.pos\n          case 10:\n            out += \"\\n\"\n            break\n          default:\n            out += String.fromCharCode(ch)\n            break\n        }\n        if (this$1.options.locations) {\n          ++this$1.curLine\n          this$1.lineStart = this$1.pos\n        }\n        chunkStart = this$1.pos\n      } else {\n        ++this$1.pos\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  pp$7.readEscapedChar = function(inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos)\n    ++this.pos\n    switch (ch) {\n    case 110: return \"\\n\" // 'n' -> '\\n'\n    case 114: return \"\\r\" // 'r' -> '\\r'\n    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n    case 117: return codePointToString(this.readCodePoint()) // 'u'\n    case 116: return \"\\t\" // 't' -> '\\t'\n    case 98: return \"\\b\" // 'b' -> '\\b'\n    case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n    case 102: return \"\\f\" // 'f' -> '\\f'\n    case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos // '\\r\\n'\n    case 10: // ' \\n'\n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine }\n      return \"\"\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]\n        var octal = parseInt(octalStr, 8)\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1)\n          octal = parseInt(octalStr, 8)\n        }\n        if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n          this.raise(this.pos - 2, \"Octal literal in strict mode\")\n        }\n        this.pos += octalStr.length - 1\n        return String.fromCharCode(octal)\n      }\n      return String.fromCharCode(ch)\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n  pp$7.readHexChar = function(len) {\n    var codePos = this.pos\n    var n = this.readInt(16, len)\n    if (n === null) this.raise(codePos, \"Bad character escape sequence\")\n    return n\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  pp$7.readWord1 = function() {\n    var this$1 = this;\n\n    this.containsEsc = false\n    var word = \"\", first = true, chunkStart = this.pos\n    var astral = this.options.ecmaVersion >= 6\n    while (this.pos < this.input.length) {\n      var ch = this$1.fullCharCodeAtPos()\n      if (isIdentifierChar(ch, astral)) {\n        this$1.pos += ch <= 0xffff ? 1 : 2\n      } else if (ch === 92) { // \"\\\"\n        this$1.containsEsc = true\n        word += this$1.input.slice(chunkStart, this$1.pos)\n        var escStart = this$1.pos\n        if (this$1.input.charCodeAt(++this$1.pos) != 117) // \"u\"\n          this$1.raise(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\")\n        ++this$1.pos\n        var esc = this$1.readCodePoint()\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n          this$1.raise(escStart, \"Invalid Unicode escape\")\n        word += codePointToString(esc)\n        chunkStart = this$1.pos\n      } else {\n        break\n      }\n      first = false\n    }\n    return word + this.input.slice(chunkStart, this.pos)\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  pp$7.readWord = function() {\n    var word = this.readWord1()\n    var type = tt.name\n    if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word))\n      type = keywordTypes[word]\n    return this.finishToken(type, word)\n  }\n\n  var version = \"3.3.0\"\n\n  // The main exported interface (under `self.acorn` when in the\n  // browser) is a `parse` function that takes a code string and\n  // returns an abstract syntax tree as specified by [Mozilla parser\n  // API][api].\n  //\n  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\n  function parse(input, options) {\n    return new Parser(options, input).parse()\n  }\n\n  // This function tries to parse a single expression at a given\n  // offset in a string. Useful for parsing mixed-language formats\n  // that embed JavaScript expressions.\n\n  function parseExpressionAt(input, pos, options) {\n    var p = new Parser(options, input, pos)\n    p.nextToken()\n    return p.parseExpression()\n  }\n\n  // Acorn is organized as a tokenizer and a recursive-descent parser.\n  // The `tokenizer` export provides an interface to the tokenizer.\n\n  function tokenizer(input, options) {\n    return new Parser(options, input)\n  }\n\n  exports.version = version;\n  exports.parse = parse;\n  exports.parseExpressionAt = parseExpressionAt;\n  exports.tokenizer = tokenizer;\n  exports.Parser = Parser;\n  exports.plugins = plugins;\n  exports.defaultOptions = defaultOptions;\n  exports.Position = Position;\n  exports.SourceLocation = SourceLocation;\n  exports.getLineInfo = getLineInfo;\n  exports.Node = Node;\n  exports.TokenType = TokenType;\n  exports.tokTypes = tt;\n  exports.TokContext = TokContext;\n  exports.tokContexts = types;\n  exports.isIdentifierChar = isIdentifierChar;\n  exports.isIdentifierStart = isIdentifierStart;\n  exports.Token = Token;\n  exports.isNewLine = isNewLine;\n  exports.lineBreak = lineBreak;\n  exports.lineBreakG = lineBreakG;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/acorn/dist/acorn.js\n// module id = /home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/acorn/dist/acorn.js\n// module chunks = 0","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return (b64.length * 3 / 4) - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr((len * 3 / 4) - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0; i < l; i += 4) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/base64-js/index.js\n// module id = /home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/base64-js/index.js\n// module chunks = 0","import wrap from './wrap.js';\nimport keys from './keys.js';\n\n// used for debugging, without the noise created by\n// circular references\nfunction toJSON ( node ) {\n\tvar obj = {};\n\n\tObject.keys( node ).forEach( key => {\n\t\tif ( key === 'parent' || key === 'program' || key === 'keys' || key === '__wrapped' ) return;\n\n\t\tif ( Array.isArray( node[ key ] ) ) {\n\t\t\tobj[ key ] = node[ key ].map( toJSON );\n\t\t} else if ( node[ key ] && node[ key ].toJSON ) {\n\t\t\tobj[ key ] = node[ key ].toJSON();\n\t\t} else {\n\t\t\tobj[ key ] = node[ key ];\n\t\t}\n\t});\n\n\treturn obj;\n}\n\nexport default class Node {\n\tconstructor ( raw, parent ) {\n\t\traw.parent = parent;\n\t\traw.program = parent.program || parent;\n\t\traw.depth = parent.depth + 1;\n\t\traw.keys = keys[ raw.type ];\n\t\traw.indentation = undefined;\n\n\t\tfor ( const key of keys[ raw.type ] ) {\n\t\t\twrap( raw[ key ], raw );\n\t\t}\n\n\t\traw.program.magicString.addSourcemapLocation( raw.start );\n\t\traw.program.magicString.addSourcemapLocation( raw.end );\n\t}\n\n\tancestor ( level ) {\n\t\tlet node = this;\n\t\twhile ( level-- ) {\n\t\t\tnode = node.parent;\n\t\t\tif ( !node ) return null;\n\t\t}\n\n\t\treturn node;\n\t}\n\n\tcontains ( node ) {\n\t\twhile ( node ) {\n\t\t\tif ( node === this ) return true;\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfindLexicalBoundary () {\n\t\treturn this.parent.findLexicalBoundary();\n\t}\n\n\tfindNearest ( type ) {\n\t\tif ( typeof type === 'string' ) type = new RegExp( `^${type}$` );\n\t\tif ( type.test( this.type ) ) return this;\n\t\treturn this.parent.findNearest( type );\n\t}\n\n\tunparenthesizedParent () {\n\t\tlet node = this.parent;\n\t\twhile ( node && node.type === 'ParenthesizedExpression' ) {\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn node;\n\t}\n\n\tunparenthesize () {\n\t\tlet node = this;\n\t\twhile ( node.type === 'ParenthesizedExpression' ) {\n\t\t\tnode = node.expression;\n\t\t}\n\t\treturn node;\n\t}\n\n\tfindScope ( functionScope ) {\n\t\treturn this.parent.findScope( functionScope );\n\t}\n\n\tgetIndentation () {\n\t\treturn this.parent.getIndentation();\n\t}\n\n\tinitialise ( transforms ) {\n\t\tfor ( var key of this.keys ) {\n\t\t\tconst value = this[ key ];\n\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\tvalue.forEach( node => node && node.initialise( transforms ) );\n\t\t\t} else if ( value && typeof value === 'object' ) {\n\t\t\t\tvalue.initialise( transforms );\n\t\t\t}\n\t\t}\n\t}\n\n\ttoJSON () {\n\t\treturn toJSON( this );\n\t}\n\n\ttoString () {\n\t\treturn this.program.magicString.original.slice( this.start, this.end );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tfor ( const key of this.keys ) {\n\t\t\tconst value = this[ key ];\n\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\tvalue.forEach( node => node && node.transpile( code, transforms ) );\n\t\t\t} else if ( value && typeof value === 'object' ) {\n\t\t\t\tvalue.transpile( code, transforms );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/Node.js","export function isArguments ( node ) {\n\treturn node.type === 'Identifier' && node.name === 'arguments';\n}\n\nexport default function spread ( code, elements, start, argumentsArrayAlias, isNew ) {\n\tlet i = elements.length;\n\tlet firstSpreadIndex = -1;\n\n\twhile ( i-- ) {\n\t\tconst element = elements[i];\n\t\tif ( element && element.type === 'SpreadElement' ) {\n\t\t\tif ( isArguments( element.argument ) ) {\n\t\t\t\tcode.overwrite( element.argument.start, element.argument.end, argumentsArrayAlias );\n\t\t\t}\n\n\t\t\tfirstSpreadIndex = i;\n\t\t}\n\t}\n\n\tif ( firstSpreadIndex === -1 ) return false; // false indicates no spread elements\n\n\tif (isNew) {\n\t\tfor ( i = 0; i < elements.length; i += 1 ) {\n\t\t\tlet element = elements[i];\n\t\t\tif ( element.type === 'SpreadElement' ) {\n\t\t\t\tcode.remove( element.start, element.argument.start );\n\t\t\t} else {\n\t\t\t\tcode.insertRight( element.start, '[' );\n\t\t\t\tcode.insertRight( element.end, ']' );\n\t\t\t}\n\t\t}\n\n\t\treturn true; // true indicates some spread elements\n\t}\n\n\tlet element = elements[ firstSpreadIndex ];\n\tconst previousElement = elements[ firstSpreadIndex - 1 ];\n\n\tif ( !previousElement ) {\n\t\tcode.remove( start, element.start );\n\t\tcode.overwrite( element.end, elements[1].start, '.concat( ' );\n\t} else {\n\t\tcode.overwrite( previousElement.end, element.start, ' ].concat( ' );\n\t}\n\n\tfor ( i = firstSpreadIndex; i < elements.length; i += 1 ) {\n\t\telement = elements[i];\n\n\t\tif ( element ) {\n\t\t\tif ( element.type === 'SpreadElement' ) {\n\t\t\t\tcode.remove( element.start, element.argument.start );\n\t\t\t} else {\n\t\t\t\tcode.insertLeft( element.start, '[' );\n\t\t\t\tcode.insertLeft( element.end, ']' );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true; // true indicates some spread elements\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/spread.js","export default function locate ( source, index ) {\n\tvar lines = source.split( '\\n' );\n\tvar len = lines.length;\n\n\tvar lineStart = 0;\n\tvar i;\n\n\tfor ( i = 0; i < len; i += 1 ) {\n\t\tvar line = lines[i];\n\t\tvar lineEnd =  lineStart + line.length + 1; // +1 for newline\n\n\t\tif ( lineEnd > index ) {\n\t\t\treturn { line: i + 1, column: index - lineStart, char: i };\n\t\t}\n\n\t\tlineStart = lineEnd;\n\t}\n\n\tthrow new Error( 'Could not determine location of character' );\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/locate.js","function pad ( num, len ) {\n\tlet result = String( num );\n\treturn result + repeat( ' ', len - result.length );\n}\n\nfunction repeat ( str, times ) {\n\tlet result = '';\n\twhile ( times-- ) result += str;\n\treturn result;\n}\n\nexport default function getSnippet ( source, loc, length = 1 ) {\n\tconst first = Math.max( loc.line - 5, 0 );\n\tconst last = loc.line;\n\n\tconst numDigits = String( last ).length;\n\n\tconst lines = source.split( '\\n' ).slice( first, last );\n\n\tconst lastLine = lines[ lines.length - 1 ];\n\tconst offset = lastLine.slice( 0, loc.column ).replace( /\\t/g, '  ' ).length;\n\n\tlet snippet = lines\n\t\t.map( ( line, i ) => `${pad( i + first + 1, numDigits )} : ${line.replace( /\\t/g, '  ')}` )\n\t\t.join( '\\n' );\n\n\tsnippet += '\\n' + repeat( ' ', numDigits + 3 + offset ) + repeat( '^', length );\n\n\treturn snippet;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/getSnippet.js","export function findIndex ( array, fn ) {\n\tfor ( let i = 0; i < array.length; i += 1 ) {\n\t\tif ( fn( array[i], i ) ) return i;\n\t}\n\n\treturn -1;\n}\n\nexport function find ( array, fn ) {\n\treturn array[ findIndex( array, fn ) ];\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/array.js","// TODO this function is slightly flawed – it works on the original string,\n// not its current edited state.\n// That's not a problem for the way that it's currently used, but it could\n// be in future...\nexport default function deindent ( node, code ) {\n\tconst start = node.start;\n\tconst end = node.end;\n\n\tconst indentStr = code.getIndentString();\n\tconst indentStrLen = indentStr.length;\n\tconst indentStart = start - indentStrLen;\n\n\tif ( !node.program.indentExclusions[ indentStart ]\n\t&& code.original.slice( indentStart, start ) === indentStr ) {\n\t\tcode.remove( indentStart, start );\n\t}\n\n\tconst pattern = new RegExp( indentStr + '\\\\S', 'g' );\n\tconst slice = code.original.slice( start, end );\n\tlet match;\n\n\twhile ( match = pattern.exec( slice ) ) {\n\t\tconst removeStart = start + match.index;\n\t\tif ( !node.program.indentExclusions[ removeStart ] ) {\n\t\t\tcode.remove( removeStart, removeStart + indentStrLen );\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/deindent.js","export default function extractNames ( node ) {\n\tconst names = [];\n\textractors[ node.type ]( names, node );\n\treturn names;\n}\n\nconst extractors = {\n\tIdentifier ( names, node ) {\n\t\tnames.push( node );\n\t},\n\n\tObjectPattern ( names, node ) {\n\t\tfor ( const prop of node.properties ) {\n\t\t\textractors[ prop.value.type ]( names, prop.value );\n\t\t}\n\t},\n\n\tArrayPattern ( names, node ) {\n\t\tfor ( const element of node.elements )  {\n\t\t\tif ( element ) extractors[ element.type ]( names, element );\n\t\t}\n\t},\n\n\tRestElement ( names, node ) {\n\t\textractors[ node.argument.type ]( names, node.argument );\n\t},\n\n\tAssignmentPattern ( names, node ) {\n\t\textractors[ node.left.type ]( names, node.left );\n\t}\n};\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/extractNames.js","import { findIndex } from './array.js';\n\nconst handlers = {\n\tIdentifier: destructureIdentifier,\n\tAssignmentPattern: destructureAssignmentPattern,\n\tArrayPattern: destructureArrayPattern,\n\tObjectPattern: destructureObjectPattern\n};\n\nexport default function destructure ( code, scope, node, ref, inline, statementGenerators ) {\n\thandlers[ node.type ]( code, scope, node, ref, inline, statementGenerators );\n}\n\nfunction destructureIdentifier ( code, scope, node, ref, inline, statementGenerators ) {\n\tstatementGenerators.push( ( start, prefix, suffix ) => {\n\t\tcode.insertRight( node.start, inline ? prefix : `${prefix}var ` );\n\t\tcode.insertLeft( node.end, ` = ${ref}${suffix}` );\n\t\tcode.move( node.start, node.end, start );\n\t});\n}\n\nfunction destructureAssignmentPattern ( code, scope, node, ref, inline, statementGenerators ) {\n\tconst isIdentifier = node.left.type === 'Identifier';\n\tconst name = isIdentifier ? node.left.name : ref;\n\n\tif ( !inline ) {\n\t\tstatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\tcode.insertRight( node.left.end, `${prefix}if ( ${name} === void 0 ) ${name}` );\n\t\t\tcode.move( node.left.end, node.right.end, start );\n\t\t\tcode.insertLeft( node.right.end, suffix );\n\t\t});\n\t}\n\n\tif ( !isIdentifier ) {\n\t\tdestructure( code, scope, node.left, ref, inline, statementGenerators );\n\t}\n}\n\nfunction destructureArrayPattern ( code, scope, node, ref, inline, statementGenerators ) {\n\tlet c = node.start;\n\n\tnode.elements.forEach( ( element, i ) => {\n\t\tif ( !element ) return;\n\n\t\tif ( element.type === 'RestElement' ) {\n\t\t\thandleProperty( code, scope, c, element.argument, `${ref}.slice(${i})`, inline, statementGenerators );\n\t\t} else {\n\t\t\thandleProperty( code, scope, c, element, `${ref}[${i}]`, inline, statementGenerators );\n\t\t}\n\t\tc = element.end;\n\t});\n\n\tcode.remove( c, node.end );\n}\n\nfunction destructureObjectPattern ( code, scope, node, ref, inline, statementGenerators ) {\n\tlet c = node.start;\n\n\tnode.properties.forEach( prop => {\n\t\tlet value = prop.computed || prop.key.type !== 'Identifier' ? `${ref}[${code.slice(prop.key.start, prop.key.end)}]` : `${ref}.${prop.key.name}`;\n\t\thandleProperty( code, scope, c, prop.value, value, inline, statementGenerators );\n\t\tc = prop.end;\n\t});\n\n\tcode.remove( c, node.end );\n}\n\nfunction handleProperty ( code, scope, c, node, value, inline, statementGenerators ) {\n\tswitch ( node.type ) {\n\t\tcase 'Identifier': {\n\t\t\tcode.remove( c, node.start );\n\t\t\tdestructureIdentifier( code, scope, node, value, inline, statementGenerators );\n\t\t\tbreak;\n\t\t}\n\n\t\tcase 'AssignmentPattern': {\n\t\t\tlet name;\n\n\t\t\tconst isIdentifier = node.left.type === 'Identifier';\n\n\t\t\tif ( isIdentifier ) {\n\t\t\t\tname = node.left.name;\n\t\t\t\tconst declaration = scope.findDeclaration( name );\n\t\t\t\tif ( declaration ) name = declaration.name;\n\t\t\t} else {\n\t\t\t\tname = scope.createIdentifier( value );\n\t\t\t}\n\n\t\t\tstatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\tif ( inline ) {\n\t\t\t\t\tcode.insertRight( node.right.start, `${name} = ${value} === undefined ? ` );\n\t\t\t\t\tcode.insertLeft( node.right.end, ` : ${value}` );\n\t\t\t\t} else {\n\t\t\t\t\tcode.insertRight( node.right.start, `${prefix}var ${name} = ${value}; if ( ${name} === void 0 ) ${name} = ` );\n\t\t\t\t\tcode.insertLeft( node.right.end, suffix );\n\t\t\t\t}\n\n\t\t\t\tcode.move( node.right.start, node.right.end, start );\n\t\t\t});\n\n\t\t\tif ( isIdentifier ) {\n\t\t\t\tcode.remove( c, node.right.start );\n\t\t\t} else {\n\t\t\t\tcode.remove( c, node.left.start );\n\t\t\t\tcode.remove( node.left.end, node.right.start );\n\t\t\t\thandleProperty( code, scope, c, node.left, name, inline, statementGenerators );\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase 'ObjectPattern': {\n\t\t\tcode.remove( c, c = node.start );\n\n\t\t\tif ( node.properties.length > 1 ) {\n\t\t\t\tconst ref = scope.createIdentifier( value );\n\n\t\t\t\tstatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\t\t// this feels a tiny bit hacky, but we can't do a\n\t\t\t\t\t// straightforward insertLeft and keep correct order...\n\t\t\t\t\tcode.insertRight( node.start, `${prefix}var ${ref} = ` );\n\t\t\t\t\tcode.overwrite( node.start, c = node.start + 1, value );\n\t\t\t\t\tcode.insertLeft( c, suffix );\n\n\t\t\t\t\tcode.move( node.start, c, start );\n\t\t\t\t});\n\n\t\t\t\tnode.properties.forEach( prop => {\n\t\t\t\t\tconst value = prop.computed || prop.key.type !== 'Identifier' ? `${ref}[${code.slice(prop.key.start, prop.key.end)}]` : `${ref}.${prop.key.name}`;\n\t\t\t\t\thandleProperty( code, scope, c, prop.value, value, inline, statementGenerators );\n\t\t\t\t\tc = prop.end;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst prop = node.properties[0];\n\t\t\t\tconst value_suffix = prop.computed || prop.key.type !== 'Identifier' ? `[${code.slice(prop.key.start, prop.key.end)}]` : `.${prop.key.name}`;\n\t\t\t\thandleProperty( code, scope, c, prop.value, `${value}${value_suffix}`, inline, statementGenerators );\n\t\t\t\tc = prop.end;\n\t\t\t}\n\n\t\t\tcode.remove( c, node.end );\n\t\t\tbreak;\n\t\t}\n\n\t\tcase 'ArrayPattern': {\n\t\t\tcode.remove( c, c = node.start );\n\n\t\t\tif ( node.elements.filter( Boolean ).length > 1 ) {\n\t\t\t\tconst ref = scope.createIdentifier( value );\n\n\t\t\t\tstatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\t\tcode.insertRight( node.start, `${prefix}var ${ref} = ` );\n\t\t\t\t\tcode.overwrite( node.start, c = node.start + 1, value );\n\t\t\t\t\tcode.insertLeft( c, suffix );\n\n\t\t\t\t\tcode.move( node.start, c, start );\n\t\t\t\t});\n\n\t\t\t\tnode.elements.forEach( ( element, i ) => {\n\t\t\t\t\tif ( !element ) return;\n\n\t\t\t\t\tif ( element.type === 'RestElement' ) {\n\t\t\t\t\t\thandleProperty( code, scope, c, element.argument, `${ref}.slice(${i})`, inline, statementGenerators );\n\t\t\t\t\t} else {\n\t\t\t\t\t\thandleProperty( code, scope, c, element, `${ref}[${i}]`, inline, statementGenerators );\n\t\t\t\t\t}\n\t\t\t\t\tc = element.end;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst index = findIndex( node.elements, Boolean );\n\t\t\t\tconst element = node.elements[ index ];\n\t\t\t\tif ( element.type === 'RestElement' ) {\n\t\t\t\t\thandleProperty( code, scope, c, element.argument, `${value}.slice(${index})`, inline, statementGenerators );\n\t\t\t\t} else {\n\t\t\t\t\thandleProperty( code, scope, c, element, `${value}[${index}]`, inline, statementGenerators );\n\t\t\t\t}\n\t\t\t\tc = element.end;\n\t\t\t}\n\n\t\t\tcode.remove( c, node.end );\n\t\t\tbreak;\n\t\t}\n\n\t\tdefault: {\n\t\t\tthrow new Error( `Unexpected node type in destructuring (${node.type})` );\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/destructure.js","export default function isReference ( node, parent ) {\n\tif ( node.type === 'MemberExpression' ) {\n\t\treturn !node.computed && isReference( node.object, node );\n\t}\n\n\tif ( node.type === 'Identifier' ) {\n\t\t// the only time we could have an identifier node without a parent is\n\t\t// if it's the entire body of a function without a block statement –\n\t\t// i.e. an arrow function expression like `a => a`\n\t\tif ( !parent ) return true;\n\n\t\tif ( /(Function|Class)Expression/.test( parent.type ) ) return false;\n\n\t\tif ( parent.type === 'VariableDeclarator' ) return node === parent.init;\n\n\t\t// TODO is this right?\n\t\tif ( parent.type === 'MemberExpression' || parent.type === 'MethodDefinition' ) {\n\t\t\treturn parent.computed || node === parent.object;\n\t\t}\n\n\t\tif ( parent.type === 'ArrayPattern' ) return false;\n\n\t\t// disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n\t\tif ( parent.type === 'Property' ) {\n\t\t\tif ( parent.parent.type === 'ObjectPattern' ) return false;\n\t\t\treturn parent.computed || node === parent.value;\n\t\t}\n\n\t\t// disregard the `bar` in `class Foo { bar () {...} }`\n\t\tif ( parent.type === 'MethodDefinition' ) return false;\n\n\t\t// disregard the `bar` in `export { foo as bar }`\n\t\tif ( parent.type === 'ExportSpecifier' && node !== parent.local ) return false;\n\n\t\treturn true;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/isReference.js","import Node from '../Node.js';\n\nfunction containsNewLine ( node ) {\n\treturn node.type === 'Literal' && !/\\S/.test( node.value ) && /\\n/.test( node.value );\n}\n\nexport default class JSXClosingElement extends Node {\n\ttranspile ( code ) {\n\t\tlet spaceBeforeParen = true;\n\n\t\tconst lastChild = this.parent.children[ this.parent.children.length - 1 ];\n\n\t\t// omit space before closing paren if\n\t\t//   a) this is on a separate line, or\n\t\t//   b) there are no children but there are attributes\n\t\tif ( ( lastChild && containsNewLine( lastChild ) ) || ( this.parent.openingElement.attributes.length ) ) {\n\t\t\tspaceBeforeParen = false;\n\t\t}\n\n\t\tcode.overwrite( this.start, this.end, spaceBeforeParen ? ' )' : ')' );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/JSXClosingElement.js","import Node from '../Node.js';\n\nfunction normalise ( str, removeTrailingWhitespace ) {\n\tif ( removeTrailingWhitespace && /\\n/.test( str ) ) {\n\t\tstr = str.replace( /\\s+$/, '' );\n\t}\n\n\tstr = str\n\t\t.replace( /^\\n\\r?\\s+/, '' )       // remove leading newline + space\n\t\t.replace( /\\s*\\n\\r?\\s*/gm, ' ' ); // replace newlines with spaces\n\n\t// TODO prefer single quotes?\n\treturn JSON.stringify( str );\n}\n\nexport default class JSXElement extends Node {\n\ttranspile ( code, transforms ) {\n\t\tsuper.transpile( code, transforms );\n\n\t\tconst children = this.children.filter( child => {\n\t\t\tif ( child.type !== 'Literal' ) return true;\n\n\t\t\t// remove whitespace-only literals, unless on a single line\n\t\t\treturn /\\S/.test( child.value ) || !/\\n/.test( child.value );\n\t\t});\n\n\t\tif ( children.length ) {\n\t\t\tlet c = this.openingElement.end;\n\n\t\t\tlet i;\n\t\t\tfor ( i = 0; i < children.length; i += 1 ) {\n\t\t\t\tconst child = children[i];\n\n\t\t\t\tif ( child.type === 'JSXExpressionContainer' && child.expression.type === 'JSXEmptyExpression' ) {\n\t\t\t\t\t// empty block is a no op\n\t\t\t\t} else {\n\t\t\t\t\tconst tail = code.original[ c ] === '\\n' && child.type !== 'Literal' ? '' : ' ';\n\t\t\t\t\tcode.insertLeft( c, `,${tail}` );\n\t\t\t\t}\n\n\t\t\t\tif ( child.type === 'Literal' ) {\n\t\t\t\t\tconst str = normalise( child.value, i === children.length - 1 );\n\t\t\t\t\tcode.overwrite( child.start, child.end, str );\n\t\t\t\t}\n\n\t\t\t\tc = child.end;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/JSXElement.js","import types from './types/index.js';\nimport BlockStatement from './BlockStatement.js';\nimport Node from './Node.js';\nimport keys from './keys.js';\n\nconst statementsWithBlocks = {\n\tIfStatement: 'consequent',\n\tForStatement: 'body',\n\tForInStatement: 'body',\n\tForOfStatement: 'body',\n\tWhileStatement: 'body',\n\tDoWhileStatement: 'body',\n\tArrowFunctionExpression: 'body'\n};\n\nexport default function wrap ( raw, parent ) {\n\tif ( !raw ) return;\n\n\tif ( 'length' in raw ) {\n\t\tlet i = raw.length;\n\t\twhile ( i-- ) wrap( raw[i], parent );\n\t\treturn;\n\t}\n\n\t// with e.g. shorthand properties, key and value are\n\t// the same node. We don't want to wrap an object twice\n\tif ( raw.__wrapped ) return;\n\traw.__wrapped = true;\n\n\tif ( !keys[ raw.type ] ) {\n\t\tkeys[ raw.type ] = Object.keys( raw ).filter( key => typeof raw[ key ] === 'object' );\n\t}\n\n\t// special case – body-less if/for/while statements. TODO others?\n\tconst bodyType = statementsWithBlocks[ raw.type ];\n\tif ( bodyType && raw[ bodyType ].type !== 'BlockStatement' ) {\n\t\tconst expression = raw[ bodyType ];\n\n\t\t// create a synthetic block statement, otherwise all hell\n\t\t// breaks loose when it comes to block scoping\n\t\traw[ bodyType ] = {\n\t\t\tstart: expression.start,\n\t\t\tend: expression.end,\n\t\t\ttype: 'BlockStatement',\n\t\t\tbody: [ expression ],\n\t\t\tsynthetic: true\n\t\t};\n\t}\n\n\tnew Node( raw, parent );\n\n\tconst type = ( raw.type === 'BlockStatement' ? BlockStatement : types[ raw.type ] ) || Node;\n\traw.__proto__ = type.prototype;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/wrap.js","import extractNames from './extractNames.js';\nimport reserved from '../utils/reserved.js';\nimport CompileError from '../utils/CompileError.js';\n\nconst letConst = /^(?:let|const)$/;\n\nexport default function Scope ( options ) {\n\toptions = options || {};\n\n\tthis.parent = options.parent;\n\tthis.isBlockScope = !!options.block;\n\n\tlet scope = this;\n\twhile ( scope.isBlockScope ) scope = scope.parent;\n\tthis.functionScope = scope;\n\n\tthis.identifiers = [];\n\tthis.declarations = Object.create( null );\n\tthis.references = Object.create( null );\n\tthis.blockScopedDeclarations = this.isBlockScope ? null : Object.create( null );\n\tthis.aliases = this.isBlockScope ? null : Object.create( null );\n}\n\nScope.prototype = {\n\taddDeclaration ( node, kind ) {\n\t\tfor ( const identifier of extractNames( node ) ) {\n\t\t\tconst name = identifier.name;\n\t\t\tconst existingDeclaration = this.declarations[ name ];\n\t\t\tif ( existingDeclaration && ( letConst.test( kind ) || letConst.test( existingDeclaration.kind ) ) ) {\n\t\t\t\t// TODO warn about double var declarations?\n\t\t\t\tthrow new CompileError( identifier, `${name} is already declared` );\n\t\t\t}\n\n\t\t\tconst declaration = { name, node: identifier, kind, instances: [] };\n\t\t\tthis.declarations[ name ] = declaration;\n\n\t\t\tif ( this.isBlockScope ) {\n\t\t\t\tif ( !this.functionScope.blockScopedDeclarations[ name ] ) this.functionScope.blockScopedDeclarations[ name ] = [];\n\t\t\t\tthis.functionScope.blockScopedDeclarations[ name ].push( declaration );\n\t\t\t}\n\t\t}\n\t},\n\n\taddReference ( identifier ) {\n\t\tif ( this.consolidated ) {\n\t\t\tthis.consolidateReference( identifier );\n\t\t} else {\n\t\t\tthis.identifiers.push( identifier );\n\t\t}\n\t},\n\n\tconsolidate () {\n\t\tfor ( let i = 0; i < this.identifiers.length; i += 1 ) { // we might push to the array during consolidation, so don't cache length\n\t\t\tconst identifier = this.identifiers[i];\n\t\t\tthis.consolidateReference( identifier );\n\t\t}\n\n\t\tthis.consolidated = true; // TODO understand why this is necessary... seems bad\n\t},\n\n\tconsolidateReference ( identifier ) {\n\t\tconst declaration = this.declarations[ identifier.name ];\n\t\tif ( declaration ) {\n\t\t\tdeclaration.instances.push( identifier );\n\t\t} else {\n\t\t\tthis.references[ identifier.name ] = true;\n\t\t\tif ( this.parent ) this.parent.addReference( identifier );\n\t\t}\n\t},\n\n\tcontains ( name ) {\n\t\treturn this.declarations[ name ] ||\n\t\t       ( this.parent ? this.parent.contains( name ) : false );\n\t},\n\n\tcreateIdentifier ( base ) {\n\t\tif ( typeof base === 'number' ) base = base.toString();\n\n\t\tbase = base\n\t\t\t.replace( /\\s/g, '' )\n\t\t\t.replace( /\\[([^\\]]+)\\]/g, '_$1' )\n\t\t\t.replace( /[^a-zA-Z0-9_$]/g, '_' )\n\t\t\t.replace( /_{2,}/, '_' );\n\n\t\tlet name = base;\n\t\tlet counter = 1;\n\n\t\twhile ( this.declarations[ name ] || this.references[ name ] || this.aliases[ name ] || name in reserved ) {\n\t\t\tname = `${base}$${counter++}`;\n\t\t}\n\n\t\tthis.aliases[ name ] = true;\n\t\treturn name;\n\t},\n\n\tfindDeclaration ( name ) {\n\t\treturn this.declarations[ name ] ||\n\t\t       ( this.parent && this.parent.findDeclaration( name ) );\n\t}\n};\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/Scope.js","import './wrap.js'; // TODO necessary for ordering. sort it out\nimport Node from './Node.js';\nimport Scope from './Scope.js';\nimport destructure from '../utils/destructure.js';\n\nfunction isUseStrict ( node ) {\n\tif ( !node ) return false;\n\tif ( node.type !== 'ExpressionStatement' ) return false;\n\tif ( node.expression.type !== 'Literal' ) return false;\n\treturn node.expression.value === 'use strict';\n}\n\nexport default class BlockStatement extends Node {\n\tcreateScope () {\n\t\tthis.parentIsFunction = /Function/.test( this.parent.type );\n\t\tthis.isFunctionBlock = this.parentIsFunction || this.parent.type === 'Root';\n\t\tthis.scope = new Scope({\n\t\t\tblock: !this.isFunctionBlock,\n\t\t\tparent: this.parent.findScope( false )\n\t\t});\n\n\t\tif ( this.parentIsFunction ) {\n\t\t\tthis.parent.params.forEach( node => {\n\t\t\t\tthis.scope.addDeclaration( node, 'param' );\n\t\t\t});\n\t\t}\n\t}\n\n\tinitialise ( transforms ) {\n\t\tthis.thisAlias = null;\n\t\tthis.argumentsAlias = null;\n\t\tthis.defaultParameters = [];\n\n\t\t// normally the scope gets created here, during initialisation,\n\t\t// but in some cases (e.g. `for` statements), we need to create\n\t\t// the scope early, as it pertains to both the init block and\n\t\t// the body of the statement\n\t\tif ( !this.scope ) this.createScope();\n\n\t\tthis.body.forEach( node => node.initialise( transforms ) );\n\n\t\tthis.scope.consolidate();\n\t}\n\n\tfindLexicalBoundary () {\n\t\tif ( this.type === 'Program' ) return this;\n\t\tif ( /^Function/.test( this.parent.type ) ) return this;\n\n\t\treturn this.parent.findLexicalBoundary();\n\t}\n\n\tfindScope ( functionScope ) {\n\t\tif ( functionScope && !this.isFunctionBlock ) return this.parent.findScope( functionScope );\n\t\treturn this.scope;\n\t}\n\n\tgetArgumentsAlias () {\n\t\tif ( !this.argumentsAlias ) {\n\t\t\tthis.argumentsAlias = this.scope.createIdentifier( 'arguments' );\n\t\t}\n\n\t\treturn this.argumentsAlias;\n\t}\n\n\tgetArgumentsArrayAlias () {\n\t\tif ( !this.argumentsArrayAlias ) {\n\t\t\tthis.argumentsArrayAlias = this.scope.createIdentifier( 'argsArray' );\n\t\t}\n\n\t\treturn this.argumentsArrayAlias;\n\t}\n\n\tgetThisAlias () {\n\t\tif ( !this.thisAlias ) {\n\t\t\tthis.thisAlias = this.scope.createIdentifier( 'this' );\n\t\t}\n\n\t\treturn this.thisAlias;\n\t}\n\n\tgetIndentation () {\n\t\tif ( this.indentation === undefined ) {\n\t\t\tconst source = this.program.magicString.original;\n\n\t\t\tconst useOuter = this.synthetic || !this.body.length;\n\t\t\tlet c = useOuter ? this.start : this.body[0].start;\n\n\t\t\twhile ( c && source[c] !== '\\n' ) c -= 1;\n\n\t\t\tthis.indentation = '';\n\n\t\t\twhile ( true ) { // eslint-disable-line no-constant-condition\n\t\t\t\tc += 1;\n\t\t\t\tconst char = source[c];\n\n\t\t\t\tif ( char !== ' ' && char !== '\\t' ) break;\n\n\t\t\t\tthis.indentation += char;\n\t\t\t}\n\n\t\t\tconst indentString = this.program.magicString.getIndentString();\n\n\t\t\t// account for dedented class constructors\n\t\t\tlet parent = this.parent;\n\t\t\twhile ( parent ) {\n\t\t\t\tif ( parent.kind === 'constructor' && !parent.parent.parent.superClass ) {\n\t\t\t\t\tthis.indentation = this.indentation.replace( indentString, '' );\n\t\t\t\t}\n\n\t\t\t\tparent = parent.parent;\n\t\t\t}\n\n\t\t\tif ( useOuter ) this.indentation += indentString;\n\t\t}\n\n\t\treturn this.indentation;\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tconst indentation = this.getIndentation();\n\n\t\tlet introStatementGenerators = [];\n\n\t\tif ( this.argumentsAlias ) {\n\t\t\tintroStatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\tconst assignment = `${prefix}var ${this.argumentsAlias} = arguments${suffix}`;\n\t\t\t\tcode.insertLeft( start, assignment );\n\t\t\t});\n\t\t}\n\n\t\tif ( this.thisAlias ) {\n\t\t\tintroStatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\tconst assignment = `${prefix}var ${this.thisAlias} = this${suffix}`;\n\t\t\t\tcode.insertLeft( start, assignment );\n\t\t\t});\n\t\t}\n\n\t\tif ( this.argumentsArrayAlias ) {\n\t\t\tintroStatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\tconst i = this.scope.createIdentifier( 'i' );\n\t\t\t\tconst assignment = `${prefix}var ${i} = arguments.length, ${this.argumentsArrayAlias} = Array(${i});\\n${indentation}while ( ${i}-- ) ${this.argumentsArrayAlias}[${i}] = arguments[${i}]${suffix}`;\n\t\t\t\tcode.insertLeft( start, assignment );\n\t\t\t});\n\t\t}\n\n\t\tif ( /Function/.test( this.parent.type ) ) {\n\t\t\tthis.transpileParameters( code, transforms, indentation, introStatementGenerators );\n\t\t}\n\n\t\tif ( transforms.letConst && this.isFunctionBlock ) {\n\t\t\tthis.transpileBlockScopedIdentifiers( code );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\n\t\tif ( this.synthetic ) {\n\t\t\tif ( this.parent.type === 'ArrowFunctionExpression' ) {\n\t\t\t\tconst expr = this.body[0];\n\n\t\t\t\tif ( introStatementGenerators.length ) {\n\t\t\t\t\tcode.insertLeft( this.start, `{` ).insertRight( this.end, `${this.parent.getIndentation()}}` );\n\n\t\t\t\t\tcode.insertRight( expr.start, `\\n${indentation}return ` );\n\t\t\t\t\tcode.insertLeft( expr.end, `;\\n` );\n\t\t\t\t} else if ( transforms.arrow ) {\n\t\t\t\t\tcode.insertLeft( expr.start, `{ return ` );\n\t\t\t\t\tcode.insertLeft( expr.end, `; }` );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if ( introStatementGenerators.length ) {\n\t\t\t\tcode.insertLeft( this.start, `{` ).insertRight( this.end, `}` );\n\t\t\t}\n\t\t}\n\n\t\tlet start;\n\t\tif ( isUseStrict( this.body[0] ) ) {\n\t\t\tstart = this.body[0].end;\n\t\t} else if ( this.synthetic || this.parent.type === 'Root' ) {\n\t\t\tstart = this.start;\n\t\t} else {\n\t\t\tstart = this.start + 1;\n\t\t}\n\n\t\tlet prefix = `\\n${indentation}`;\n\t\tlet suffix = ';';\n\t\tintroStatementGenerators.forEach( ( fn, i ) => {\n\t\t\tif ( i === introStatementGenerators.length - 1 ) suffix = `;\\n`;\n\t\t\tfn( start, prefix, suffix );\n\t\t});\n\t}\n\n\ttranspileParameters ( code, transforms, indentation, introStatementGenerators ) {\n\t\tconst params = this.parent.params;\n\n\t\tparams.forEach( param => {\n\t\t\tif ( param.type === 'AssignmentPattern' && param.left.type === 'Identifier' ) {\n\t\t\t\tif ( transforms.defaultParameter ) {\n\t\t\t\t\tintroStatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\t\t\tconst lhs = `${prefix}if ( ${param.left.name} === void 0 ) ${param.left.name}`;\n\n\t\t\t\t\t\tcode\n\t\t\t\t\t\t\t.insertRight( param.left.end, lhs )\n\t\t\t\t\t\t\t.move( param.left.end, param.right.end, start )\n\t\t\t\t\t\t\t.insertLeft( param.right.end, suffix );\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if ( param.type === 'RestElement' ) {\n\t\t\t\tif ( transforms.spreadRest ) {\n\t\t\t\t\tintroStatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\t\t\tconst penultimateParam = params[ params.length - 2 ];\n\n\t\t\t\t\t\tif ( penultimateParam ) {\n\t\t\t\t\t\t\tcode.remove( penultimateParam ? penultimateParam.end : param.start, param.end );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet start = param.start, end = param.end; // TODO https://gitlab.com/Rich-Harris/buble/issues/8\n\n\t\t\t\t\t\t\twhile ( /\\s/.test( code.original[ start - 1 ] ) ) start -= 1;\n\t\t\t\t\t\t\twhile ( /\\s/.test( code.original[ end ] ) ) end += 1;\n\n\t\t\t\t\t\t\tcode.remove( start, end );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst name = param.argument.name;\n\t\t\t\t\t\tconst len = this.scope.createIdentifier( 'len' );\n\t\t\t\t\t\tconst count = params.length - 1;\n\n\t\t\t\t\t\tif ( count ) {\n\t\t\t\t\t\t\tcode.insertLeft( start, `${prefix}var ${name} = [], ${len} = arguments.length - ${count};\\n${indentation}while ( ${len}-- > 0 ) ${name}[ ${len} ] = arguments[ ${len} + ${count} ]${suffix}` );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcode.insertLeft( start, `${prefix}var ${name} = [], ${len} = arguments.length;\\n${indentation}while ( ${len}-- ) ${name}[ ${len} ] = arguments[ ${len} ]${suffix}` );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if ( param.type !== 'Identifier' ) {\n\t\t\t\tif ( transforms.parameterDestructuring ) {\n\t\t\t\t\tconst ref = this.scope.createIdentifier( 'ref' );\n\t\t\t\t\tdestructure( code, this.scope, param, ref, false, introStatementGenerators );\n\t\t\t\t\tcode.insertLeft( param.start, ref );\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\ttranspileBlockScopedIdentifiers ( code ) {\n\t\tObject.keys( this.scope.blockScopedDeclarations ).forEach( name => {\n\t\t\tconst declarations = this.scope.blockScopedDeclarations[ name ];\n\n\t\t\tfor ( let declaration of declarations ) {\n\t\t\t\tlet cont = false; // TODO implement proper continue...\n\n\t\t\t\tif ( declaration.kind === 'for.let' ) {\n\t\t\t\t\t// special case\n\t\t\t\t\tconst forStatement = declaration.node.findNearest( 'ForStatement' );\n\n\t\t\t\t\tif ( forStatement.shouldRewriteAsFunction ) {\n\t\t\t\t\t\tconst outerAlias = this.scope.createIdentifier( name );\n\t\t\t\t\t\tconst innerAlias = forStatement.reassigned[ name ] ?\n\t\t\t\t\t\t\tthis.scope.createIdentifier( name ) :\n\t\t\t\t\t\t\tname;\n\n\t\t\t\t\t\tdeclaration.name = outerAlias;\n\t\t\t\t\t\tcode.overwrite( declaration.node.start, declaration.node.end, outerAlias, true );\n\n\t\t\t\t\t\tforStatement.aliases[ name ] = {\n\t\t\t\t\t\t\touter: outerAlias,\n\t\t\t\t\t\t\tinner: innerAlias\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tfor ( const identifier of declaration.instances ) {\n\t\t\t\t\t\t\tconst alias = forStatement.body.contains( identifier ) ?\n\t\t\t\t\t\t\t\tinnerAlias :\n\t\t\t\t\t\t\t\touterAlias;\n\n\t\t\t\t\t\t\tif ( name !== alias ) {\n\t\t\t\t\t\t\t\tcode.overwrite( identifier.start, identifier.end, alias, true );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcont = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( !cont ) {\n\t\t\t\t\tconst alias = this.scope.createIdentifier( name );\n\n\t\t\t\t\tif ( name !== alias ) {\n\t\t\t\t\t\tdeclaration.name = alias;\n\t\t\t\t\t\tcode.overwrite( declaration.node.start, declaration.node.end, alias, true );\n\n\t\t\t\t\t\tfor ( const identifier of declaration.instances ) {\n\t\t\t\t\t\t\tidentifier.rewritten = true;\n\t\t\t\t\t\t\tcode.overwrite( identifier.start, identifier.end, alias, true );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/BlockStatement.js","import MagicString from 'magic-string';\nimport BlockStatement from './BlockStatement.js';\nimport wrap from './wrap.js';\n\nexport default function Program ( source, ast, transforms, options ) {\n\tthis.type = 'Root';\n\n\t// options\n\tthis.jsx = options.jsx || 'React.createElement';\n\tthis.options = options;\n\n\tthis.source = source;\n\tthis.magicString = new MagicString( source );\n\n\tthis.ast = ast;\n\tthis.depth = 0;\n\n\twrap( this.body = ast, this );\n\tthis.body.__proto__ = BlockStatement.prototype;\n\n\tthis.indentExclusionElements = [];\n\tthis.body.initialise( transforms );\n\n\tthis.indentExclusions = Object.create( null );\n\tfor ( const node of this.indentExclusionElements ) {\n\t\tfor ( let i = node.start; i < node.end; i += 1 ) {\n\t\t\tthis.indentExclusions[ i ] = true;\n\t\t}\n\t}\n\n\tthis.body.transpile( this.magicString, transforms );\n}\n\nProgram.prototype = {\n\texport ( options = {} ) {\n\t\treturn {\n\t\t\tcode: this.magicString.toString(),\n\t\t\tmap: this.magicString.generateMap({\n\t\t\t\tfile: options.file,\n\t\t\t\tsource: options.source,\n\t\t\t\tincludeContent: options.includeContent !== false\n\t\t\t})\n\t\t};\n\t},\n\n\tfindNearest () {\n\t\treturn null;\n\t},\n\n\tfindScope () {\n\t\treturn null;\n\t}\n};\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/Program.js","import MagicString from './MagicString.js';\nimport Bundle from './Bundle.js';\n\nMagicString.Bundle = Bundle;\n\nexport default MagicString;\n\n\n\n// WEBPACK FOOTER //\n// ../src/index.js","module.exports = {\n  quot: '\\u0022',\n  amp: '&',\n  apos: '\\u0027',\n  lt: '<',\n  gt: '>',\n  nbsp: '\\u00A0',\n  iexcl: '\\u00A1',\n  cent: '\\u00A2',\n  pound: '\\u00A3',\n  curren: '\\u00A4',\n  yen: '\\u00A5',\n  brvbar: '\\u00A6',\n  sect: '\\u00A7',\n  uml: '\\u00A8',\n  copy: '\\u00A9',\n  ordf: '\\u00AA',\n  laquo: '\\u00AB',\n  not: '\\u00AC',\n  shy: '\\u00AD',\n  reg: '\\u00AE',\n  macr: '\\u00AF',\n  deg: '\\u00B0',\n  plusmn: '\\u00B1',\n  sup2: '\\u00B2',\n  sup3: '\\u00B3',\n  acute: '\\u00B4',\n  micro: '\\u00B5',\n  para: '\\u00B6',\n  middot: '\\u00B7',\n  cedil: '\\u00B8',\n  sup1: '\\u00B9',\n  ordm: '\\u00BA',\n  raquo: '\\u00BB',\n  frac14: '\\u00BC',\n  frac12: '\\u00BD',\n  frac34: '\\u00BE',\n  iquest: '\\u00BF',\n  Agrave: '\\u00C0',\n  Aacute: '\\u00C1',\n  Acirc: '\\u00C2',\n  Atilde: '\\u00C3',\n  Auml: '\\u00C4',\n  Aring: '\\u00C5',\n  AElig: '\\u00C6',\n  Ccedil: '\\u00C7',\n  Egrave: '\\u00C8',\n  Eacute: '\\u00C9',\n  Ecirc: '\\u00CA',\n  Euml: '\\u00CB',\n  Igrave: '\\u00CC',\n  Iacute: '\\u00CD',\n  Icirc: '\\u00CE',\n  Iuml: '\\u00CF',\n  ETH: '\\u00D0',\n  Ntilde: '\\u00D1',\n  Ograve: '\\u00D2',\n  Oacute: '\\u00D3',\n  Ocirc: '\\u00D4',\n  Otilde: '\\u00D5',\n  Ouml: '\\u00D6',\n  times: '\\u00D7',\n  Oslash: '\\u00D8',\n  Ugrave: '\\u00D9',\n  Uacute: '\\u00DA',\n  Ucirc: '\\u00DB',\n  Uuml: '\\u00DC',\n  Yacute: '\\u00DD',\n  THORN: '\\u00DE',\n  szlig: '\\u00DF',\n  agrave: '\\u00E0',\n  aacute: '\\u00E1',\n  acirc: '\\u00E2',\n  atilde: '\\u00E3',\n  auml: '\\u00E4',\n  aring: '\\u00E5',\n  aelig: '\\u00E6',\n  ccedil: '\\u00E7',\n  egrave: '\\u00E8',\n  eacute: '\\u00E9',\n  ecirc: '\\u00EA',\n  euml: '\\u00EB',\n  igrave: '\\u00EC',\n  iacute: '\\u00ED',\n  icirc: '\\u00EE',\n  iuml: '\\u00EF',\n  eth: '\\u00F0',\n  ntilde: '\\u00F1',\n  ograve: '\\u00F2',\n  oacute: '\\u00F3',\n  ocirc: '\\u00F4',\n  otilde: '\\u00F5',\n  ouml: '\\u00F6',\n  divide: '\\u00F7',\n  oslash: '\\u00F8',\n  ugrave: '\\u00F9',\n  uacute: '\\u00FA',\n  ucirc: '\\u00FB',\n  uuml: '\\u00FC',\n  yacute: '\\u00FD',\n  thorn: '\\u00FE',\n  yuml: '\\u00FF',\n  OElig: '\\u0152',\n  oelig: '\\u0153',\n  Scaron: '\\u0160',\n  scaron: '\\u0161',\n  Yuml: '\\u0178',\n  fnof: '\\u0192',\n  circ: '\\u02C6',\n  tilde: '\\u02DC',\n  Alpha: '\\u0391',\n  Beta: '\\u0392',\n  Gamma: '\\u0393',\n  Delta: '\\u0394',\n  Epsilon: '\\u0395',\n  Zeta: '\\u0396',\n  Eta: '\\u0397',\n  Theta: '\\u0398',\n  Iota: '\\u0399',\n  Kappa: '\\u039A',\n  Lambda: '\\u039B',\n  Mu: '\\u039C',\n  Nu: '\\u039D',\n  Xi: '\\u039E',\n  Omicron: '\\u039F',\n  Pi: '\\u03A0',\n  Rho: '\\u03A1',\n  Sigma: '\\u03A3',\n  Tau: '\\u03A4',\n  Upsilon: '\\u03A5',\n  Phi: '\\u03A6',\n  Chi: '\\u03A7',\n  Psi: '\\u03A8',\n  Omega: '\\u03A9',\n  alpha: '\\u03B1',\n  beta: '\\u03B2',\n  gamma: '\\u03B3',\n  delta: '\\u03B4',\n  epsilon: '\\u03B5',\n  zeta: '\\u03B6',\n  eta: '\\u03B7',\n  theta: '\\u03B8',\n  iota: '\\u03B9',\n  kappa: '\\u03BA',\n  lambda: '\\u03BB',\n  mu: '\\u03BC',\n  nu: '\\u03BD',\n  xi: '\\u03BE',\n  omicron: '\\u03BF',\n  pi: '\\u03C0',\n  rho: '\\u03C1',\n  sigmaf: '\\u03C2',\n  sigma: '\\u03C3',\n  tau: '\\u03C4',\n  upsilon: '\\u03C5',\n  phi: '\\u03C6',\n  chi: '\\u03C7',\n  psi: '\\u03C8',\n  omega: '\\u03C9',\n  thetasym: '\\u03D1',\n  upsih: '\\u03D2',\n  piv: '\\u03D6',\n  ensp: '\\u2002',\n  emsp: '\\u2003',\n  thinsp: '\\u2009',\n  zwnj: '\\u200C',\n  zwj: '\\u200D',\n  lrm: '\\u200E',\n  rlm: '\\u200F',\n  ndash: '\\u2013',\n  mdash: '\\u2014',\n  lsquo: '\\u2018',\n  rsquo: '\\u2019',\n  sbquo: '\\u201A',\n  ldquo: '\\u201C',\n  rdquo: '\\u201D',\n  bdquo: '\\u201E',\n  dagger: '\\u2020',\n  Dagger: '\\u2021',\n  bull: '\\u2022',\n  hellip: '\\u2026',\n  permil: '\\u2030',\n  prime: '\\u2032',\n  Prime: '\\u2033',\n  lsaquo: '\\u2039',\n  rsaquo: '\\u203A',\n  oline: '\\u203E',\n  frasl: '\\u2044',\n  euro: '\\u20AC',\n  image: '\\u2111',\n  weierp: '\\u2118',\n  real: '\\u211C',\n  trade: '\\u2122',\n  alefsym: '\\u2135',\n  larr: '\\u2190',\n  uarr: '\\u2191',\n  rarr: '\\u2192',\n  darr: '\\u2193',\n  harr: '\\u2194',\n  crarr: '\\u21B5',\n  lArr: '\\u21D0',\n  uArr: '\\u21D1',\n  rArr: '\\u21D2',\n  dArr: '\\u21D3',\n  hArr: '\\u21D4',\n  forall: '\\u2200',\n  part: '\\u2202',\n  exist: '\\u2203',\n  empty: '\\u2205',\n  nabla: '\\u2207',\n  isin: '\\u2208',\n  notin: '\\u2209',\n  ni: '\\u220B',\n  prod: '\\u220F',\n  sum: '\\u2211',\n  minus: '\\u2212',\n  lowast: '\\u2217',\n  radic: '\\u221A',\n  prop: '\\u221D',\n  infin: '\\u221E',\n  ang: '\\u2220',\n  and: '\\u2227',\n  or: '\\u2228',\n  cap: '\\u2229',\n  cup: '\\u222A',\n  'int': '\\u222B',\n  there4: '\\u2234',\n  sim: '\\u223C',\n  cong: '\\u2245',\n  asymp: '\\u2248',\n  ne: '\\u2260',\n  equiv: '\\u2261',\n  le: '\\u2264',\n  ge: '\\u2265',\n  sub: '\\u2282',\n  sup: '\\u2283',\n  nsub: '\\u2284',\n  sube: '\\u2286',\n  supe: '\\u2287',\n  oplus: '\\u2295',\n  otimes: '\\u2297',\n  perp: '\\u22A5',\n  sdot: '\\u22C5',\n  lceil: '\\u2308',\n  rceil: '\\u2309',\n  lfloor: '\\u230A',\n  rfloor: '\\u230B',\n  lang: '\\u2329',\n  rang: '\\u232A',\n  loz: '\\u25CA',\n  spades: '\\u2660',\n  clubs: '\\u2663',\n  hearts: '\\u2665',\n  diams: '\\u2666'\n};\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/acorn-jsx/xhtml.js","'use strict';\n\nvar XHTMLEntities = require('./xhtml');\n\nvar hexNumber = /^[\\da-fA-F]+$/;\nvar decimalNumber = /^\\d+$/;\n\nmodule.exports = function(acorn) {\n  var tt = acorn.tokTypes;\n  var tc = acorn.tokContexts;\n\n  tc.j_oTag = new acorn.TokContext('<tag', false);\n  tc.j_cTag = new acorn.TokContext('</tag', false);\n  tc.j_expr = new acorn.TokContext('<tag>...</tag>', true, true);\n\n  tt.jsxName = new acorn.TokenType('jsxName');\n  tt.jsxText = new acorn.TokenType('jsxText', {beforeExpr: true});\n  tt.jsxTagStart = new acorn.TokenType('jsxTagStart');\n  tt.jsxTagEnd = new acorn.TokenType('jsxTagEnd');\n\n  tt.jsxTagStart.updateContext = function() {\n    this.context.push(tc.j_expr); // treat as beginning of JSX expression\n    this.context.push(tc.j_oTag); // start opening tag context\n    this.exprAllowed = false;\n  };\n  tt.jsxTagEnd.updateContext = function(prevType) {\n    var out = this.context.pop();\n    if (out === tc.j_oTag && prevType === tt.slash || out === tc.j_cTag) {\n      this.context.pop();\n      this.exprAllowed = this.curContext() === tc.j_expr;\n    } else {\n      this.exprAllowed = true;\n    }\n  };\n\n  var pp = acorn.Parser.prototype;\n\n  // Reads inline JSX contents token.\n\n  pp.jsx_readToken = function() {\n    var out = '', chunkStart = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length)\n        this.raise(this.start, 'Unterminated JSX contents');\n      var ch = this.input.charCodeAt(this.pos);\n\n      switch (ch) {\n      case 60: // '<'\n      case 123: // '{'\n        if (this.pos === this.start) {\n          if (ch === 60 && this.exprAllowed) {\n            ++this.pos;\n            return this.finishToken(tt.jsxTagStart);\n          }\n          return this.getTokenFromCode(ch);\n        }\n        out += this.input.slice(chunkStart, this.pos);\n        return this.finishToken(tt.jsxText, out);\n\n      case 38: // '&'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.jsx_readEntity();\n        chunkStart = this.pos;\n        break;\n\n      default:\n        if (acorn.isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readNewLine(true);\n          chunkStart = this.pos;\n        } else {\n          ++this.pos;\n        }\n      }\n    }\n  };\n\n  pp.jsx_readNewLine = function(normalizeCRLF) {\n    var ch = this.input.charCodeAt(this.pos);\n    var out;\n    ++this.pos;\n    if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n      ++this.pos;\n      out = normalizeCRLF ? '\\n' : '\\r\\n';\n    } else {\n      out = String.fromCharCode(ch);\n    }\n    if (this.options.locations) {\n      ++this.curLine;\n      this.lineStart = this.pos;\n    }\n\n    return out;\n  };\n\n  pp.jsx_readString = function(quote) {\n    var out = '', chunkStart = ++this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length)\n        this.raise(this.start, 'Unterminated string constant');\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === quote) break;\n      if (ch === 38) { // '&'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.jsx_readEntity();\n        chunkStart = this.pos;\n      } else if (acorn.isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.jsx_readNewLine(false);\n        chunkStart = this.pos;\n      } else {\n        ++this.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++);\n    return this.finishToken(tt.string, out);\n  };\n\n  pp.jsx_readEntity = function() {\n    var str = '', count = 0, entity;\n    var ch = this.input[this.pos];\n    if (ch !== '&')\n      this.raise(this.pos, 'Entity must start with an ampersand');\n    var startPos = ++this.pos;\n    while (this.pos < this.input.length && count++ < 10) {\n      ch = this.input[this.pos++];\n      if (ch === ';') {\n        if (str[0] === '#') {\n          if (str[1] === 'x') {\n            str = str.substr(2);\n            if (hexNumber.test(str))\n              entity = String.fromCharCode(parseInt(str, 16));\n          } else {\n            str = str.substr(1);\n            if (decimalNumber.test(str))\n              entity = String.fromCharCode(parseInt(str, 10));\n          }\n        } else {\n          entity = XHTMLEntities[str];\n        }\n        break;\n      }\n      str += ch;\n    }\n    if (!entity) {\n      this.pos = startPos;\n      return '&';\n    }\n    return entity;\n  };\n\n\n  // Read a JSX identifier (valid tag or attribute name).\n  //\n  // Optimized version since JSX identifiers can't contain\n  // escape characters and so can be read as single slice.\n  // Also assumes that first character was already checked\n  // by isIdentifierStart in readToken.\n\n  pp.jsx_readWord = function() {\n    var ch, start = this.pos;\n    do {\n      ch = this.input.charCodeAt(++this.pos);\n    } while (acorn.isIdentifierChar(ch) || ch === 45); // '-'\n    return this.finishToken(tt.jsxName, this.input.slice(start, this.pos));\n  };\n\n  // Transforms JSX element name to string.\n\n  function getQualifiedJSXName(object) {\n    if (object.type === 'JSXIdentifier')\n      return object.name;\n\n    if (object.type === 'JSXNamespacedName')\n      return object.namespace.name + ':' + object.name.name;\n\n    if (object.type === 'JSXMemberExpression')\n      return getQualifiedJSXName(object.object) + '.' +\n      getQualifiedJSXName(object.property);\n  }\n\n  // Parse next token as JSX identifier\n\n  pp.jsx_parseIdentifier = function() {\n    var node = this.startNode();\n    if (this.type === tt.jsxName)\n      node.name = this.value;\n    else if (this.type.keyword)\n      node.name = this.type.keyword;\n    else\n      this.unexpected();\n    this.next();\n    return this.finishNode(node, 'JSXIdentifier');\n  };\n\n  // Parse namespaced identifier.\n\n  pp.jsx_parseNamespacedName = function() {\n    var startPos = this.start, startLoc = this.startLoc;\n    var name = this.jsx_parseIdentifier();\n    if (!this.options.plugins.jsx.allowNamespaces || !this.eat(tt.colon)) return name;\n    var node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsx_parseIdentifier();\n    return this.finishNode(node, 'JSXNamespacedName');\n  };\n\n  // Parses element name in any form - namespaced, member\n  // or single identifier.\n\n  pp.jsx_parseElementName = function() {\n    var startPos = this.start, startLoc = this.startLoc;\n    var node = this.jsx_parseNamespacedName();\n    if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !this.options.plugins.jsx.allowNamespacedObjects) {\n      this.unexpected();\n    }\n    while (this.eat(tt.dot)) {\n      var newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsx_parseIdentifier();\n      node = this.finishNode(newNode, 'JSXMemberExpression');\n    }\n    return node;\n  };\n\n  // Parses any type of JSX attribute value.\n\n  pp.jsx_parseAttributeValue = function() {\n    switch (this.type) {\n    case tt.braceL:\n      var node = this.jsx_parseExpressionContainer();\n      if (node.expression.type === 'JSXEmptyExpression')\n        this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');\n      return node;\n\n    case tt.jsxTagStart:\n    case tt.string:\n      return this.parseExprAtom();\n\n    default:\n      this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');\n    }\n  };\n\n  // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n  // and so it should start at the end of last read token (left brace) and finish\n  // at the beginning of the next one (right brace).\n\n  pp.jsx_parseEmptyExpression = function() {\n    var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n    return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);\n  };\n\n  // Parses JSX expression enclosed into curly brackets.\n\n\n  pp.jsx_parseExpressionContainer = function() {\n    var node = this.startNode();\n    this.next();\n    node.expression = this.type === tt.braceR\n      ? this.jsx_parseEmptyExpression()\n      : this.parseExpression();\n    this.expect(tt.braceR);\n    return this.finishNode(node, 'JSXExpressionContainer');\n  };\n\n  // Parses following JSX attribute name-value pair.\n\n  pp.jsx_parseAttribute = function() {\n    var node = this.startNode();\n    if (this.eat(tt.braceL)) {\n      this.expect(tt.ellipsis);\n      node.argument = this.parseMaybeAssign();\n      this.expect(tt.braceR);\n      return this.finishNode(node, 'JSXSpreadAttribute');\n    }\n    node.name = this.jsx_parseNamespacedName();\n    node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n    return this.finishNode(node, 'JSXAttribute');\n  };\n\n  // Parses JSX opening tag starting after '<'.\n\n  pp.jsx_parseOpeningElementAt = function(startPos, startLoc) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.attributes = [];\n    node.name = this.jsx_parseElementName();\n    while (this.type !== tt.slash && this.type !== tt.jsxTagEnd)\n      node.attributes.push(this.jsx_parseAttribute());\n    node.selfClosing = this.eat(tt.slash);\n    this.expect(tt.jsxTagEnd);\n    return this.finishNode(node, 'JSXOpeningElement');\n  };\n\n  // Parses JSX closing tag starting after '</'.\n\n  pp.jsx_parseClosingElementAt = function(startPos, startLoc) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.name = this.jsx_parseElementName();\n    this.expect(tt.jsxTagEnd);\n    return this.finishNode(node, 'JSXClosingElement');\n  };\n\n  // Parses entire JSX element, including it's opening tag\n  // (starting after '<'), attributes, contents and closing tag.\n\n  pp.jsx_parseElementAt = function(startPos, startLoc) {\n    var node = this.startNodeAt(startPos, startLoc);\n    var children = [];\n    var openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n    var closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.type) {\n        case tt.jsxTagStart:\n          startPos = this.start; startLoc = this.startLoc;\n          this.next();\n          if (this.eat(tt.slash)) {\n            closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n            break contents;\n          }\n          children.push(this.jsx_parseElementAt(startPos, startLoc));\n          break;\n\n        case tt.jsxText:\n          children.push(this.parseExprAtom());\n          break;\n\n        case tt.braceL:\n          children.push(this.jsx_parseExpressionContainer());\n          break;\n\n        default:\n          this.unexpected();\n        }\n      }\n      if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n        this.raise(\n          closingElement.start,\n          'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');\n      }\n    }\n\n    node.openingElement = openingElement;\n    node.closingElement = closingElement;\n    node.children = children;\n    if (this.type === tt.relational && this.value === \"<\") {\n      this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n    }\n    return this.finishNode(node, 'JSXElement');\n  };\n\n  // Parses entire JSX element from current position.\n\n  pp.jsx_parseElement = function() {\n    var startPos = this.start, startLoc = this.startLoc;\n    this.next();\n    return this.jsx_parseElementAt(startPos, startLoc);\n  };\n\n  acorn.plugins.jsx = function(instance, opts) {\n    if (!opts) {\n      return;\n    }\n\n    if (typeof opts !== 'object') {\n      opts = {};\n    }\n\n    instance.options.plugins.jsx = {\n      allowNamespaces: opts.allowNamespaces !== false,\n      allowNamespacedObjects: !!opts.allowNamespacedObjects\n    };\n\n    instance.extend('parseExprAtom', function(inner) {\n      return function(refShortHandDefaultPos) {\n        if (this.type === tt.jsxText)\n          return this.parseLiteral(this.value);\n        else if (this.type === tt.jsxTagStart)\n          return this.jsx_parseElement();\n        else\n          return inner.call(this, refShortHandDefaultPos);\n      };\n    });\n\n    instance.extend('readToken', function(inner) {\n      return function(code) {\n        var context = this.curContext();\n\n        if (context === tc.j_expr) return this.jsx_readToken();\n\n        if (context === tc.j_oTag || context === tc.j_cTag) {\n          if (acorn.isIdentifierStart(code)) return this.jsx_readWord();\n\n          if (code == 62) {\n            ++this.pos;\n            return this.finishToken(tt.jsxTagEnd);\n          }\n\n          if ((code === 34 || code === 39) && context == tc.j_oTag)\n            return this.jsx_readString(code);\n        }\n\n        if (code === 60 && this.exprAllowed) {\n          ++this.pos;\n          return this.finishToken(tt.jsxTagStart);\n        }\n        return inner.call(this, code);\n      };\n    });\n\n    instance.extend('updateContext', function(inner) {\n      return function(prevType) {\n        if (this.type == tt.braceL) {\n          var curContext = this.curContext();\n          if (curContext == tc.j_oTag) this.context.push(tc.b_expr);\n          else if (curContext == tc.j_expr) this.context.push(tc.b_tmpl);\n          else inner.call(this, prevType);\n          this.exprAllowed = true;\n        } else if (this.type === tt.slash && prevType === tt.jsxTagStart) {\n          this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n          this.context.push(tc.j_cTag); // reconsider as closing tag context\n          this.exprAllowed = false;\n        } else {\n          return inner.call(this, prevType);\n        }\n      };\n    });\n  };\n\n  return acorn;\n};\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/acorn-jsx/inject.js","'use strict';\n\nmodule.exports = function(acorn) {\n  var tt = acorn.tokTypes;\n  var pp = acorn.Parser.prototype;\n\n  // this is the same parseObj that acorn has with...\n  function parseObj(isPattern, refDestructuringErrors) {\n    let node = this.startNode(), first = true, propHash = {}\n    node.properties = []\n    this.next()\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this.expect(tt.comma)\n        if (this.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      let prop = this.startNode(), isGenerator, startPos, startLoc\n      if (this.options.ecmaVersion >= 6) {\n        // ...the spread logic borrowed from babylon :)\n        if (this.type === tt.ellipsis) {\n          prop = this.parseSpread()\n          prop.type = isPattern ? \"RestProperty\" : \"SpreadProperty\"\n          node.properties.push(prop)\n          continue\n        }\n\n        prop.method = false\n        prop.shorthand = false\n        if (isPattern || refDestructuringErrors) {\n          startPos = this.start\n          startLoc = this.startLoc\n        }\n        if (!isPattern)\n          isGenerator = this.eat(tt.star)\n      }\n      this.parsePropertyName(prop)\n      this.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors)\n      this.checkPropClash(prop, propHash)\n      node.properties.push(this.finishNode(prop, \"Property\"))\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n  }\n\n  acorn.plugins.objectSpread = function objectSpreadPlugin(instance) {\n    pp.parseObj = parseObj;\n  };\n\n  return acorn;\n};\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/acorn-object-spread/inject.js","export default {\n\tProgram: [ 'body' ],\n\tLiteral: []\n};\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/keys.js","import Node from '../Node.js';\nimport spread, { isArguments } from '../../utils/spread.js';\n\nexport default class ArrayExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.spreadRest && this.elements.length ) {\n\t\t\tconst lexicalBoundary = this.findLexicalBoundary();\n\n\t\t\tlet i = this.elements.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tconst element = this.elements[i];\n\t\t\t\tif ( element && element.type === 'SpreadElement' && isArguments( element.argument ) ) {\n\t\t\t\t\tthis.argumentsArrayAlias = lexicalBoundary.getArgumentsArrayAlias();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.spreadRest ) {\n\t\t\t// erase trailing comma after last array element if not an array hole\n\t\t\tif ( this.elements.length ) {\n\t\t\t\tlet lastElement = this.elements[ this.elements.length - 1 ];\n\t\t\t\tif ( lastElement && /\\s*,/.test( code.original.slice( lastElement.end, this.end ) ) ) {\n\t\t\t\t\tcode.overwrite( lastElement.end, this.end - 1, ' ' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( this.elements.length === 1 ) {\n\t\t\t\tconst element = this.elements[0];\n\n\t\t\t\tif ( element && element.type === 'SpreadElement' ) {\n\t\t\t\t\t// special case – [ ...arguments ]\n\t\t\t\t\tif ( isArguments( element.argument ) ) {\n\t\t\t\t\t\tcode.overwrite( this.start, this.end, `[].concat( ${this.argumentsArrayAlias} )` ); // TODO if this is the only use of argsArray, don't bother concating\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcode.overwrite( this.start, element.argument.start, '[].concat( ' );\n\t\t\t\t\t\tcode.overwrite( element.end, this.end, ' )' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst hasSpreadElements = spread( code, this.elements, this.start, this.argumentsArrayAlias );\n\n\t\t\t\tif ( hasSpreadElements ) {\n\t\t\t\t\tcode.overwrite( this.end - 1, this.end, ')' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ArrayExpression.js","import Node from '../Node.js';\n\nexport default class ArrowFunctionExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tthis.body.createScope();\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.arrow ) {\n\t\t\t// remove arrow\n\t\t\tlet charIndex = this.body.start;\n\t\t\twhile ( code.original[ charIndex ] !== '=' ) {\n\t\t\t\tcharIndex -= 1;\n\t\t\t}\n\t\t\tcode.remove( charIndex, this.body.start );\n\n\t\t\t// wrap naked parameter\n\t\t\tif ( this.params.length === 1 && this.start === this.params[0].start ) {\n\t\t\t\tcode.insertRight( this.params[0].start, '(' );\n\t\t\t\tcode.insertLeft( this.params[0].end, ')' );\n\t\t\t}\n\n\t\t\t// add function\n\t\t\tif ( this.parent && this.parent.type === 'ExpressionStatement' ) {\n\t\t\t\t// standalone expression statement\n\t\t\t\tcode.insertRight( this.start, '(function' );\n\t\t\t\tcode.insertRight( this.end, ')' );\n\t\t\t} else {\n\t\t\t\tcode.insertRight( this.start, 'function ' );\n\t\t\t}\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ArrowFunctionExpression.js","import locate from './locate.js';\nimport getSnippet from './getSnippet.js';\n\nexport default class CompileError extends Error {\n\tconstructor ( node, message ) {\n\t\tsuper();\n\n\t\tconst source = node.program.magicString.original;\n\t\tconst loc = locate( source, node.start );\n\n\t\tthis.name = 'CompileError';\n\t\tthis.message = message + ` (${loc.line}:${loc.column})`;\n\n\t\tthis.stack = new Error().stack.replace( new RegExp( `.+new ${this.name}.+\\\\n`, 'm' ), '' );\n\n\t\tthis.loc = loc;\n\t\tthis.snippet = getSnippet( source, loc, node.end - node.start );\n\t}\n\n\ttoString () {\n\t\treturn `${this.name}: ${this.message}\\n${this.snippet}`;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/CompileError.js","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class AssignmentExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( this.left.type === 'Identifier' ) {\n\t\t\tconst declaration = this.findScope( false ).findDeclaration( this.left.name );\n\t\t\tif ( declaration && declaration.kind === 'const' ) {\n\t\t\t\tthrow new CompileError( this.left, `${this.left.name} is read-only` );\n\t\t\t}\n\n\t\t\t// special case – https://gitlab.com/Rich-Harris/buble/issues/11\n\t\t\tconst statement = declaration && declaration.node.ancestor( 3 );\n\t\t\tif ( statement && statement.type === 'ForStatement' && statement.body.contains( this ) ) {\n\t\t\t\tstatement.reassigned[ this.left.name ] = true;\n\t\t\t}\n\t\t}\n\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( this.operator === '**=' && transforms.exponentiation ) {\n\t\t\tthis.transpileExponentiation( code, transforms );\n\t\t}\n\n\t\telse if ( /Pattern/.test( this.left.type ) && transforms.destructuring ) {\n\t\t\tthis.transpileDestructuring( code, transforms );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n\n\ttranspileDestructuring ( code ) {\n\t\tconst scope = this.findScope( true );\n\t\tconst assign = scope.createIdentifier( 'assign' );\n\t\tconst temporaries = [ assign ];\n\n\t\tconst start = this.start;\n\n\t\t// We need to pick out some elements from the original code,\n\t\t// interleaved with generated code. These helpers are used to\n\t\t// easily do that while keeping the order of the output\n\t\t// predictable.\n\t\tlet text = '';\n\t\tfunction use ( node ) {\n\t\t\tcode.insertRight( node.start, text );\n\t\t\tcode.move( node.start, node.end, start );\n\t\t\ttext = '';\n\t\t}\n\t\tfunction write ( string ) {\n\t\t\ttext += string;\n\t\t}\n\n\t\twrite( `(${assign} = ` );\n\t\tuse( this.right );\n\n\t\t// Walk `pattern`, generating code that assigns the value in\n\t\t// `ref` to it. When `mayDuplicate` is false, the function\n\t\t// must take care to only output `ref` once.\n\t\tfunction destructure ( pattern, ref, mayDuplicate ) {\n\t\t\tif ( pattern.type === 'Identifier' || pattern.type === 'MemberExpression' ) {\n\t\t\t\twrite( ', ' );\n\t\t\t\tuse( pattern );\n\t\t\t\twrite( ` = ${ref}` );\n\t\t\t}\n\n\t\t\telse if ( pattern.type === 'AssignmentPattern' ) {\n\t\t\t\tif ( pattern.left.type === 'Identifier' ) {\n\t\t\t\t\tconst target = pattern.left.name;\n\t\t\t\t\tlet source = ref;\n\t\t\t\t\tif ( !mayDuplicate ) {\n\t\t\t\t\t\twrite( `, ${target} = ${ref}` );\n\t\t\t\t\t\tsource = target;\n\t\t\t\t\t}\n\t\t\t\t\twrite( `, ${target} = ${source} === void 0 ? ` );\n\t\t\t\t\tuse( pattern.right );\n\t\t\t\t\twrite( ` : ${source}` );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst target = scope.createIdentifier( 'temp' );\n\t\t\t\t\tlet source = ref;\n\t\t\t\t\ttemporaries.push( target );\n\t\t\t\t\tif ( !mayDuplicate ) {\n\t\t\t\t\t\twrite( `, ${target} = ${ref}` );\n\t\t\t\t\t\tsource = target;\n\t\t\t\t\t}\n\t\t\t\t\twrite( `, ${target} = ${source} === void 0 ? ` );\n\t\t\t\t\tuse( pattern.right );\n\t\t\t\t\twrite( ` : ${source}` );\n\t\t\t\t\tdestructure( pattern.left, target, true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if ( pattern.type === 'ArrayPattern' ) {\n\t\t\t\tconst elements = pattern.elements;\n\t\t\t\tif ( elements.length === 1 ) {\n\t\t\t\t\tdestructure( elements[0], `${ref}[0]`, false );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ( !mayDuplicate ) {\n\t\t\t\t\t\tconst temp = scope.createIdentifier( 'array' );\n\t\t\t\t\t\ttemporaries.push( temp );\n\t\t\t\t\t\twrite( `, ${temp} = ${ref}` );\n\t\t\t\t\t\tref = temp;\n\t\t\t\t\t}\n\t\t\t\t\telements.forEach( ( element, i ) => {\n\t\t\t\t\t\tif ( element ) {\n\t\t\t\t\t\t\tif ( element.type === 'RestElement' ) {\n\t\t\t\t\t\t\t\tdestructure( element.argument, `${ref}.slice(${i})`, false );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdestructure( element, `${ref}[${i}]`, false );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if ( pattern.type === 'ObjectPattern' ) {\n\t\t\t\tconst props = pattern.properties;\n\t\t\t\tif ( props.length == 1 ) {\n\t\t\t\t\tconst prop = props[0];\n\t\t\t\t\tconst value = prop.computed || prop.key.type !== 'Identifier' ? `${ref}[${code.slice(prop.key.start, prop.key.end)}]` : `${ref}.${prop.key.name}`;\n\t\t\t\t\tdestructure( prop.value, value, false );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ( !mayDuplicate ) {\n\t\t\t\t\t\tconst temp = scope.createIdentifier( 'obj' );\n\t\t\t\t\t\ttemporaries.push( temp );\n\t\t\t\t\t\twrite( `, ${temp} = ${ref}` );\n\t\t\t\t\t\tref = temp;\n\t\t\t\t\t}\n\t\t\t\t\tprops.forEach( prop => {\n\t\t\t\t\t\tconst value = prop.computed || prop.key.type !== 'Identifier' ? `${ref}[${code.slice(prop.key.start, prop.key.end)}]` : `${ref}.${prop.key.name}`;\n\t\t\t\t\t\tdestructure( prop.value, value, false );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tthrow new Error( `Unexpected node type in destructuring assignment (${pattern.type})` );\n\t\t\t}\n\t\t}\n\t\tdestructure( this.left, assign, true );\n\n\t\tif ( this.unparenthesizedParent().type === 'ExpressionStatement' ) {\n\t\t\t// no rvalue needed for expression statement\n\t\t\tcode.insertRight( start, `${text})` );\n\t\t} else {\n\t\t\t// destructuring is part of an expression - need an rvalue\n\t\t\tcode.insertRight( start, `${text}, ${assign})` );\n\t\t}\n\n\t\tcode.remove( start, this.right.start );\n\n\t\tconst statement = this.findNearest( /(?:Statement|Declaration)$/ );\n\t\tcode.insertLeft( statement.start, `var ${temporaries.join( ', ' )};\\n${statement.getIndentation()}` );\n\t}\n\n\ttranspileExponentiation ( code ) {\n\t\tconst scope = this.findScope( false );\n\t\tconst getAlias = name => {\n\t\t\tconst declaration = scope.findDeclaration( name );\n\t\t\treturn declaration ? declaration.name : name;\n\t\t};\n\n\t\t// first, the easy part – `**=` -> `=`\n\t\tlet charIndex = this.left.end;\n\t\twhile ( code.original[ charIndex ] !== '*' ) charIndex += 1;\n\t\tcode.remove( charIndex, charIndex + 2 );\n\n\t\t// how we do the next part depends on a number of factors – whether\n\t\t// this is a top-level statement, and whether we're updating a\n\t\t// simple or complex reference\n\t\tlet base;\n\n\t\tconst left = this.left.unparenthesize();\n\n\t\tif ( left.type === 'Identifier' ) {\n\t\t\tbase = getAlias( left.name );\n\t\t} else if ( left.type === 'MemberExpression' ) {\n\t\t\tlet object;\n\t\t\tlet needsObjectVar = false;\n\t\t\tlet property;\n\t\t\tlet needsPropertyVar = false;\n\n\t\t\tconst statement = this.findNearest( /(?:Statement|Declaration)$/ );\n\t\t\tconst i0 = statement.getIndentation();\n\n\t\t\tif ( left.property.type === 'Identifier' ) {\n\t\t\t\tproperty = left.computed ? getAlias( left.property.name ) : left.property.name;\n\t\t\t} else {\n\t\t\t\tproperty = scope.createIdentifier( 'property' );\n\t\t\t\tneedsPropertyVar = true;\n\t\t\t}\n\n\t\t\tif ( left.object.type === 'Identifier' ) {\n\t\t\t\tobject = getAlias( left.object.name );\n\t\t\t} else {\n\t\t\t\tobject = scope.createIdentifier( 'object' );\n\t\t\t\tneedsObjectVar = true;\n\t\t\t}\n\n\t\t\tif ( left.start === statement.start ) {\n\t\t\t\tif ( needsObjectVar && needsPropertyVar ) {\n\t\t\t\t\tcode.insertRight( statement.start, `var ${object} = ` );\n\t\t\t\t\tcode.overwrite( left.object.end, left.property.start, `;\\n${i0}var ${property} = ` );\n\t\t\t\t\tcode.overwrite( left.property.end, left.end, `;\\n${i0}${object}[${property}]` );\n\t\t\t\t}\n\n\t\t\t\telse if ( needsObjectVar ) {\n\t\t\t\t\tcode.insertRight( statement.start, `var ${object} = ` );\n\t\t\t\t\tcode.insertLeft( left.object.end, `;\\n${i0}` );\n\t\t\t\t\tcode.insertLeft( left.object.end, object );\n\t\t\t\t}\n\n\t\t\t\telse if ( needsPropertyVar ) {\n\t\t\t\t\tcode.insertRight( left.property.start, `var ${property} = ` );\n\t\t\t\t\tcode.insertLeft( left.property.end, `;\\n${i0}` );\n\t\t\t\t\tcode.move( left.property.start, left.property.end, this.start );\n\n\t\t\t\t\tcode.insertLeft( left.object.end, `[${property}]` );\n\t\t\t\t\tcode.remove( left.object.end, left.property.start );\n\t\t\t\t\tcode.remove( left.property.end, left.end );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tlet declarators = [];\n\t\t\t\tif ( needsObjectVar ) declarators.push( object );\n\t\t\t\tif ( needsPropertyVar ) declarators.push( property );\n\n\t\t\t\tif ( declarators.length ) {\n\t\t\t\t\tcode.insertRight( statement.start, `var ${declarators.join( ', ' )};\\n${i0}` );\n\t\t\t\t}\n\n\t\t\t\tif ( needsObjectVar && needsPropertyVar ) {\n\t\t\t\t\tcode.insertRight( left.start, `( ${object} = ` );\n\t\t\t\t\tcode.overwrite( left.object.end, left.property.start, `, ${property} = ` );\n\t\t\t\t\tcode.overwrite( left.property.end, left.end, `, ${object}[${property}]` );\n\t\t\t\t}\n\n\t\t\t\telse if ( needsObjectVar ) {\n\t\t\t\t\tcode.insertRight( left.start, `( ${object} = ` );\n\t\t\t\t\tcode.insertLeft( left.object.end, `, ${object}` );\n\t\t\t\t}\n\n\t\t\t\telse if ( needsPropertyVar ) {\n\t\t\t\t\tcode.insertRight( left.property.start, `( ${property} = ` );\n\t\t\t\t\tcode.insertLeft( left.property.end, `, ` );\n\t\t\t\t\tcode.move( left.property.start, left.property.end, left.start );\n\n\t\t\t\t\tcode.overwrite( left.object.end, left.property.start, `[${property}]` );\n\t\t\t\t\tcode.remove( left.property.end, left.end );\n\t\t\t\t}\n\n\t\t\t\tif ( needsPropertyVar ) {\n\t\t\t\t\tcode.insertLeft( this.end, ` )` );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbase = object + ( left.computed || needsPropertyVar ? `[${property}]` : `.${property}` );\n\t\t}\n\n\t\tcode.insertRight( this.right.start, `Math.pow( ${base}, ` );\n\t\tcode.insertLeft( this.right.end, ` )` );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/AssignmentExpression.js","import Node from '../Node.js';\n\nexport default class BinaryExpression extends Node {\n\ttranspile ( code, transforms ) {\n\t\tif ( this.operator === '**' && transforms.exponentiation ) {\n\t\t\tcode.insertRight( this.start, `Math.pow( ` );\n\t\t\tcode.overwrite( this.left.end, this.right.start, `, ` );\n\t\t\tcode.insertLeft( this.end, ` )` );\n\t\t}\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/BinaryExpression.js","export const loopStatement = /(?:For(?:In|Of)?|While)Statement/;\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/patterns.js","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\nimport { loopStatement } from '../../utils/patterns.js';\n\nexport default class BreakStatement extends Node {\n\tinitialise () {\n\t\tconst loop = this.findNearest( loopStatement );\n\t\tconst switchCase = this.findNearest( 'SwitchCase' );\n\n\t\tif ( loop && ( !switchCase || loop.depth > switchCase.depth ) ) {\n\t\t\tloop.canBreak = true;\n\t\t\tthis.loop = loop;\n\t\t}\n\t}\n\n\ttranspile ( code ) {\n\t\tif ( this.loop && this.loop.shouldRewriteAsFunction ) {\n\t\t\tif ( this.label ) throw new CompileError( this, 'Labels are not currently supported in a loop with locally-scoped variables' );\n\t\t\tcode.overwrite( this.start, this.start + 5, `return 'break'` );\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/BreakStatement.js","import Node from '../Node.js';\nimport spread, { isArguments } from '../../utils/spread.js';\n\nexport default class CallExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.spreadRest && this.arguments.length > 1 ) {\n\t\t\tconst lexicalBoundary = this.findLexicalBoundary();\n\n\t\t\tlet i = this.arguments.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tconst arg = this.arguments[i];\n\t\t\t\tif ( arg.type === 'SpreadElement' && isArguments( arg.argument ) ) {\n\t\t\t\t\tthis.argumentsArrayAlias = lexicalBoundary.getArgumentsArrayAlias();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.spreadRest && this.arguments.length ) {\n\t\t\tlet hasSpreadElements = false;\n\t\t\tlet context;\n\n\t\t\tconst firstArgument = this.arguments[0];\n\n\t\t\tif ( this.arguments.length === 1 ) {\n\t\t\t\tif ( firstArgument.type === 'SpreadElement' ) {\n\t\t\t\t\tcode.remove( firstArgument.start, firstArgument.argument.start );\n\t\t\t\t\thasSpreadElements = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thasSpreadElements = spread( code, this.arguments, firstArgument.start, this.argumentsArrayAlias );\n\t\t\t}\n\n\t\t\tif ( hasSpreadElements ) {\n\n\t\t\t\t// we need to handle super() and super.method() differently\n\t\t\t\t// due to its instance\n\t\t\t\tlet _super = null;\n\t\t\t\tif ( this.callee.type === 'Super' ) {\n\t\t\t\t\t_super = this.callee;\n\t\t\t\t}\n\t\t\t\telse if ( this.callee.type === 'MemberExpression' && this.callee.object.type === 'Super' ) {\n\t\t\t\t\t_super = this.callee.object;\n\t\t\t\t}\n\n\t\t\t\tif ( !_super && this.callee.type === 'MemberExpression' ) {\n\t\t\t\t\tif ( this.callee.object.type === 'Identifier' ) {\n\t\t\t\t\t\tcontext = this.callee.object.name;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext = this.findScope( true ).createIdentifier( 'ref' );\n\t\t\t\t\t\tconst callExpression = this.callee.object;\n\t\t\t\t\t\tconst enclosure = callExpression.findNearest( /Function/ );\n\t\t\t\t\t\tconst block = enclosure ? enclosure.body.body\n\t\t\t\t\t\t\t: callExpression.findNearest( /^Program$/ ).body;\n\t\t\t\t\t\tconst lastStatementInBlock = block[ block.length - 1 ];\n\t\t\t\t\t\tconst i0 = lastStatementInBlock.getIndentation();\n\t\t\t\t\t\tcode.insertRight( callExpression.start, `(${context} = ` );\n\t\t\t\t\t\tcode.insertLeft( callExpression.end, `)` );\n\t\t\t\t\t\tcode.insertLeft( lastStatementInBlock.end, `\\n${i0}var ${context};` );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcontext = 'void 0';\n\t\t\t\t}\n\n\t\t\t\tcode.insertLeft( this.callee.end, '.apply' );\n\n\t\t\t\tif ( _super ) {\n\t\t\t\t\t_super.noCall = true; // bit hacky...\n\n\t\t\t\t\tif ( this.arguments.length > 1 ) {\n\t\t\t\t\t\tif ( firstArgument.type !== 'SpreadElement' ) {\n\t\t\t\t\t\t\tcode.insertRight( firstArgument.start, `[ ` );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcode.insertLeft( this.arguments[ this.arguments.length - 1 ].end, ' )' );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\telse if ( this.arguments.length === 1 ) {\n\t\t\t\t\tcode.insertRight( firstArgument.start, `${context}, ` );\n\t\t\t\t} else {\n\t\t\t\t\tif ( firstArgument.type === 'SpreadElement' ) {\n\t\t\t\t\t\tcode.insertLeft( firstArgument.start, `${context}, ` );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcode.insertLeft( firstArgument.start, `${context}, [ ` );\n\t\t\t\t\t}\n\n\t\t\t\t\tcode.insertLeft( this.arguments[ this.arguments.length - 1 ].end, ' )' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/CallExpression.js","let reserved = Object.create( null );\n'do if in for let new try var case else enum eval null this true void with await break catch class const false super throw while yield delete export import public return static switch typeof default extends finally package private continue debugger function arguments interface protected implements instanceof'.split( ' ' )\n\t.forEach( word => reserved[ word ] = true );\n\nexport default reserved;\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/reserved.js","import Node from '../Node.js';\nimport { findIndex } from '../../utils/array.js';\nimport reserved from '../../utils/reserved.js';\n\n// TODO this code is pretty wild, tidy it up\nexport default class ClassBody extends Node {\n\ttranspile ( code, transforms, inFunctionExpression, superName ) {\n\t\tif ( transforms.classes ) {\n\t\t\tconst name = this.parent.name;\n\n\t\t\tconst indentStr = code.getIndentString();\n\t\t\tconst i0 = this.getIndentation() + ( inFunctionExpression ? indentStr : '' );\n\t\t\tconst i1 = i0 + indentStr;\n\n\t\t\tconst constructorIndex = findIndex( this.body, node => node.kind === 'constructor' );\n\t\t\tconst constructor = this.body[ constructorIndex ];\n\n\t\t\tlet introBlock = '';\n\t\t\tlet outroBlock = '';\n\n\t\t\tif ( this.body.length ) {\n\t\t\t\tcode.remove( this.start, this.body[0].start );\n\t\t\t\tcode.remove( this.body[ this.body.length - 1 ].end, this.end );\n\t\t\t} else {\n\t\t\t\tcode.remove( this.start, this.end );\n\t\t\t}\n\n\t\t\tif ( constructor ) {\n\t\t\t\tconstructor.value.body.isConstructorBody = true;\n\n\t\t\t\tconst previousMethod = this.body[ constructorIndex - 1 ];\n\t\t\t\tconst nextMethod = this.body[ constructorIndex + 1 ];\n\n\t\t\t\t// ensure constructor is first\n\t\t\t\tif ( constructorIndex > 0 ) {\n\t\t\t\t\tcode.remove( previousMethod.end, constructor.start );\n\t\t\t\t\tcode.move( constructor.start, nextMethod ? nextMethod.start : this.end - 1, this.body[0].start );\n\t\t\t\t}\n\n\t\t\t\tif ( !inFunctionExpression ) code.insertLeft( constructor.end, ';' );\n\t\t\t}\n\n\t\t\tlet namedFunctions = this.program.options.namedFunctionExpressions !== false;\n\t\t\tlet namedConstructor = namedFunctions || this.parent.superClass || this.parent.type !== 'ClassDeclaration';\n\t\t\tif ( this.parent.superClass ) {\n\t\t\t\tlet inheritanceBlock = `if ( ${superName} ) ${name}.__proto__ = ${superName};\\n${i0}${name}.prototype = Object.create( ${superName} && ${superName}.prototype );\\n${i0}${name}.prototype.constructor = ${name};`;\n\n\t\t\t\tif ( constructor ) {\n\t\t\t\t\tintroBlock += `\\n\\n${i0}` + inheritanceBlock;\n\t\t\t\t} else {\n\t\t\t\t\tconst fn = `function ${name} () {` + ( superName ?\n\t\t\t\t\t\t`\\n${i1}${superName}.apply(this, arguments);\\n${i0}}` :\n\t\t\t\t\t\t`}` ) + ( inFunctionExpression ? '' : ';' ) + ( this.body.length ? `\\n\\n${i0}` : '' );\n\n\t\t\t\t\tinheritanceBlock = fn + inheritanceBlock;\n\t\t\t\t\tintroBlock += inheritanceBlock + `\\n\\n${i0}`;\n\t\t\t\t}\n\t\t\t} else if ( !constructor ) {\n\t\t\t\tlet fn = 'function ' + (namedConstructor ? name + ' ' : '') + '() {}';\n\t\t\t\tif ( this.parent.type === 'ClassDeclaration' ) fn += ';';\n\t\t\t\tif ( this.body.length ) fn += `\\n\\n${i0}`;\n\n\t\t\t\tintroBlock += fn;\n\t\t\t}\n\n\t\t\tconst scope = this.findScope( false );\n\n\t\t\tlet prototypeGettersAndSetters = [];\n\t\t\tlet staticGettersAndSetters = [];\n\t\t\tlet prototypeAccessors;\n\t\t\tlet staticAccessors;\n\n\t\t\tthis.body.forEach( ( method, i ) => {\n\t\t\t\tif ( method.kind === 'constructor' ) {\n\t\t\t\t\tlet constructorName = namedConstructor ? ' ' + name : '';\n\t\t\t\t\tcode.overwrite( method.key.start, method.key.end, `function${constructorName}` );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( method.static ) {\n\t\t\t\t\tconst len = code.original[ method.start + 6 ] == ' ' ? 7 : 6;\n\t\t\t\t\tcode.remove( method.start, method.start + len );\n\t\t\t\t}\n\n\t\t\t\tconst isAccessor = method.kind !== 'method';\n\t\t\t\tlet lhs;\n\n\t\t\t\tlet methodName = method.key.name;\n\t\t\t\tif ( reserved[ methodName ] || method.value.body.scope.references[methodName] ) {\n\t\t\t\t\tmethodName = scope.createIdentifier( methodName );\n\t\t\t\t}\n\n\t\t\t\t// when method name is a string or a number let's pretend it's a computed method\n\n\t\t\t\tlet fake_computed = false;\n\t\t\t\tif ( ! method.computed && method.key.type === 'Literal' ) {\n\t\t\t\t\tfake_computed = true;\n\t\t\t\t\tmethod.computed = true;\n\t\t\t\t}\n\n\t\t\t\tif ( isAccessor ) {\n\t\t\t\t\tif ( method.computed ) {\n\t\t\t\t\t\tthrow new Error( 'Computed accessor properties are not currently supported' );\n\t\t\t\t\t}\n\n\t\t\t\t\tcode.remove( method.start, method.key.start );\n\n\t\t\t\t\tif ( method.static ) {\n\t\t\t\t\t\tif ( !~staticGettersAndSetters.indexOf( method.key.name ) ) staticGettersAndSetters.push( method.key.name );\n\t\t\t\t\t\tif ( !staticAccessors ) staticAccessors = scope.createIdentifier( 'staticAccessors' );\n\n\t\t\t\t\t\tlhs = `${staticAccessors}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( !~prototypeGettersAndSetters.indexOf( method.key.name ) ) prototypeGettersAndSetters.push( method.key.name );\n\t\t\t\t\t\tif ( !prototypeAccessors ) prototypeAccessors = scope.createIdentifier( 'prototypeAccessors' );\n\n\t\t\t\t\t\tlhs = `${prototypeAccessors}`;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlhs = method.static ?\n\t\t\t\t\t\t`${name}` :\n\t\t\t\t\t\t`${name}.prototype`;\n\t\t\t\t}\n\n\t\t\t\tif ( !method.computed ) lhs += '.';\n\n\t\t\t\tconst insertNewlines = ( constructorIndex > 0 && i === constructorIndex + 1 ) ||\n\t\t\t\t                       ( i === 0 && constructorIndex === this.body.length - 1 );\n\n\t\t\t\tif ( insertNewlines ) lhs = `\\n\\n${i0}${lhs}`;\n\n\t\t\t\tlet c = method.key.end;\n\t\t\t\tif ( method.computed ) {\n\t\t\t\t\tif ( fake_computed ) {\n\t\t\t\t\t\tcode.insertRight( method.key.start, '[' );\n\t\t\t\t\t\tcode.insertLeft( method.key.end, ']' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\twhile ( code.original[c] !== ']' ) c += 1;\n\t\t\t\t\t\tc += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcode.insertRight( method.start, lhs );\n\n\t\t\t\tconst funcName = method.computed || isAccessor || !namedFunctions ? '' : `${methodName} `;\n\t\t\t\tconst rhs = ( isAccessor ? `.${method.kind}` : '' ) + ` = function` + ( method.value.generator ? '* ' : ' ' ) + funcName;\n\t\t\t\tcode.remove( c, method.value.start );\n\t\t\t\tcode.insertRight( method.value.start, rhs );\n\t\t\t\tcode.insertLeft( method.end, ';' );\n\n\t\t\t\tif ( method.value.generator ) code.remove( method.start, method.key.start );\n\t\t\t});\n\n\t\t\tif ( prototypeGettersAndSetters.length || staticGettersAndSetters.length ) {\n\t\t\t\tlet intro = [];\n\t\t\t\tlet outro = [];\n\n\t\t\t\tif ( prototypeGettersAndSetters.length ) {\n\t\t\t\t\tintro.push( `var ${prototypeAccessors} = { ${prototypeGettersAndSetters.map( name => `${name}: {}` ).join( ',' )} };` );\n\t\t\t\t\toutro.push( `Object.defineProperties( ${name}.prototype, ${prototypeAccessors} );` );\n\t\t\t\t}\n\n\t\t\t\tif ( staticGettersAndSetters.length ) {\n\t\t\t\t\tintro.push( `var ${staticAccessors} = { ${staticGettersAndSetters.map( name => `${name}: {}` ).join( ',' )} };` );\n\t\t\t\t\toutro.push( `Object.defineProperties( ${name}, ${staticAccessors} );` );\n\t\t\t\t}\n\n\t\t\t\tif ( constructor ) introBlock += `\\n\\n${i0}`;\n\t\t\t\tintroBlock += intro.join( `\\n${i0}` );\n\t\t\t\tif ( !constructor ) introBlock += `\\n\\n${i0}`;\n\n\t\t\t\toutroBlock += `\\n\\n${i0}` + outro.join( `\\n${i0}` );\n\t\t\t}\n\n\t\t\tif ( constructor ) {\n\t\t\t\tcode.insertLeft( constructor.end, introBlock );\n\t\t\t} else {\n\t\t\t\tcode.insertRight( this.start, introBlock );\n\t\t\t}\n\n\t\t\tcode.insertLeft( this.end, outroBlock );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ClassBody.js","import Node from '../Node.js';\nimport deindent from '../../utils/deindent.js';\n\nexport default class ClassDeclaration extends Node {\n\tinitialise ( transforms ) {\n\t\tthis.name = this.id.name;\n\t\tthis.findScope( true ).addDeclaration( this.id, 'class' );\n\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.classes ) {\n\t\t\tif ( !this.superClass ) deindent( this.body, code );\n\n\t\t\tconst superName = this.superClass && ( this.superClass.name || 'superclass' );\n\n\t\t\tconst i0 = this.getIndentation();\n\t\t\tconst i1 = i0 + code.getIndentString();\n\n\t\t\t// if this is an export default statement, we have to move the export to\n\t\t\t// after the declaration, because `export default var Foo = ...` is illegal\n\t\t\tconst syntheticDefaultExport = this.parent.type === 'ExportDefaultDeclaration' ?\n\t\t\t\t`\\n\\n${i0}export default ${this.id.name};` :\n\t\t\t\t'';\n\n\t\t\tif ( syntheticDefaultExport ) code.remove( this.parent.start, this.start );\n\n\t\t\tcode.overwrite( this.start, this.id.start, 'var ' );\n\n\t\t\tif ( this.superClass ) {\n\t\t\t\tif ( this.superClass.end === this.body.start ) {\n\t\t\t\t\tcode.remove( this.id.end, this.superClass.start );\n\t\t\t\t\tcode.insertLeft( this.id.end, ` = (function (${superName}) {\\n${i1}` );\n\t\t\t\t} else {\n\t\t\t\t\tcode.overwrite( this.id.end, this.superClass.start, ' = ' );\n\t\t\t\t\tcode.overwrite( this.superClass.end, this.body.start, `(function (${superName}) {\\n${i1}` );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( this.id.end === this.body.start ) {\n\t\t\t\t\tcode.insertLeft( this.id.end, ' = ' );\n\t\t\t\t} else {\n\t\t\t\t\tcode.overwrite( this.id.end, this.body.start, ' = ' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.body.transpile( code, transforms, !!this.superClass, superName );\n\n\t\t\tif ( this.superClass ) {\n\t\t\t\tcode.insertLeft( this.end, `\\n\\n${i1}return ${this.name};\\n${i0}}(` );\n\t\t\t\tcode.move( this.superClass.start, this.superClass.end, this.end );\n\t\t\t\tcode.insertRight( this.end, `));${syntheticDefaultExport}` );\n\t\t\t} else if ( syntheticDefaultExport ) {\n\t\t\t\tcode.insertRight( this.end, syntheticDefaultExport );\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\tthis.body.transpile( code, transforms, false, null );\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ClassDeclaration.js","import Node from '../Node.js';\n\nexport default class ClassExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tthis.name = this.id ? this.id.name :\n\t\t            this.parent.type === 'VariableDeclarator' ? this.parent.id.name :\n\t\t            this.parent.type === 'AssignmentExpression' ? this.parent.left.name :\n\t\t            this.findScope( true ).createIdentifier( 'anonymous' );\n\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.classes ) {\n\t\t\tconst superName = this.superClass && ( this.superClass.name || 'superclass' );\n\n\t\t\tconst i0 = this.getIndentation();\n\t\t\tconst i1 = i0 + code.getIndentString();\n\n\t\t\tif ( this.superClass ) {\n\t\t\t\tcode.remove( this.start, this.superClass.start );\n\t\t\t\tcode.remove( this.superClass.end, this.body.start );\n\t\t\t\tcode.insertLeft( this.start, `(function (${superName}) {\\n${i1}` );\n\t\t\t} else {\n\t\t\t\tcode.overwrite( this.start, this.body.start, `(function () {\\n${i1}` );\n\t\t\t}\n\n\t\t\tthis.body.transpile( code, transforms, true, superName );\n\n\t\t\tconst outro = `\\n\\n${i1}return ${this.name};\\n${i0}}(`;\n\n\t\t\tif ( this.superClass ) {\n\t\t\t\tcode.insertLeft( this.end, outro );\n\t\t\t\tcode.move( this.superClass.start, this.superClass.end, this.end );\n\t\t\t\tcode.insertRight( this.end, '))' );\n\t\t\t} else {\n\t\t\t\tcode.insertLeft( this.end, `\\n\\n${i1}return ${this.name};\\n${i0}}())` );\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\tthis.body.transpile( code, transforms, false );\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ClassExpression.js","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\nimport { loopStatement } from '../../utils/patterns.js';\n\nexport default class ContinueStatement extends Node {\n\ttranspile ( code ) {\n\t\tconst loop = this.findNearest( loopStatement );\n\t\tif ( loop.shouldRewriteAsFunction ) {\n\t\t\tif ( this.label ) throw new CompileError( this, 'Labels are not currently supported in a loop with locally-scoped variables' );\n\t\t\tcode.overwrite( this.start, this.start + 8, 'return' );\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ContinueStatement.js","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class ExportDefaultDeclaration extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.moduleExport ) throw new CompileError( this, 'export is not supported' );\n\t\tsuper.initialise( transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ExportDefaultDeclaration.js","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class ExportNamedDeclaration extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.moduleExport ) throw new CompileError( this, 'export is not supported' );\n\t\tsuper.initialise( transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ExportNamedDeclaration.js","import Node from '../../Node.js';\n\nexport default class LoopStatement extends Node {\n\tfindScope ( functionScope ) {\n\t\treturn functionScope || !this.createdScope ? this.parent.findScope( functionScope ) : this.body.scope;\n\t}\n\n\tinitialise ( transforms ) {\n\t\tthis.body.createScope();\n\t\tthis.createdScope = true;\n\n\t\t// this is populated as and when reassignments occur\n\t\tthis.reassigned = Object.create( null );\n\t\tthis.aliases = Object.create( null );\n\n\t\tsuper.initialise( transforms );\n\n\t\tif ( transforms.letConst ) {\n\t\t\t// see if any block-scoped declarations are referenced\n\t\t\t// inside function expressions\n\t\t\tconst names = Object.keys( this.body.scope.declarations );\n\n\t\t\tlet i = names.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tconst name = names[i];\n\t\t\t\tconst declaration = this.body.scope.declarations[ name ];\n\n\t\t\t\tlet j = declaration.instances.length;\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\tconst instance = declaration.instances[j];\n\t\t\t\t\tconst nearestFunctionExpression = instance.findNearest( /Function/ );\n\n\t\t\t\t\tif ( nearestFunctionExpression && nearestFunctionExpression.depth > this.depth ) {\n\t\t\t\t\t\tthis.shouldRewriteAsFunction = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( this.shouldRewriteAsFunction ) break;\n\t\t\t}\n\t\t}\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tconst needsBlock = this.type != 'ForOfStatement' && (\n\t\t\tthis.body.type !== 'BlockStatement'\n\t\t\t|| this.body.type === 'BlockStatement' && this.body.synthetic );\n\n\t\tif ( this.shouldRewriteAsFunction ) {\n\t\t\tconst i0 = this.getIndentation();\n\t\t\tconst i1 = i0 + code.getIndentString();\n\n\t\t\tconst argString = this.args ? ` ${this.args.join( ', ' )} ` : '';\n\t\t\tconst paramString = this.params ? ` ${this.params.join( ', ' )} ` : '';\n\n\t\t\tconst functionScope = this.findScope( true );\n\t\t\tconst loop = functionScope.createIdentifier( 'loop' );\n\n\t\t\tconst before = `var ${loop} = function (${paramString}) ` + ( this.body.synthetic ? `{\\n${i0}${code.getIndentString()}` : '' );\n\t\t\tconst after = ( this.body.synthetic ? `\\n${i0}}` : '' ) + `;\\n\\n${i0}`;\n\n\t\t\tcode.insertRight( this.body.start, before );\n\t\t\tcode.insertLeft( this.body.end, after );\n\t\t\tcode.move( this.start, this.body.start, this.body.end );\n\n\t\t\tif ( this.canBreak || this.canReturn ) {\n\t\t\t\tconst returned = functionScope.createIdentifier( 'returned' );\n\n\t\t\t\tlet insert = `{\\n${i1}var ${returned} = ${loop}(${argString});\\n`;\n\t\t\t\tif ( this.canBreak ) insert += `\\n${i1}if ( ${returned} === 'break' ) break;`;\n\t\t\t\tif ( this.canReturn ) insert += `\\n${i1}if ( ${returned} ) return ${returned}.v;`;\n\t\t\t\tinsert += `\\n${i0}}`;\n\n\t\t\t\tcode.insertRight( this.body.end, insert );\n\t\t\t} else {\n\t\t\t\tconst callExpression = `${loop}(${argString});`;\n\n\t\t\t\tif ( this.type === 'DoWhileStatement' ) {\n\t\t\t\t\tcode.overwrite( this.start, this.body.start, `do {\\n${i1}${callExpression}\\n${i0}}` );\n\t\t\t\t} else {\n\t\t\t\t\tcode.insertRight( this.body.end, callExpression );\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ( needsBlock ) {\n\t\t\tcode.insertLeft( this.body.start, '{ ' );\n\t\t\tcode.insertRight( this.body.end, ' }' );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/shared/LoopStatement.js","import LoopStatement from './shared/LoopStatement.js';\nimport extractNames from '../extractNames.js';\n\nexport default class ForStatement extends LoopStatement {\n\tfindScope ( functionScope ) {\n\t\treturn functionScope || !this.createdScope ? this.parent.findScope( functionScope ) : this.body.scope;\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tconst i1 = this.getIndentation() + code.getIndentString();\n\n\t\tif ( this.shouldRewriteAsFunction ) {\n\t\t\t// which variables are declared in the init statement?\n\t\t\tconst names = this.init.type === 'VariableDeclaration' ?\n\t\t\t\t[].concat.apply( [], this.init.declarations.map( declarator => extractNames( declarator.id ) ) ) :\n\t\t\t\t[];\n\n\t\t\tconst aliases = this.aliases;\n\n\t\t\tthis.args = names.map( name => name in this.aliases ? this.aliases[ name ].outer : name );\n\t\t\tthis.params = names.map( name => name in this.aliases ? this.aliases[ name ].inner : name );\n\n\t\t\tconst updates = Object.keys( this.reassigned )\n\t\t\t\t.map( name => `${aliases[ name ].outer} = ${aliases[ name ].inner};` );\n\n\t\t\tif ( updates.length ) {\n\t\t\t\tif ( this.body.synthetic ) {\n\t\t\t\t\tcode.insertLeft( this.body.body[0].end, `; ${updates.join(` `)}` );\n\t\t\t\t} else {\n\t\t\t\t\tconst lastStatement = this.body.body[ this.body.body.length - 1 ];\n\t\t\t\t\tcode.insertLeft( lastStatement.end, `\\n\\n${i1}${updates.join(`\\n${i1}`)}` );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ForStatement.js","import LoopStatement from './shared/LoopStatement.js';\nimport extractNames from '../extractNames.js';\n\nexport default class ForInStatement extends LoopStatement {\n\tfindScope ( functionScope ) {\n\t\treturn functionScope || !this.createdScope ? this.parent.findScope( functionScope ) : this.body.scope;\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( this.shouldRewriteAsFunction ) {\n\t\t\t// which variables are declared in the init statement?\n\t\t\tconst names = this.left.type === 'VariableDeclaration' ?\n\t\t\t\t[].concat.apply( [], this.left.declarations.map( declarator => extractNames( declarator.id ) ) ) :\n\t\t\t\t[];\n\n\t\t\tthis.args = names.map( name => name in this.aliases ? this.aliases[ name ].outer : name );\n\t\t\tthis.params = names.map( name => name in this.aliases ? this.aliases[ name ].inner : name );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ForInStatement.js","import LoopStatement from './shared/LoopStatement.js';\nimport CompileError from '../../utils/CompileError.js';\nimport destructure from '../../utils/destructure.js';\n\nexport default class ForOfStatement extends LoopStatement {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.forOf && !transforms.dangerousForOf ) throw new CompileError( this, 'for...of statements are not supported. Use `transforms: { forOf: false }` to skip transformation and disable this error, or `transforms: { dangerousForOf: true }` if you know what you\\'re doing' );\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( !transforms.dangerousForOf ) {\n\t\t\tsuper.transpile( code, transforms );\n\t\t\treturn;\n\t\t}\n\n\t\t// edge case (#80)\n\t\tif ( !this.body.body[0] ) {\n\t\t\tif ( this.left.type === 'VariableDeclaration' && this.left.kind === 'var' ) {\n\t\t\t\tcode.remove( this.start, this.left.start );\n\t\t\t\tcode.insertLeft( this.left.end, ';' );\n\t\t\t\tcode.remove( this.left.end, this.end );\n\t\t\t} else {\n\t\t\t\tcode.remove( this.start, this.end );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst scope = this.findScope( true );\n\t\tconst i0 = this.getIndentation();\n\t\tconst i1 = i0 + code.getIndentString();\n\n\t\tconst key = scope.createIdentifier( 'i' );\n\t\tconst list = scope.createIdentifier( 'list' );\n\n\t\tif ( this.body.synthetic ) {\n\t\t\tcode.insertRight( this.left.start, `{\\n${i1}` );\n\t\t\tcode.insertLeft( this.body.body[0].end, `\\n${i0}}` );\n\t\t}\n\n\t\tconst bodyStart = this.body.body[0].start;\n\n\t\tcode.remove( this.left.end, this.right.start );\n\t\tcode.move( this.left.start, this.left.end, bodyStart );\n\n\n\t\tcode.insertRight( this.right.start, `var ${key} = 0, ${list} = ` );\n\t\tcode.insertLeft( this.right.end, `; ${key} < ${list}.length; ${key} += 1` );\n\n\t\t// destructuring. TODO non declaration destructuring\n\t\tconst declarator = this.left.type === 'VariableDeclaration' && this.left.declarations[0];\n\t\tif ( declarator && declarator.id.type !== 'Identifier' ) {\n\t\t\tlet statementGenerators = [];\n\t\t\tconst ref = scope.createIdentifier( 'ref' );\n\t\t\tdestructure( code, scope, declarator.id, ref, false, statementGenerators );\n\n\t\t\tlet suffix = `;\\n${i1}`;\n\t\t\tstatementGenerators.forEach( ( fn, i ) => {\n\t\t\t\tif ( i === statementGenerators.length - 1 ) {\n\t\t\t\t\tsuffix = `;\\n\\n${i1}`;\n\t\t\t\t}\n\n\t\t\t\tfn( bodyStart, '', suffix );\n\t\t\t});\n\n\t\t\tcode.insertLeft( this.left.start + this.left.kind.length + 1, ref );\n\t\t\tcode.insertLeft( this.left.end, ` = ${list}[${key}];\\n${i1}` );\n\t\t} else {\n\t\t\tcode.insertLeft( this.left.end, ` = ${list}[${key}];\\n\\n${i1}` );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ForOfStatement.js","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class FunctionDeclaration extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( this.generator && transforms.generator ) {\n\t\t\tthrow new CompileError( this, 'Generators are not supported' );\n\t\t}\n\n\t\tthis.body.createScope();\n\n\t\tthis.findScope( true ).addDeclaration( this.id, 'function' );\n\t\tsuper.initialise( transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/FunctionDeclaration.js","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class FunctionExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( this.generator && transforms.generator ) {\n\t\t\tthrow new CompileError( this, 'Generators are not supported' );\n\t\t}\n\n\t\tthis.body.createScope();\n\n\t\tif ( this.id ) {\n\t\t\t// function expression IDs belong to the child scope...\n\t\t\tthis.body.scope.addDeclaration( this.id, 'function' );\n\t\t}\n\n\t\tsuper.initialise( transforms );\n\n\t\tconst parent = this.parent;\n\t\tlet methodName;\n\n\t\tif ( transforms.conciseMethodProperty\n\t\t\t\t&& parent.type === 'Property'\n\t\t\t\t&& parent.kind === 'init'\n\t\t\t\t&& parent.method\n\t\t\t\t&& parent.key.type === 'Identifier' ) {\n\t\t\t// object literal concise method\n\t\t\tmethodName = parent.key.name;\n\t\t}\n\t\telse if ( transforms.classes\n\t\t\t\t&& parent.type === 'MethodDefinition'\n\t\t\t\t&& parent.kind === 'method'\n\t\t\t\t&& parent.key.type === 'Identifier' ) {\n\t\t\t// method definition in a class\n\t\t\tmethodName = parent.key.name;\n\t\t}\n\t\telse if ( this.id && this.id.type === 'Identifier' ) {\n\t\t\t// naked function expression\n\t\t\tmethodName = this.id.alias || this.id.name;\n\t\t}\n\n\t\tif ( methodName ) {\n\t\t\tfor ( const param of this.params ) {\n\t\t\t\tif ( param.type === 'Identifier' && methodName === param.name ) {\n\t\t\t\t\t// workaround for Safari 9/WebKit bug:\n\t\t\t\t\t// https://gitlab.com/Rich-Harris/buble/issues/154\n\t\t\t\t\t// change parameter name when same as method name\n\n\t\t\t\t\tconst scope = this.body.scope;\n\t\t\t\t\tconst declaration = scope.declarations[ methodName ];\n\n\t\t\t\t\tconst alias = scope.createIdentifier( methodName );\n\t\t\t\t\tparam.alias = alias;\n\n\t\t\t\t\tfor ( const identifier of declaration.instances ) {\n\t\t\t\t\t\tidentifier.alias = alias;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/FunctionExpression.js","import Node from '../Node.js';\nimport isReference from '../../utils/isReference.js';\nimport { loopStatement } from '../../utils/patterns.js';\n\nexport default class Identifier extends Node {\n\tfindScope ( functionScope ) {\n\t\tif ( this.parent.params && ~this.parent.params.indexOf( this ) ) {\n\t\t\treturn this.parent.body.scope;\n\t\t}\n\n\t\tif ( this.parent.type === 'FunctionExpression' && this === this.parent.id ) {\n\t\t\treturn this.parent.body.scope;\n\t\t}\n\n\t\treturn this.parent.findScope( functionScope\t);\n\t}\n\n\tinitialise ( transforms ) {\n\t\tif ( transforms.arrow && isReference( this, this.parent ) ) {\n\t\t\tif ( this.name === 'arguments' && !this.findScope( false ).contains( this.name ) ) {\n\t\t\t\tconst lexicalBoundary = this.findLexicalBoundary();\n\t\t\t\tconst arrowFunction = this.findNearest( 'ArrowFunctionExpression' );\n\t\t\t\tconst loop = this.findNearest( loopStatement );\n\n\t\t\t\tif ( arrowFunction && arrowFunction.depth > lexicalBoundary.depth ) {\n\t\t\t\t\tthis.alias = lexicalBoundary.getArgumentsAlias();\n\t\t\t\t}\n\n\t\t\t\tif ( loop && loop.body.contains( this ) && loop.depth > lexicalBoundary.depth ) {\n\t\t\t\t\tthis.alias = lexicalBoundary.getArgumentsAlias();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.findScope( false ).addReference( this );\n\t\t}\n\t}\n\n\ttranspile ( code ) {\n\t\tif ( this.alias ) {\n\t\t\tcode.overwrite( this.start, this.end, this.alias, true );\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/Identifier.js","import Node from '../Node.js';\n\nexport default class IfStatement extends Node {\n\tinitialise ( transforms ) {\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( this.consequent.type !== 'BlockStatement'\n\t\t\t\t|| this.consequent.type === 'BlockStatement' && this.consequent.synthetic ) {\n\t\t\tcode.insertLeft( this.consequent.start, '{ ' );\n\t\t\tcode.insertRight( this.consequent.end, ' }' );\n\t\t}\n\n\t\tif ( this.alternate && this.alternate.type !== 'IfStatement' && (\n\t\t\t\tthis.alternate.type !== 'BlockStatement'\n\t\t\t\t|| this.alternate.type === 'BlockStatement' && this.alternate.synthetic ) ) {\n\t\t\tcode.insertLeft( this.alternate.start, '{ ' );\n\t\t\tcode.insertRight( this.alternate.end, ' }' );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/IfStatement.js","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class ImportDeclaration extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.moduleImport ) throw new CompileError( this, 'import is not supported' );\n\t\tsuper.initialise( transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ImportDeclaration.js","import Node from '../Node.js';\n\nexport default class ImportDefaultSpecifier extends Node {\n\tinitialise ( transforms ) {\n\t\tthis.findScope( true ).addDeclaration( this.local, 'import' );\n\t\tsuper.initialise( transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ImportDefaultSpecifier.js","import Node from '../Node.js';\n\nexport default class ImportSpecifier extends Node {\n\tinitialise ( transforms ) {\n\t\tthis.findScope( true ).addDeclaration( this.local, 'import' );\n\t\tsuper.initialise( transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ImportSpecifier.js","import Node from '../Node.js';\n\nconst IS_DATA_ATTRIBUTE = /-/;\n\nexport default class JSXAttribute extends Node {\n\ttranspile ( code, transforms ) {\n\t\tif ( this.value ) {\n\t\t\tcode.overwrite( this.name.end, this.value.start, ': ' );\n\t\t} else {\n\t\t\t// tag without value\n\t\t\tcode.overwrite( this.name.start, this.name.end, `${this.name.name}: true` );\n\t\t}\n\n\t\tif ( IS_DATA_ATTRIBUTE.test( this.name.name ) ) {\n\t\t\tcode.overwrite( this.name.start, this.name.end, `'${this.name.name}'` );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/JSXAttribute.js","import Node from '../Node.js';\n\nexport default class JSXExpressionContainer extends Node {\n\ttranspile ( code, transforms ) {\n\t\tcode.remove( this.start, this.expression.start );\n\t\tcode.remove( this.expression.end, this.end );\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/JSXExpressionContainer.js","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class JSXOpeningElement extends Node {\n\ttranspile ( code, transforms ) {\n\t\tcode.overwrite( this.start, this.name.start, `${this.program.jsx}( ` );\n\n\t\tconst html = this.name.type === 'JSXIdentifier' && this.name.name[0] === this.name.name[0].toLowerCase();\n\t\tif ( html ) code.insertRight( this.name.start, `'` );\n\n\t\tconst len = this.attributes.length;\n\t\tlet c = this.name.end;\n\n\t\tif ( len ) {\n\t\t\tlet i;\n\n\t\t\tlet hasSpread = false;\n\t\t\tfor ( i = 0; i < len; i += 1 ) {\n\t\t\t\tif ( this.attributes[i].type === 'JSXSpreadAttribute' ) {\n\t\t\t\t\thasSpread = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc = this.attributes[0].end;\n\n\t\t\tfor ( i = 0; i < len; i += 1 ) {\n\t\t\t\tconst attr = this.attributes[i];\n\n\t\t\t\tif ( i > 0 ) {\n\t\t\t\t\tcode.overwrite( c, attr.start, ', ' );\n\t\t\t\t}\n\n\t\t\t\tif ( hasSpread && attr.type !== 'JSXSpreadAttribute' ) {\n\t\t\t\t\tconst lastAttr = this.attributes[ i - 1 ];\n\t\t\t\t\tconst nextAttr = this.attributes[ i + 1 ];\n\n\t\t\t\t\tif ( !lastAttr || lastAttr.type === 'JSXSpreadAttribute' ) {\n\t\t\t\t\t\tcode.insertRight( attr.start, '{ ' );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !nextAttr || nextAttr.type === 'JSXSpreadAttribute' ) {\n\t\t\t\t\t\tcode.insertLeft( attr.end, ' }' );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tc = attr.end;\n\t\t\t}\n\n\t\t\tlet after;\n\t\t\tlet before;\n\t\t\tif ( hasSpread ) {\n\t\t\t\tif ( len === 1 ) {\n\t\t\t\t\tbefore = html ? `',` : ',';\n\t\t\t\t} else {\n\t\t\t\t\tif (!this.program.options.objectAssign) {\n\t\t\t\t\t\tthrow new CompileError( this, 'Mixed JSX attributes ending in spread requires specified objectAssign option with \\'Object.assign\\' or polyfill helper.' );\n\t\t\t\t\t}\n\t\t\t\t\tbefore = html ? `', ${this.program.options.objectAssign}({},` : `, ${this.program.options.objectAssign}({},`;\n\t\t\t\t\tafter = ')';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbefore = html ? `', {` : ', {';\n\t\t\t\tafter = ' }';\n\t\t\t}\n\n\t\t\tcode.insertRight( this.name.end, before );\n\n\t\t\tif ( after ) {\n\t\t\t\tcode.insertLeft( this.attributes[ len - 1 ].end, after );\n\t\t\t}\n\t\t} else {\n\t\t\tcode.insertLeft( this.name.end, html ? `', null` : `, null` );\n\t\t\tc = this.name.end;\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\n\t\tif ( this.selfClosing ) {\n\t\t\tcode.overwrite( c, this.end, this.attributes.length ? `)` : ` )` );\n\t\t} else {\n\t\t\tcode.remove( c, this.end );\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/JSXOpeningElement.js","import Node from '../Node.js';\n\nexport default class JSXSpreadAttribute extends Node {\n\ttranspile ( code, transforms ) {\n\t\tcode.remove( this.start, this.argument.start );\n\t\tcode.remove( this.argument.end, this.end );\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/JSXSpreadAttribute.js","/*! https://mths.be/regenerate v1.3.1 by @mathias | MIT license */\n;(function(root) {\n\n\t// Detect free variables `exports`.\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`.\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js/io.js or Browserified code,\n\t// and use it as `root`.\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar ERRORS = {\n\t\t'rangeOrder': 'A range\\u2019s `stop` value must be greater than or equal ' +\n\t\t\t'to the `start` value.',\n\t\t'codePointRange': 'Invalid code point value. Code points range from ' +\n\t\t\t'U+000000 to U+10FFFF.'\n\t};\n\n\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-pairs\n\tvar HIGH_SURROGATE_MIN = 0xD800;\n\tvar HIGH_SURROGATE_MAX = 0xDBFF;\n\tvar LOW_SURROGATE_MIN = 0xDC00;\n\tvar LOW_SURROGATE_MAX = 0xDFFF;\n\n\t// In Regenerate output, `\\0` is never preceded by `\\` because we sort by\n\t// code point value, so let’s keep this regular expression simple.\n\tvar regexNull = /\\\\x00([^0123456789]|$)/g;\n\n\tvar object = {};\n\tvar hasOwnProperty = object.hasOwnProperty;\n\tvar extend = function(destination, source) {\n\t\tvar key;\n\t\tfor (key in source) {\n\t\t\tif (hasOwnProperty.call(source, key)) {\n\t\t\t\tdestination[key] = source[key];\n\t\t\t}\n\t\t}\n\t\treturn destination;\n\t};\n\n\tvar forEach = function(array, callback) {\n\t\tvar index = -1;\n\t\tvar length = array.length;\n\t\twhile (++index < length) {\n\t\t\tcallback(array[index], index);\n\t\t}\n\t};\n\n\tvar toString = object.toString;\n\tvar isArray = function(value) {\n\t\treturn toString.call(value) == '[object Array]';\n\t};\n\tvar isNumber = function(value) {\n\t\treturn typeof value == 'number' ||\n\t\t\ttoString.call(value) == '[object Number]';\n\t};\n\n\t// This assumes that `number` is a positive integer that `toString()`s nicely\n\t// (which is the case for all code point values).\n\tvar zeroes = '0000';\n\tvar pad = function(number, totalCharacters) {\n\t\tvar string = String(number);\n\t\treturn string.length < totalCharacters\n\t\t\t? (zeroes + string).slice(-totalCharacters)\n\t\t\t: string;\n\t};\n\n\tvar hex = function(number) {\n\t\treturn Number(number).toString(16).toUpperCase();\n\t};\n\n\tvar slice = [].slice;\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar dataFromCodePoints = function(codePoints) {\n\t\tvar index = -1;\n\t\tvar length = codePoints.length;\n\t\tvar max = length - 1;\n\t\tvar result = [];\n\t\tvar isStart = true;\n\t\tvar tmp;\n\t\tvar previous = 0;\n\t\twhile (++index < length) {\n\t\t\ttmp = codePoints[index];\n\t\t\tif (isStart) {\n\t\t\t\tresult.push(tmp);\n\t\t\t\tprevious = tmp;\n\t\t\t\tisStart = false;\n\t\t\t} else {\n\t\t\t\tif (tmp == previous + 1) {\n\t\t\t\t\tif (index != max) {\n\t\t\t\t\t\tprevious = tmp;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisStart = true;\n\t\t\t\t\t\tresult.push(tmp + 1);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// End the previous range and start a new one.\n\t\t\t\t\tresult.push(previous + 1, tmp);\n\t\t\t\t\tprevious = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!isStart) {\n\t\t\tresult.push(tmp + 1);\n\t\t}\n\t\treturn result;\n\t};\n\n\tvar dataRemove = function(data, codePoint) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar length = data.length;\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\t\t\tif (codePoint >= start && codePoint < end) {\n\t\t\t\t// Modify this pair.\n\t\t\t\tif (codePoint == start) {\n\t\t\t\t\tif (end == start + 1) {\n\t\t\t\t\t\t// Just remove `start` and `end`.\n\t\t\t\t\t\tdata.splice(index, 2);\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Just replace `start` with a new value.\n\t\t\t\t\t\tdata[index] = codePoint + 1;\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\t\t\t\t} else if (codePoint == end - 1) {\n\t\t\t\t\t// Just replace `end` with a new value.\n\t\t\t\t\tdata[index + 1] = codePoint;\n\t\t\t\t\treturn data;\n\t\t\t\t} else {\n\t\t\t\t\t// Replace `[start, end]` with `[startA, endA, startB, endB]`.\n\t\t\t\t\tdata.splice(index, 2, start, codePoint, codePoint + 1, end);\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn data;\n\t};\n\n\tvar dataRemoveRange = function(data, rangeStart, rangeEnd) {\n\t\tif (rangeEnd < rangeStart) {\n\t\t\tthrow Error(ERRORS.rangeOrder);\n\t\t}\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\twhile (index < data.length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n\n\t\t\t// Exit as soon as no more matching pairs can be found.\n\t\t\tif (start > rangeEnd) {\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Check if this range pair is equal to, or forms a subset of, the range\n\t\t\t// to be removed.\n\t\t\t// E.g. we have `[0, 11, 40, 51]` and want to remove 0-10 → `[40, 51]`.\n\t\t\t// E.g. we have `[40, 51]` and want to remove 0-100 → `[]`.\n\t\t\tif (rangeStart <= start && rangeEnd >= end) {\n\t\t\t\t// Remove this pair.\n\t\t\t\tdata.splice(index, 2);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if both `rangeStart` and `rangeEnd` are within the bounds of\n\t\t\t// this pair.\n\t\t\t// E.g. we have `[0, 11]` and want to remove 4-6 → `[0, 4, 7, 11]`.\n\t\t\tif (rangeStart >= start && rangeEnd < end) {\n\t\t\t\tif (rangeStart == start) {\n\t\t\t\t\t// Replace `[start, end]` with `[startB, endB]`.\n\t\t\t\t\tdata[index] = rangeEnd + 1;\n\t\t\t\t\tdata[index + 1] = end + 1;\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t\t// Replace `[start, end]` with `[startA, endA, startB, endB]`.\n\t\t\t\tdata.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1);\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Check if only `rangeStart` is within the bounds of this pair.\n\t\t\t// E.g. we have `[0, 11]` and want to remove 4-20 → `[0, 4]`.\n\t\t\tif (rangeStart >= start && rangeStart <= end) {\n\t\t\t\t// Replace `end` with `rangeStart`.\n\t\t\t\tdata[index + 1] = rangeStart;\n\t\t\t\t// Note: we cannot `return` just yet, in case any following pairs still\n\t\t\t\t// contain matching code points.\n\t\t\t\t// E.g. we have `[0, 11, 14, 31]` and want to remove 4-20\n\t\t\t\t// → `[0, 4, 21, 31]`.\n\t\t\t}\n\n\t\t\t// Check if only `rangeEnd` is within the bounds of this pair.\n\t\t\t// E.g. we have `[14, 31]` and want to remove 4-20 → `[21, 31]`.\n\t\t\telse if (rangeEnd >= start && rangeEnd <= end) {\n\t\t\t\t// Just replace `start`.\n\t\t\t\tdata[index] = rangeEnd + 1;\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tindex += 2;\n\t\t}\n\t\treturn data;\n\t};\n\n\t var dataAdd = function(data, codePoint) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar lastIndex = null;\n\t\tvar length = data.length;\n\t\tif (codePoint < 0x0 || codePoint > 0x10FFFF) {\n\t\t\tthrow RangeError(ERRORS.codePointRange);\n\t\t}\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\n\t\t\t// Check if the code point is already in the set.\n\t\t\tif (codePoint >= start && codePoint < end) {\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tif (codePoint == start - 1) {\n\t\t\t\t// Just replace `start` with a new value.\n\t\t\t\tdata[index] = codePoint;\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// At this point, if `start` is `greater` than `codePoint`, insert a new\n\t\t\t// `[start, end]` pair before the current pair, or after the current pair\n\t\t\t// if there is a known `lastIndex`.\n\t\t\tif (start > codePoint) {\n\t\t\t\tdata.splice(\n\t\t\t\t\tlastIndex != null ? lastIndex + 2 : 0,\n\t\t\t\t\t0,\n\t\t\t\t\tcodePoint,\n\t\t\t\t\tcodePoint + 1\n\t\t\t\t);\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tif (codePoint == end) {\n\t\t\t\t// Check if adding this code point causes two separate ranges to become\n\t\t\t\t// a single range, e.g. `dataAdd([0, 4, 5, 10], 4)` → `[0, 10]`.\n\t\t\t\tif (codePoint + 1 == data[index + 2]) {\n\t\t\t\t\tdata.splice(index, 4, start, data[index + 3]);\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t\t// Else, just replace `end` with a new value.\n\t\t\t\tdata[index + 1] = codePoint + 1;\n\t\t\t\treturn data;\n\t\t\t}\n\t\t\tlastIndex = index;\n\t\t\tindex += 2;\n\t\t}\n\t\t// The loop has finished; add the new pair to the end of the data set.\n\t\tdata.push(codePoint, codePoint + 1);\n\t\treturn data;\n\t};\n\n\tvar dataAddData = function(dataA, dataB) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar data = dataA.slice();\n\t\tvar length = dataB.length;\n\t\twhile (index < length) {\n\t\t\tstart = dataB[index];\n\t\t\tend = dataB[index + 1] - 1;\n\t\t\tif (start == end) {\n\t\t\t\tdata = dataAdd(data, start);\n\t\t\t} else {\n\t\t\t\tdata = dataAddRange(data, start, end);\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn data;\n\t};\n\n\tvar dataRemoveData = function(dataA, dataB) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar data = dataA.slice();\n\t\tvar length = dataB.length;\n\t\twhile (index < length) {\n\t\t\tstart = dataB[index];\n\t\t\tend = dataB[index + 1] - 1;\n\t\t\tif (start == end) {\n\t\t\t\tdata = dataRemove(data, start);\n\t\t\t} else {\n\t\t\t\tdata = dataRemoveRange(data, start, end);\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn data;\n\t};\n\n\tvar dataAddRange = function(data, rangeStart, rangeEnd) {\n\t\tif (rangeEnd < rangeStart) {\n\t\t\tthrow Error(ERRORS.rangeOrder);\n\t\t}\n\t\tif (\n\t\t\trangeStart < 0x0 || rangeStart > 0x10FFFF ||\n\t\t\trangeEnd < 0x0 || rangeEnd > 0x10FFFF\n\t\t) {\n\t\t\tthrow RangeError(ERRORS.codePointRange);\n\t\t}\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar added = false;\n\t\tvar length = data.length;\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\n\t\t\tif (added) {\n\t\t\t\t// The range has already been added to the set; at this point, we just\n\t\t\t\t// need to get rid of the following ranges in case they overlap.\n\n\t\t\t\t// Check if this range can be combined with the previous range.\n\t\t\t\tif (start == rangeEnd + 1) {\n\t\t\t\t\tdata.splice(index - 1, 2);\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Exit as soon as no more possibly overlapping pairs can be found.\n\t\t\t\tif (start > rangeEnd) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// E.g. `[0, 11, 12, 16]` and we’ve added 5-15, so we now have\n\t\t\t\t// `[0, 16, 12, 16]`. Remove the `12,16` part, as it lies within the\n\t\t\t\t// `0,16` range that was previously added.\n\t\t\t\tif (start >= rangeStart && start <= rangeEnd) {\n\t\t\t\t\t// `start` lies within the range that was previously added.\n\n\t\t\t\t\tif (end > rangeStart && end - 1 <= rangeEnd) {\n\t\t\t\t\t\t// `end` lies within the range that was previously added as well,\n\t\t\t\t\t\t// so remove this pair.\n\t\t\t\t\t\tdata.splice(index, 2);\n\t\t\t\t\t\tindex -= 2;\n\t\t\t\t\t\t// Note: we cannot `return` just yet, as there may still be other\n\t\t\t\t\t\t// overlapping pairs.\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// `start` lies within the range that was previously added, but\n\t\t\t\t\t\t// `end` doesn’t. E.g. `[0, 11, 12, 31]` and we’ve added 5-15, so\n\t\t\t\t\t\t// now we have `[0, 16, 12, 31]`. This must be written as `[0, 31]`.\n\t\t\t\t\t\t// Remove the previously added `end` and the current `start`.\n\t\t\t\t\t\tdata.splice(index - 1, 2);\n\t\t\t\t\t\tindex -= 2;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Note: we cannot return yet.\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\telse if (start == rangeEnd + 1) {\n\t\t\t\tdata[index] = rangeStart;\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Check if a new pair must be inserted *before* the current one.\n\t\t\telse if (start > rangeEnd) {\n\t\t\t\tdata.splice(index, 0, rangeStart, rangeEnd + 1);\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\telse if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end) {\n\t\t\t\t// The new range lies entirely within an existing range pair. No action\n\t\t\t\t// needed.\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\telse if (\n\t\t\t\t// E.g. `[0, 11]` and you add 5-15 → `[0, 16]`.\n\t\t\t\t(rangeStart >= start && rangeStart < end) ||\n\t\t\t\t// E.g. `[0, 3]` and you add 3-6 → `[0, 7]`.\n\t\t\t\tend == rangeStart\n\t\t\t) {\n\t\t\t\t// Replace `end` with the new value.\n\t\t\t\tdata[index + 1] = rangeEnd + 1;\n\t\t\t\t// Make sure the next range pair doesn’t overlap, e.g. `[0, 11, 12, 14]`\n\t\t\t\t// and you add 5-15 → `[0, 16]`, i.e. remove the `12,14` part.\n\t\t\t\tadded = true;\n\t\t\t\t// Note: we cannot `return` just yet.\n\t\t\t}\n\n\t\t\telse if (rangeStart <= start && rangeEnd + 1 >= end) {\n\t\t\t\t// The new range is a superset of the old range.\n\t\t\t\tdata[index] = rangeStart;\n\t\t\t\tdata[index + 1] = rangeEnd + 1;\n\t\t\t\tadded = true;\n\t\t\t}\n\n\t\t\tindex += 2;\n\t\t}\n\t\t// The loop has finished without doing anything; add the new pair to the end\n\t\t// of the data set.\n\t\tif (!added) {\n\t\t\tdata.push(rangeStart, rangeEnd + 1);\n\t\t}\n\t\treturn data;\n\t};\n\n\tvar dataContains = function(data, codePoint) {\n\t\tvar index = 0;\n\t\tvar length = data.length;\n\t\t// Exit early if `codePoint` is not within `data`’s overall range.\n\t\tvar start = data[index];\n\t\tvar end = data[length - 1];\n\t\tif (length >= 2) {\n\t\t\tif (codePoint < start || codePoint > end) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\t\t\tif (codePoint >= start && codePoint < end) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn false;\n\t};\n\n\tvar dataIntersection = function(data, codePoints) {\n\t\tvar index = 0;\n\t\tvar length = codePoints.length;\n\t\tvar codePoint;\n\t\tvar result = [];\n\t\twhile (index < length) {\n\t\t\tcodePoint = codePoints[index];\n\t\t\tif (dataContains(data, codePoint)) {\n\t\t\t\tresult.push(codePoint);\n\t\t\t}\n\t\t\t++index;\n\t\t}\n\t\treturn dataFromCodePoints(result);\n\t};\n\n\tvar dataIsEmpty = function(data) {\n\t\treturn !data.length;\n\t};\n\n\tvar dataIsSingleton = function(data) {\n\t\t// Check if the set only represents a single code point.\n\t\treturn data.length == 2 && data[0] + 1 == data[1];\n\t};\n\n\tvar dataToArray = function(data) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar result = [];\n\t\tvar length = data.length;\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1];\n\t\t\twhile (start < end) {\n\t\t\t\tresult.push(start);\n\t\t\t\t++start;\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn result;\n\t};\n\n\t/*--------------------------------------------------------------------------*/\n\n\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\tvar floor = Math.floor;\n\tvar highSurrogate = function(codePoint) {\n\t\treturn parseInt(\n\t\t\tfloor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN,\n\t\t\t10\n\t\t);\n\t};\n\n\tvar lowSurrogate = function(codePoint) {\n\t\treturn parseInt(\n\t\t\t(codePoint - 0x10000) % 0x400 + LOW_SURROGATE_MIN,\n\t\t\t10\n\t\t);\n\t};\n\n\tvar stringFromCharCode = String.fromCharCode;\n\tvar codePointToString = function(codePoint) {\n\t\tvar string;\n\t\t// https://mathiasbynens.be/notes/javascript-escapes#single\n\t\t// Note: the `\\b` escape sequence for U+0008 BACKSPACE in strings has a\n\t\t// different meaning in regular expressions (word boundary), so it cannot\n\t\t// be used here.\n\t\tif (codePoint == 0x09) {\n\t\t\tstring = '\\\\t';\n\t\t}\n\t\t// Note: IE < 9 treats `'\\v'` as `'v'`, so avoid using it.\n\t\t// else if (codePoint == 0x0B) {\n\t\t// \tstring = '\\\\v';\n\t\t// }\n\t\telse if (codePoint == 0x0A) {\n\t\t\tstring = '\\\\n';\n\t\t}\n\t\telse if (codePoint == 0x0C) {\n\t\t\tstring = '\\\\f';\n\t\t}\n\t\telse if (codePoint == 0x0D) {\n\t\t\tstring = '\\\\r';\n\t\t}\n\t\telse if (codePoint == 0x5C) {\n\t\t\tstring = '\\\\\\\\';\n\t\t}\n\t\telse if (\n\t\t\tcodePoint == 0x24 ||\n\t\t\t(codePoint >= 0x28 && codePoint <= 0x2B) ||\n\t\t\tcodePoint == 0x2D || codePoint == 0x2E || codePoint == 0x3F ||\n\t\t\t(codePoint >= 0x5B && codePoint <= 0x5E) ||\n\t\t\t(codePoint >= 0x7B && codePoint <= 0x7D)\n\t\t) {\n\t\t\t// The code point maps to an unsafe printable ASCII character;\n\t\t\t// backslash-escape it. Here’s the list of those symbols:\n\t\t\t//\n\t\t\t//     $()*+-.?[\\]^{|}\n\t\t\t//\n\t\t\t// See #7 for more info.\n\t\t\tstring = '\\\\' + stringFromCharCode(codePoint);\n\t\t}\n\t\telse if (codePoint >= 0x20 && codePoint <= 0x7E) {\n\t\t\t// The code point maps to one of these printable ASCII symbols\n\t\t\t// (including the space character):\n\t\t\t//\n\t\t\t//      !\"#%&',/0123456789:;<=>@ABCDEFGHIJKLMNO\n\t\t\t//     PQRSTUVWXYZ_`abcdefghijklmnopqrstuvwxyz~\n\t\t\t//\n\t\t\t// These can safely be used directly.\n\t\t\tstring = stringFromCharCode(codePoint);\n\t\t}\n\t\telse if (codePoint <= 0xFF) {\n\t\t\t// https://mathiasbynens.be/notes/javascript-escapes#hexadecimal\n\t\t\tstring = '\\\\x' + pad(hex(codePoint), 2);\n\t\t}\n\t\telse { // `codePoint <= 0xFFFF` holds true.\n\t\t\t// https://mathiasbynens.be/notes/javascript-escapes#unicode\n\t\t\tstring = '\\\\u' + pad(hex(codePoint), 4);\n\t\t}\n\n\t\t// There’s no need to account for astral symbols / surrogate pairs here,\n\t\t// since `codePointToString` is private and only used for BMP code points.\n\t\t// But if that’s what you need, just add an `else` block with this code:\n\t\t//\n\t\t//     string = '\\\\u' + pad(hex(highSurrogate(codePoint)), 4)\n\t\t//     \t+ '\\\\u' + pad(hex(lowSurrogate(codePoint)), 4);\n\n\t\treturn string;\n\t};\n\n\tvar codePointToStringUnicode = function(codePoint) {\n\t\tif (codePoint <= 0xFFFF) {\n\t\t\treturn codePointToString(codePoint);\n\t\t}\n\t\treturn '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n\t};\n\n\tvar symbolToCodePoint = function(symbol) {\n\t\tvar length = symbol.length;\n\t\tvar first = symbol.charCodeAt(0);\n\t\tvar second;\n\t\tif (\n\t\t\tfirst >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX &&\n\t\t\tlength > 1 // There is a next code unit.\n\t\t) {\n\t\t\t// `first` is a high surrogate, and there is a next character. Assume\n\t\t\t// it’s a low surrogate (else it’s invalid usage of Regenerate anyway).\n\t\t\tsecond = symbol.charCodeAt(1);\n\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\treturn (first - HIGH_SURROGATE_MIN) * 0x400 +\n\t\t\t\tsecond - LOW_SURROGATE_MIN + 0x10000;\n\t\t}\n\t\treturn first;\n\t};\n\n\tvar createBMPCharacterClasses = function(data) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar result = '';\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar length = data.length;\n\t\tif (dataIsSingleton(data)) {\n\t\t\treturn codePointToString(data[0]);\n\t\t}\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n\t\t\tif (start == end) {\n\t\t\t\tresult += codePointToString(start);\n\t\t\t} else if (start + 1 == end) {\n\t\t\t\tresult += codePointToString(start) + codePointToString(end);\n\t\t\t} else {\n\t\t\t\tresult += codePointToString(start) + '-' + codePointToString(end);\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn '[' + result + ']';\n\t};\n\n\tvar createUnicodeCharacterClasses = function(data) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar result = '';\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar length = data.length;\n\t\tif (dataIsSingleton(data)) {\n\t\t\treturn codePointToStringUnicode(data[0]);\n\t\t}\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n\t\t\tif (start == end) {\n\t\t\t\tresult += codePointToStringUnicode(start);\n\t\t\t} else if (start + 1 == end) {\n\t\t\t\tresult += codePointToStringUnicode(start) + codePointToStringUnicode(end);\n\t\t\t} else {\n\t\t\t\tresult += codePointToStringUnicode(start) + '-' + codePointToStringUnicode(end);\n\t\t\t}\n\t\t\tindex += 2;\n\t\t}\n\t\treturn '[' + result + ']';\n\t};\n\n\tvar splitAtBMP = function(data) {\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar loneHighSurrogates = [];\n\t\tvar loneLowSurrogates = [];\n\t\tvar bmp = [];\n\t\tvar astral = [];\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar length = data.length;\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.\n\n\t\t\tif (start < HIGH_SURROGATE_MIN) {\n\n\t\t\t\t// The range starts and ends before the high surrogate range.\n\t\t\t\t// E.g. (0, 0x10).\n\t\t\t\tif (end < HIGH_SURROGATE_MIN) {\n\t\t\t\t\tbmp.push(start, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts before the high surrogate range and ends within it.\n\t\t\t\t// E.g. (0, 0xD855).\n\t\t\t\tif (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {\n\t\t\t\t\tbmp.push(start, HIGH_SURROGATE_MIN);\n\t\t\t\t\tloneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts before the high surrogate range and ends in the low\n\t\t\t\t// surrogate range. E.g. (0, 0xDCFF).\n\t\t\t\tif (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {\n\t\t\t\t\tbmp.push(start, HIGH_SURROGATE_MIN);\n\t\t\t\t\tloneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);\n\t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts before the high surrogate range and ends after the\n\t\t\t\t// low surrogate range. E.g. (0, 0x10FFFF).\n\t\t\t\tif (end > LOW_SURROGATE_MAX) {\n\t\t\t\t\tbmp.push(start, HIGH_SURROGATE_MIN);\n\t\t\t\t\tloneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);\n\t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);\n\t\t\t\t\tif (end <= 0xFFFF) {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, end + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);\n\t\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else if (start >= HIGH_SURROGATE_MIN && start <= HIGH_SURROGATE_MAX) {\n\n\t\t\t\t// The range starts and ends in the high surrogate range.\n\t\t\t\t// E.g. (0xD855, 0xD866).\n\t\t\t\tif (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {\n\t\t\t\t\tloneHighSurrogates.push(start, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts in the high surrogate range and ends in the low\n\t\t\t\t// surrogate range. E.g. (0xD855, 0xDCFF).\n\t\t\t\tif (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {\n\t\t\t\t\tloneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);\n\t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts in the high surrogate range and ends after the low\n\t\t\t\t// surrogate range. E.g. (0xD855, 0x10FFFF).\n\t\t\t\tif (end > LOW_SURROGATE_MAX) {\n\t\t\t\t\tloneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);\n\t\t\t\t\tloneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);\n\t\t\t\t\tif (end <= 0xFFFF) {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, end + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);\n\t\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else if (start >= LOW_SURROGATE_MIN && start <= LOW_SURROGATE_MAX) {\n\n\t\t\t\t// The range starts and ends in the low surrogate range.\n\t\t\t\t// E.g. (0xDCFF, 0xDDFF).\n\t\t\t\tif (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {\n\t\t\t\t\tloneLowSurrogates.push(start, end + 1);\n\t\t\t\t}\n\n\t\t\t\t// The range starts in the low surrogate range and ends after the low\n\t\t\t\t// surrogate range. E.g. (0xDCFF, 0x10FFFF).\n\t\t\t\tif (end > LOW_SURROGATE_MAX) {\n\t\t\t\t\tloneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);\n\t\t\t\t\tif (end <= 0xFFFF) {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, end + 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);\n\t\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else if (start > LOW_SURROGATE_MAX && start <= 0xFFFF) {\n\n\t\t\t\t// The range starts and ends after the low surrogate range.\n\t\t\t\t// E.g. (0xFFAA, 0x10FFFF).\n\t\t\t\tif (end <= 0xFFFF) {\n\t\t\t\t\tbmp.push(start, end + 1);\n\t\t\t\t} else {\n\t\t\t\t\tbmp.push(start, 0xFFFF + 1);\n\t\t\t\t\tastral.push(0xFFFF + 1, end + 1);\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// The range starts and ends in the astral range.\n\t\t\t\tastral.push(start, end + 1);\n\n\t\t\t}\n\n\t\t\tindex += 2;\n\t\t}\n\t\treturn {\n\t\t\t'loneHighSurrogates': loneHighSurrogates,\n\t\t\t'loneLowSurrogates': loneLowSurrogates,\n\t\t\t'bmp': bmp,\n\t\t\t'astral': astral\n\t\t};\n\t};\n\n\tvar optimizeSurrogateMappings = function(surrogateMappings) {\n\t\tvar result = [];\n\t\tvar tmpLow = [];\n\t\tvar addLow = false;\n\t\tvar mapping;\n\t\tvar nextMapping;\n\t\tvar highSurrogates;\n\t\tvar lowSurrogates;\n\t\tvar nextHighSurrogates;\n\t\tvar nextLowSurrogates;\n\t\tvar index = -1;\n\t\tvar length = surrogateMappings.length;\n\t\twhile (++index < length) {\n\t\t\tmapping = surrogateMappings[index];\n\t\t\tnextMapping = surrogateMappings[index + 1];\n\t\t\tif (!nextMapping) {\n\t\t\t\tresult.push(mapping);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\thighSurrogates = mapping[0];\n\t\t\tlowSurrogates = mapping[1];\n\t\t\tnextHighSurrogates = nextMapping[0];\n\t\t\tnextLowSurrogates = nextMapping[1];\n\n\t\t\t// Check for identical high surrogate ranges.\n\t\t\ttmpLow = lowSurrogates;\n\t\t\twhile (\n\t\t\t\tnextHighSurrogates &&\n\t\t\t\thighSurrogates[0] == nextHighSurrogates[0] &&\n\t\t\t\thighSurrogates[1] == nextHighSurrogates[1]\n\t\t\t) {\n\t\t\t\t// Merge with the next item.\n\t\t\t\tif (dataIsSingleton(nextLowSurrogates)) {\n\t\t\t\t\ttmpLow = dataAdd(tmpLow, nextLowSurrogates[0]);\n\t\t\t\t} else {\n\t\t\t\t\ttmpLow = dataAddRange(\n\t\t\t\t\t\ttmpLow,\n\t\t\t\t\t\tnextLowSurrogates[0],\n\t\t\t\t\t\tnextLowSurrogates[1] - 1\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t++index;\n\t\t\t\tmapping = surrogateMappings[index];\n\t\t\t\thighSurrogates = mapping[0];\n\t\t\t\tlowSurrogates = mapping[1];\n\t\t\t\tnextMapping = surrogateMappings[index + 1];\n\t\t\t\tnextHighSurrogates = nextMapping && nextMapping[0];\n\t\t\t\tnextLowSurrogates = nextMapping && nextMapping[1];\n\t\t\t\taddLow = true;\n\t\t\t}\n\t\t\tresult.push([\n\t\t\t\thighSurrogates,\n\t\t\t\taddLow ? tmpLow : lowSurrogates\n\t\t\t]);\n\t\t\taddLow = false;\n\t\t}\n\t\treturn optimizeByLowSurrogates(result);\n\t};\n\n\tvar optimizeByLowSurrogates = function(surrogateMappings) {\n\t\tif (surrogateMappings.length == 1) {\n\t\t\treturn surrogateMappings;\n\t\t}\n\t\tvar index = -1;\n\t\tvar innerIndex = -1;\n\t\twhile (++index < surrogateMappings.length) {\n\t\t\tvar mapping = surrogateMappings[index];\n\t\t\tvar lowSurrogates = mapping[1];\n\t\t\tvar lowSurrogateStart = lowSurrogates[0];\n\t\t\tvar lowSurrogateEnd = lowSurrogates[1];\n\t\t\tinnerIndex = index; // Note: the loop starts at the next index.\n\t\t\twhile (++innerIndex < surrogateMappings.length) {\n\t\t\t\tvar otherMapping = surrogateMappings[innerIndex];\n\t\t\t\tvar otherLowSurrogates = otherMapping[1];\n\t\t\t\tvar otherLowSurrogateStart = otherLowSurrogates[0];\n\t\t\t\tvar otherLowSurrogateEnd = otherLowSurrogates[1];\n\t\t\t\tif (\n\t\t\t\t\tlowSurrogateStart == otherLowSurrogateStart &&\n\t\t\t\t\tlowSurrogateEnd == otherLowSurrogateEnd\n\t\t\t\t) {\n\t\t\t\t\t// Add the code points in the other item to this one.\n\t\t\t\t\tif (dataIsSingleton(otherMapping[0])) {\n\t\t\t\t\t\tmapping[0] = dataAdd(mapping[0], otherMapping[0][0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmapping[0] = dataAddRange(\n\t\t\t\t\t\t\tmapping[0],\n\t\t\t\t\t\t\totherMapping[0][0],\n\t\t\t\t\t\t\totherMapping[0][1] - 1\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t// Remove the other, now redundant, item.\n\t\t\t\t\tsurrogateMappings.splice(innerIndex, 1);\n\t\t\t\t\t--innerIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn surrogateMappings;\n\t};\n\n\tvar surrogateSet = function(data) {\n\t\t// Exit early if `data` is an empty set.\n\t\tif (!data.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Iterate over the data per `(start, end)` pair.\n\t\tvar index = 0;\n\t\tvar start;\n\t\tvar end;\n\t\tvar startHigh;\n\t\tvar startLow;\n\t\tvar prevStartHigh = 0;\n\t\tvar prevEndHigh = 0;\n\t\tvar tmpLow = [];\n\t\tvar endHigh;\n\t\tvar endLow;\n\t\tvar surrogateMappings = [];\n\t\tvar length = data.length;\n\t\tvar dataHigh = [];\n\t\twhile (index < length) {\n\t\t\tstart = data[index];\n\t\t\tend = data[index + 1] - 1;\n\n\t\t\tstartHigh = highSurrogate(start);\n\t\t\tstartLow = lowSurrogate(start);\n\t\t\tendHigh = highSurrogate(end);\n\t\t\tendLow = lowSurrogate(end);\n\n\t\t\tvar startsWithLowestLowSurrogate = startLow == LOW_SURROGATE_MIN;\n\t\t\tvar endsWithHighestLowSurrogate = endLow == LOW_SURROGATE_MAX;\n\t\t\tvar complete = false;\n\n\t\t\t// Append the previous high-surrogate-to-low-surrogate mappings.\n\t\t\t// Step 1: `(startHigh, startLow)` to `(startHigh, LOW_SURROGATE_MAX)`.\n\t\t\tif (\n\t\t\t\tstartHigh == endHigh ||\n\t\t\t\tstartsWithLowestLowSurrogate && endsWithHighestLowSurrogate\n\t\t\t) {\n\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t[startHigh, endHigh + 1],\n\t\t\t\t\t[startLow, endLow + 1]\n\t\t\t\t]);\n\t\t\t\tcomplete = true;\n\t\t\t} else {\n\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t[startHigh, startHigh + 1],\n\t\t\t\t\t[startLow, LOW_SURROGATE_MAX + 1]\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t// Step 2: `(startHigh + 1, LOW_SURROGATE_MIN)` to\n\t\t\t// `(endHigh - 1, LOW_SURROGATE_MAX)`.\n\t\t\tif (!complete && startHigh + 1 < endHigh) {\n\t\t\t\tif (endsWithHighestLowSurrogate) {\n\t\t\t\t\t// Combine step 2 and step 3.\n\t\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t\t[startHigh + 1, endHigh + 1],\n\t\t\t\t\t\t[LOW_SURROGATE_MIN, endLow + 1]\n\t\t\t\t\t]);\n\t\t\t\t\tcomplete = true;\n\t\t\t\t} else {\n\t\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t\t[startHigh + 1, endHigh],\n\t\t\t\t\t\t[LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1]\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Step 3. `(endHigh, LOW_SURROGATE_MIN)` to `(endHigh, endLow)`.\n\t\t\tif (!complete) {\n\t\t\t\tsurrogateMappings.push([\n\t\t\t\t\t[endHigh, endHigh + 1],\n\t\t\t\t\t[LOW_SURROGATE_MIN, endLow + 1]\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\tprevStartHigh = startHigh;\n\t\t\tprevEndHigh = endHigh;\n\n\t\t\tindex += 2;\n\t\t}\n\n\t\t// The format of `surrogateMappings` is as follows:\n\t\t//\n\t\t//     [ surrogateMapping1, surrogateMapping2 ]\n\t\t//\n\t\t// i.e.:\n\t\t//\n\t\t//     [\n\t\t//       [ highSurrogates1, lowSurrogates1 ],\n\t\t//       [ highSurrogates2, lowSurrogates2 ]\n\t\t//     ]\n\t\treturn optimizeSurrogateMappings(surrogateMappings);\n\t};\n\n\tvar createSurrogateCharacterClasses = function(surrogateMappings) {\n\t\tvar result = [];\n\t\tforEach(surrogateMappings, function(surrogateMapping) {\n\t\t\tvar highSurrogates = surrogateMapping[0];\n\t\t\tvar lowSurrogates = surrogateMapping[1];\n\t\t\tresult.push(\n\t\t\t\tcreateBMPCharacterClasses(highSurrogates) +\n\t\t\t\tcreateBMPCharacterClasses(lowSurrogates)\n\t\t\t);\n\t\t});\n\t\treturn result.join('|');\n\t};\n\n\tvar createCharacterClassesFromData = function(data, bmpOnly, hasUnicodeFlag) {\n\t\tif (hasUnicodeFlag) {\n\t\t\treturn createUnicodeCharacterClasses(data);\n\t\t}\n\t\tvar result = [];\n\n\t\tvar parts = splitAtBMP(data);\n\t\tvar loneHighSurrogates = parts.loneHighSurrogates;\n\t\tvar loneLowSurrogates = parts.loneLowSurrogates;\n\t\tvar bmp = parts.bmp;\n\t\tvar astral = parts.astral;\n\t\tvar hasAstral = !dataIsEmpty(parts.astral);\n\t\tvar hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates);\n\t\tvar hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates);\n\n\t\tvar surrogateMappings = surrogateSet(astral);\n\n\t\tif (bmpOnly) {\n\t\t\tbmp = dataAddData(bmp, loneHighSurrogates);\n\t\t\thasLoneHighSurrogates = false;\n\t\t\tbmp = dataAddData(bmp, loneLowSurrogates);\n\t\t\thasLoneLowSurrogates = false;\n\t\t}\n\n\t\tif (!dataIsEmpty(bmp)) {\n\t\t\t// The data set contains BMP code points that are not high surrogates\n\t\t\t// needed for astral code points in the set.\n\t\t\tresult.push(createBMPCharacterClasses(bmp));\n\t\t}\n\t\tif (surrogateMappings.length) {\n\t\t\t// The data set contains astral code points; append character classes\n\t\t\t// based on their surrogate pairs.\n\t\t\tresult.push(createSurrogateCharacterClasses(surrogateMappings));\n\t\t}\n\t\t// https://gist.github.com/mathiasbynens/bbe7f870208abcfec860\n\t\tif (hasLoneHighSurrogates) {\n\t\t\tresult.push(\n\t\t\t\tcreateBMPCharacterClasses(loneHighSurrogates) +\n\t\t\t\t// Make sure the high surrogates aren’t part of a surrogate pair.\n\t\t\t\t'(?![\\\\uDC00-\\\\uDFFF])'\n\t\t\t);\n\t\t}\n\t\tif (hasLoneLowSurrogates) {\n\t\t\tresult.push(\n\t\t\t\t// It is not possible to accurately assert the low surrogates aren’t\n\t\t\t\t// part of a surrogate pair, since JavaScript regular expressions do\n\t\t\t\t// not support lookbehind.\n\t\t\t\t'(?:[^\\\\uD800-\\\\uDBFF]|^)' +\n\t\t\t\tcreateBMPCharacterClasses(loneLowSurrogates)\n\t\t\t);\n\t\t}\n\t\treturn result.join('|');\n\t};\n\n\t/*--------------------------------------------------------------------------*/\n\n\t// `regenerate` can be used as a constructor (and new methods can be added to\n\t// its prototype) but also as a regular function, the latter of which is the\n\t// documented and most common usage. For that reason, it’s not capitalized.\n\tvar regenerate = function(value) {\n\t\tif (arguments.length > 1) {\n\t\t\tvalue = slice.call(arguments);\n\t\t}\n\t\tif (this instanceof regenerate) {\n\t\t\tthis.data = [];\n\t\t\treturn value ? this.add(value) : this;\n\t\t}\n\t\treturn (new regenerate).add(value);\n\t};\n\n\tregenerate.version = '1.3.1';\n\n\tvar proto = regenerate.prototype;\n\textend(proto, {\n\t\t'add': function(value) {\n\t\t\tvar $this = this;\n\t\t\tif (value == null) {\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\tif (value instanceof regenerate) {\n\t\t\t\t// Allow passing other Regenerate instances.\n\t\t\t\t$this.data = dataAddData($this.data, value.data);\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tvalue = slice.call(arguments);\n\t\t\t}\n\t\t\tif (isArray(value)) {\n\t\t\t\tforEach(value, function(item) {\n\t\t\t\t\t$this.add(item);\n\t\t\t\t});\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\t$this.data = dataAdd(\n\t\t\t\t$this.data,\n\t\t\t\tisNumber(value) ? value : symbolToCodePoint(value)\n\t\t\t);\n\t\t\treturn $this;\n\t\t},\n\t\t'remove': function(value) {\n\t\t\tvar $this = this;\n\t\t\tif (value == null) {\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\tif (value instanceof regenerate) {\n\t\t\t\t// Allow passing other Regenerate instances.\n\t\t\t\t$this.data = dataRemoveData($this.data, value.data);\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tvalue = slice.call(arguments);\n\t\t\t}\n\t\t\tif (isArray(value)) {\n\t\t\t\tforEach(value, function(item) {\n\t\t\t\t\t$this.remove(item);\n\t\t\t\t});\n\t\t\t\treturn $this;\n\t\t\t}\n\t\t\t$this.data = dataRemove(\n\t\t\t\t$this.data,\n\t\t\t\tisNumber(value) ? value : symbolToCodePoint(value)\n\t\t\t);\n\t\t\treturn $this;\n\t\t},\n\t\t'addRange': function(start, end) {\n\t\t\tvar $this = this;\n\t\t\t$this.data = dataAddRange($this.data,\n\t\t\t\tisNumber(start) ? start : symbolToCodePoint(start),\n\t\t\t\tisNumber(end) ? end : symbolToCodePoint(end)\n\t\t\t);\n\t\t\treturn $this;\n\t\t},\n\t\t'removeRange': function(start, end) {\n\t\t\tvar $this = this;\n\t\t\tvar startCodePoint = isNumber(start) ? start : symbolToCodePoint(start);\n\t\t\tvar endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);\n\t\t\t$this.data = dataRemoveRange(\n\t\t\t\t$this.data,\n\t\t\t\tstartCodePoint,\n\t\t\t\tendCodePoint\n\t\t\t);\n\t\t\treturn $this;\n\t\t},\n\t\t'intersection': function(argument) {\n\t\t\tvar $this = this;\n\t\t\t// Allow passing other Regenerate instances.\n\t\t\t// TODO: Optimize this by writing and using `dataIntersectionData()`.\n\t\t\tvar array = argument instanceof regenerate ?\n\t\t\t\tdataToArray(argument.data) :\n\t\t\t\targument;\n\t\t\t$this.data = dataIntersection($this.data, array);\n\t\t\treturn $this;\n\t\t},\n\t\t'contains': function(codePoint) {\n\t\t\treturn dataContains(\n\t\t\t\tthis.data,\n\t\t\t\tisNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint)\n\t\t\t);\n\t\t},\n\t\t'clone': function() {\n\t\t\tvar set = new regenerate;\n\t\t\tset.data = this.data.slice(0);\n\t\t\treturn set;\n\t\t},\n\t\t'toString': function(options) {\n\t\t\tvar result = createCharacterClassesFromData(\n\t\t\t\tthis.data,\n\t\t\t\toptions ? options.bmpOnly : false,\n\t\t\t\toptions ? options.hasUnicodeFlag : false\n\t\t\t);\n\t\t\tif (!result) {\n\t\t\t\t// For an empty set, return something that can be inserted `/here/` to\n\t\t\t\t// form a valid regular expression. Avoid `(?:)` since that matches the\n\t\t\t\t// empty string.\n\t\t\t\treturn '[]';\n\t\t\t}\n\t\t\t// Use `\\0` instead of `\\x00` where possible.\n\t\t\treturn result.replace(regexNull, '\\\\0$1');\n\t\t},\n\t\t'toRegExp': function(flags) {\n\t\t\tvar pattern = this.toString(\n\t\t\t\tflags && flags.indexOf('u') != -1 ?\n\t\t\t\t\t{ 'hasUnicodeFlag': true } :\n\t\t\t\t\tnull\n\t\t\t);\n\t\t\treturn RegExp(pattern, flags || '');\n\t\t},\n\t\t'valueOf': function() { // Note: `valueOf` is aliased as `toArray`.\n\t\t\treturn dataToArray(this.data);\n\t\t}\n\t});\n\n\tproto.toArray = proto.valueOf;\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn regenerate;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = regenerate;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfreeExports.regenerate = regenerate;\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.regenerate = regenerate;\n\t}\n\n}(this));\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/regenerate/regenerate.js","// Generated by `/scripts/character-class-escape-sets.js`. Do not edit.\nvar regenerate = require('regenerate');\n\nexports.REGULAR = {\n\t'd': regenerate()\n\t\t.addRange(0x30, 0x39),\n\t'D': regenerate()\n\t\t.addRange(0x0, 0x2F)\n\t\t.addRange(0x3A, 0xFFFF),\n\t's': regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)\n\t\t.addRange(0x9, 0xD)\n\t\t.addRange(0x2000, 0x200A)\n\t\t.addRange(0x2028, 0x2029),\n\t'S': regenerate()\n\t\t.addRange(0x0, 0x8)\n\t\t.addRange(0xE, 0x1F)\n\t\t.addRange(0x21, 0x9F)\n\t\t.addRange(0xA1, 0x167F)\n\t\t.addRange(0x1681, 0x1FFF)\n\t\t.addRange(0x200B, 0x2027)\n\t\t.addRange(0x202A, 0x202E)\n\t\t.addRange(0x2030, 0x205E)\n\t\t.addRange(0x2060, 0x2FFF)\n\t\t.addRange(0x3001, 0xFEFE)\n\t\t.addRange(0xFF00, 0xFFFF),\n\t'w': regenerate(0x5F)\n\t\t.addRange(0x30, 0x39)\n\t\t.addRange(0x41, 0x5A)\n\t\t.addRange(0x61, 0x7A),\n\t'W': regenerate(0x60)\n\t\t.addRange(0x0, 0x2F)\n\t\t.addRange(0x3A, 0x40)\n\t\t.addRange(0x5B, 0x5E)\n\t\t.addRange(0x7B, 0xFFFF)\n};\n\nexports.UNICODE = {\n\t'd': regenerate()\n\t\t.addRange(0x30, 0x39),\n\t'D': regenerate()\n\t\t.addRange(0x0, 0x2F)\n\t\t.addRange(0x3A, 0x10FFFF),\n\t's': regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)\n\t\t.addRange(0x9, 0xD)\n\t\t.addRange(0x2000, 0x200A)\n\t\t.addRange(0x2028, 0x2029),\n\t'S': regenerate()\n\t\t.addRange(0x0, 0x8)\n\t\t.addRange(0xE, 0x1F)\n\t\t.addRange(0x21, 0x9F)\n\t\t.addRange(0xA1, 0x167F)\n\t\t.addRange(0x1681, 0x1FFF)\n\t\t.addRange(0x200B, 0x2027)\n\t\t.addRange(0x202A, 0x202E)\n\t\t.addRange(0x2030, 0x205E)\n\t\t.addRange(0x2060, 0x2FFF)\n\t\t.addRange(0x3001, 0xFEFE)\n\t\t.addRange(0xFF00, 0x10FFFF),\n\t'w': regenerate(0x5F)\n\t\t.addRange(0x30, 0x39)\n\t\t.addRange(0x41, 0x5A)\n\t\t.addRange(0x61, 0x7A),\n\t'W': regenerate(0x60)\n\t\t.addRange(0x0, 0x2F)\n\t\t.addRange(0x3A, 0x40)\n\t\t.addRange(0x5B, 0x5E)\n\t\t.addRange(0x7B, 0x10FFFF)\n};\n\nexports.UNICODE_IGNORE_CASE = {\n\t'd': regenerate()\n\t\t.addRange(0x30, 0x39),\n\t'D': regenerate()\n\t\t.addRange(0x0, 0x2F)\n\t\t.addRange(0x3A, 0x10FFFF),\n\t's': regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)\n\t\t.addRange(0x9, 0xD)\n\t\t.addRange(0x2000, 0x200A)\n\t\t.addRange(0x2028, 0x2029),\n\t'S': regenerate()\n\t\t.addRange(0x0, 0x8)\n\t\t.addRange(0xE, 0x1F)\n\t\t.addRange(0x21, 0x9F)\n\t\t.addRange(0xA1, 0x167F)\n\t\t.addRange(0x1681, 0x1FFF)\n\t\t.addRange(0x200B, 0x2027)\n\t\t.addRange(0x202A, 0x202E)\n\t\t.addRange(0x2030, 0x205E)\n\t\t.addRange(0x2060, 0x2FFF)\n\t\t.addRange(0x3001, 0xFEFE)\n\t\t.addRange(0xFF00, 0x10FFFF),\n\t'w': regenerate(0x5F, 0x17F, 0x212A)\n\t\t.addRange(0x30, 0x39)\n\t\t.addRange(0x41, 0x5A)\n\t\t.addRange(0x61, 0x7A),\n\t'W': regenerate(0x4B, 0x53, 0x60)\n\t\t.addRange(0x0, 0x2F)\n\t\t.addRange(0x3A, 0x40)\n\t\t.addRange(0x5B, 0x5E)\n\t\t.addRange(0x7B, 0x10FFFF)\n};\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/regexpu-core/data/character-class-escape-sets.js","// regjsparser\n//\n// ==================================================================\n//\n// See ECMA-262 Standard: 15.10.1\n//\n// NOTE: The ECMA-262 standard uses the term \"Assertion\" for /^/. Here the\n//   term \"Anchor\" is used.\n//\n// Pattern ::\n//      Disjunction\n//\n// Disjunction ::\n//      Alternative\n//      Alternative | Disjunction\n//\n// Alternative ::\n//      [empty]\n//      Alternative Term\n//\n// Term ::\n//      Anchor\n//      Atom\n//      Atom Quantifier\n//\n// Anchor ::\n//      ^\n//      $\n//      \\ b\n//      \\ B\n//      ( ? = Disjunction )\n//      ( ? ! Disjunction )\n//\n// Quantifier ::\n//      QuantifierPrefix\n//      QuantifierPrefix ?\n//\n// QuantifierPrefix ::\n//      *\n//      +\n//      ?\n//      { DecimalDigits }\n//      { DecimalDigits , }\n//      { DecimalDigits , DecimalDigits }\n//\n// Atom ::\n//      PatternCharacter\n//      .\n//      \\ AtomEscape\n//      CharacterClass\n//      ( Disjunction )\n//      ( ? : Disjunction )\n//\n// PatternCharacter ::\n//      SourceCharacter but not any of: ^ $ \\ . * + ? ( ) [ ] { } |\n//\n// AtomEscape ::\n//      DecimalEscape\n//      CharacterEscape\n//      CharacterClassEscape\n//\n// CharacterEscape[U] ::\n//      ControlEscape\n//      c ControlLetter\n//      HexEscapeSequence\n//      RegExpUnicodeEscapeSequence[?U] (ES6)\n//      IdentityEscape[?U]\n//\n// ControlEscape ::\n//      one of f n r t v\n// ControlLetter ::\n//      one of\n//          a b c d e f g h i j k l m n o p q r s t u v w x y z\n//          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n//\n// IdentityEscape ::\n//      SourceCharacter but not IdentifierPart\n//      <ZWJ>\n//      <ZWNJ>\n//\n// DecimalEscape ::\n//      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n//\n// CharacterClassEscape ::\n//      one of d D s S w W\n//\n// CharacterClass ::\n//      [ [lookahead ∉ {^}] ClassRanges ]\n//      [ ^ ClassRanges ]\n//\n// ClassRanges ::\n//      [empty]\n//      NonemptyClassRanges\n//\n// NonemptyClassRanges ::\n//      ClassAtom\n//      ClassAtom NonemptyClassRangesNoDash\n//      ClassAtom - ClassAtom ClassRanges\n//\n// NonemptyClassRangesNoDash ::\n//      ClassAtom\n//      ClassAtomNoDash NonemptyClassRangesNoDash\n//      ClassAtomNoDash - ClassAtom ClassRanges\n//\n// ClassAtom ::\n//      -\n//      ClassAtomNoDash\n//\n// ClassAtomNoDash ::\n//      SourceCharacter but not one of \\ or ] or -\n//      \\ ClassEscape\n//\n// ClassEscape ::\n//      DecimalEscape\n//      b\n//      CharacterEscape\n//      CharacterClassEscape\n\n(function() {\n\n  function parse(str, flags) {\n    function addRaw(node) {\n      node.raw = str.substring(node.range[0], node.range[1]);\n      return node;\n    }\n\n    function updateRawStart(node, start) {\n      node.range[0] = start;\n      return addRaw(node);\n    }\n\n    function createAnchor(kind, rawLength) {\n      return addRaw({\n        type: 'anchor',\n        kind: kind,\n        range: [\n          pos - rawLength,\n          pos\n        ]\n      });\n    }\n\n    function createValue(kind, codePoint, from, to) {\n      return addRaw({\n        type: 'value',\n        kind: kind,\n        codePoint: codePoint,\n        range: [from, to]\n      });\n    }\n\n    function createEscaped(kind, codePoint, value, fromOffset) {\n      fromOffset = fromOffset || 0;\n      return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);\n    }\n\n    function createCharacter(matches) {\n      var _char = matches[0];\n      var first = _char.charCodeAt(0);\n      if (hasUnicodeFlag) {\n        var second;\n        if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {\n          second = lookahead().charCodeAt(0);\n          if (second >= 0xDC00 && second <= 0xDFFF) {\n            // Unicode surrogate pair\n            pos++;\n            return createValue(\n                'symbol',\n                (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000,\n                pos - 2, pos);\n          }\n        }\n      }\n      return createValue('symbol', first, pos - 1, pos);\n    }\n\n    function createDisjunction(alternatives, from, to) {\n      return addRaw({\n        type: 'disjunction',\n        body: alternatives,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createDot() {\n      return addRaw({\n        type: 'dot',\n        range: [\n          pos - 1,\n          pos\n        ]\n      });\n    }\n\n    function createCharacterClassEscape(value) {\n      return addRaw({\n        type: 'characterClassEscape',\n        value: value,\n        range: [\n          pos - 2,\n          pos\n        ]\n      });\n    }\n\n    function createReference(matchIndex) {\n      return addRaw({\n        type: 'reference',\n        matchIndex: parseInt(matchIndex, 10),\n        range: [\n          pos - 1 - matchIndex.length,\n          pos\n        ]\n      });\n    }\n\n    function createGroup(behavior, disjunction, from, to) {\n      return addRaw({\n        type: 'group',\n        behavior: behavior,\n        body: disjunction,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createQuantifier(min, max, from, to) {\n      if (to == null) {\n        from = pos - 1;\n        to = pos;\n      }\n\n      return addRaw({\n        type: 'quantifier',\n        min: min,\n        max: max,\n        greedy: true,\n        body: null, // set later on\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createAlternative(terms, from, to) {\n      return addRaw({\n        type: 'alternative',\n        body: terms,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createCharacterClass(classRanges, negative, from, to) {\n      return addRaw({\n        type: 'characterClass',\n        body: classRanges,\n        negative: negative,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function createClassRange(min, max, from, to) {\n      // See 15.10.2.15:\n      if (min.codePoint > max.codePoint) {\n        bail('invalid range in character class', min.raw + '-' + max.raw, from, to);\n      }\n\n      return addRaw({\n        type: 'characterClassRange',\n        min: min,\n        max: max,\n        range: [\n          from,\n          to\n        ]\n      });\n    }\n\n    function flattenBody(body) {\n      if (body.type === 'alternative') {\n        return body.body;\n      } else {\n        return [body];\n      }\n    }\n\n    function isEmpty(obj) {\n      return obj.type === 'empty';\n    }\n\n    function incr(amount) {\n      amount = (amount || 1);\n      var res = str.substring(pos, pos + amount);\n      pos += (amount || 1);\n      return res;\n    }\n\n    function skip(value) {\n      if (!match(value)) {\n        bail('character', value);\n      }\n    }\n\n    function match(value) {\n      if (str.indexOf(value, pos) === pos) {\n        return incr(value.length);\n      }\n    }\n\n    function lookahead() {\n      return str[pos];\n    }\n\n    function current(value) {\n      return str.indexOf(value, pos) === pos;\n    }\n\n    function next(value) {\n      return str[pos + 1] === value;\n    }\n\n    function matchReg(regExp) {\n      var subStr = str.substring(pos);\n      var res = subStr.match(regExp);\n      if (res) {\n        res.range = [];\n        res.range[0] = pos;\n        incr(res[0].length);\n        res.range[1] = pos;\n      }\n      return res;\n    }\n\n    function parseDisjunction() {\n      // Disjunction ::\n      //      Alternative\n      //      Alternative | Disjunction\n      var res = [], from = pos;\n      res.push(parseAlternative());\n\n      while (match('|')) {\n        res.push(parseAlternative());\n      }\n\n      if (res.length === 1) {\n        return res[0];\n      }\n\n      return createDisjunction(res, from, pos);\n    }\n\n    function parseAlternative() {\n      var res = [], from = pos;\n      var term;\n\n      // Alternative ::\n      //      [empty]\n      //      Alternative Term\n      while (term = parseTerm()) {\n        res.push(term);\n      }\n\n      if (res.length === 1) {\n        return res[0];\n      }\n\n      return createAlternative(res, from, pos);\n    }\n\n    function parseTerm() {\n      // Term ::\n      //      Anchor\n      //      Atom\n      //      Atom Quantifier\n\n      if (pos >= str.length || current('|') || current(')')) {\n        return null; /* Means: The term is empty */\n      }\n\n      var anchor = parseAnchor();\n\n      if (anchor) {\n        return anchor;\n      }\n\n      var atom = parseAtom();\n      if (!atom) {\n        bail('Expected atom');\n      }\n      var quantifier = parseQuantifier() || false;\n      if (quantifier) {\n        quantifier.body = flattenBody(atom);\n        // The quantifier contains the atom. Therefore, the beginning of the\n        // quantifier range is given by the beginning of the atom.\n        updateRawStart(quantifier, atom.range[0]);\n        return quantifier;\n      }\n      return atom;\n    }\n\n    function parseGroup(matchA, typeA, matchB, typeB) {\n      var type = null, from = pos;\n\n      if (match(matchA)) {\n        type = typeA;\n      } else if (match(matchB)) {\n        type = typeB;\n      } else {\n        return false;\n      }\n\n      var body = parseDisjunction();\n      if (!body) {\n        bail('Expected disjunction');\n      }\n      skip(')');\n      var group = createGroup(type, flattenBody(body), from, pos);\n\n      if (type == 'normal') {\n        // Keep track of the number of closed groups. This is required for\n        // parseDecimalEscape(). In case the string is parsed a second time the\n        // value already holds the total count and no incrementation is required.\n        if (firstIteration) {\n          closedCaptureCounter++;\n        }\n      }\n      return group;\n    }\n\n    function parseAnchor() {\n      // Anchor ::\n      //      ^\n      //      $\n      //      \\ b\n      //      \\ B\n      //      ( ? = Disjunction )\n      //      ( ? ! Disjunction )\n      var res, from = pos;\n\n      if (match('^')) {\n        return createAnchor('start', 1 /* rawLength */);\n      } else if (match('$')) {\n        return createAnchor('end', 1 /* rawLength */);\n      } else if (match('\\\\b')) {\n        return createAnchor('boundary', 2 /* rawLength */);\n      } else if (match('\\\\B')) {\n        return createAnchor('not-boundary', 2 /* rawLength */);\n      } else {\n        return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');\n      }\n    }\n\n    function parseQuantifier() {\n      // Quantifier ::\n      //      QuantifierPrefix\n      //      QuantifierPrefix ?\n      //\n      // QuantifierPrefix ::\n      //      *\n      //      +\n      //      ?\n      //      { DecimalDigits }\n      //      { DecimalDigits , }\n      //      { DecimalDigits , DecimalDigits }\n\n      var res, from = pos;\n      var quantifier;\n      var min, max;\n\n      if (match('*')) {\n        quantifier = createQuantifier(0);\n      }\n      else if (match('+')) {\n        quantifier = createQuantifier(1);\n      }\n      else if (match('?')) {\n        quantifier = createQuantifier(0, 1);\n      }\n      else if (res = matchReg(/^\\{([0-9]+)\\}/)) {\n        min = parseInt(res[1], 10);\n        quantifier = createQuantifier(min, min, res.range[0], res.range[1]);\n      }\n      else if (res = matchReg(/^\\{([0-9]+),\\}/)) {\n        min = parseInt(res[1], 10);\n        quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);\n      }\n      else if (res = matchReg(/^\\{([0-9]+),([0-9]+)\\}/)) {\n        min = parseInt(res[1], 10);\n        max = parseInt(res[2], 10);\n        if (min > max) {\n          bail('numbers out of order in {} quantifier', '', from, pos);\n        }\n        quantifier = createQuantifier(min, max, res.range[0], res.range[1]);\n      }\n\n      if (quantifier) {\n        if (match('?')) {\n          quantifier.greedy = false;\n          quantifier.range[1] += 1;\n        }\n      }\n\n      return quantifier;\n    }\n\n    function parseAtom() {\n      // Atom ::\n      //      PatternCharacter\n      //      .\n      //      \\ AtomEscape\n      //      CharacterClass\n      //      ( Disjunction )\n      //      ( ? : Disjunction )\n\n      var res;\n\n      // jviereck: allow ']', '}' here as well to be compatible with browser's\n      //   implementations: ']'.match(/]/);\n      // if (res = matchReg(/^[^^$\\\\.*+?()[\\]{}|]/)) {\n      if (res = matchReg(/^[^^$\\\\.*+?(){[|]/)) {\n        //      PatternCharacter\n        return createCharacter(res);\n      }\n      else if (match('.')) {\n        //      .\n        return createDot();\n      }\n      else if (match('\\\\')) {\n        //      \\ AtomEscape\n        res = parseAtomEscape();\n        if (!res) {\n          bail('atomEscape');\n        }\n        return res;\n      }\n      else if (res = parseCharacterClass()) {\n        return res;\n      }\n      else {\n        //      ( Disjunction )\n        //      ( ? : Disjunction )\n        return parseGroup('(?:', 'ignore', '(', 'normal');\n      }\n    }\n\n    function parseUnicodeSurrogatePairEscape(firstEscape) {\n      if (hasUnicodeFlag) {\n        var first, second;\n        if (firstEscape.kind == 'unicodeEscape' &&\n          (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF &&\n          current('\\\\') && next('u') ) {\n          var prevPos = pos;\n          pos++;\n          var secondEscape = parseClassEscape();\n          if (secondEscape.kind == 'unicodeEscape' &&\n            (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {\n            // Unicode surrogate pair\n            firstEscape.range[1] = secondEscape.range[1];\n            firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            firstEscape.type = 'value';\n            firstEscape.kind = 'unicodeCodePointEscape';\n            addRaw(firstEscape);\n          }\n          else {\n            pos = prevPos;\n          }\n        }\n      }\n      return firstEscape;\n    }\n\n    function parseClassEscape() {\n      return parseAtomEscape(true);\n    }\n\n    function parseAtomEscape(insideCharacterClass) {\n      // AtomEscape ::\n      //      DecimalEscape\n      //      CharacterEscape\n      //      CharacterClassEscape\n\n      var res, from = pos;\n\n      res = parseDecimalEscape();\n      if (res) {\n        return res;\n      }\n\n      // For ClassEscape\n      if (insideCharacterClass) {\n        if (match('b')) {\n          // 15.10.2.19\n          // The production ClassEscape :: b evaluates by returning the\n          // CharSet containing the one character <BS> (Unicode value 0008).\n          return createEscaped('singleEscape', 0x0008, '\\\\b');\n        } else if (match('B')) {\n          bail('\\\\B not possible inside of CharacterClass', '', from);\n        }\n      }\n\n      res = parseCharacterEscape();\n\n      return res;\n    }\n\n\n    function parseDecimalEscape() {\n      // DecimalEscape ::\n      //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n      //      CharacterClassEscape :: one of d D s S w W\n\n      var res, match;\n\n      if (res = matchReg(/^(?!0)\\d+/)) {\n        match = res[0];\n        var refIdx = parseInt(res[0], 10);\n        if (refIdx <= closedCaptureCounter) {\n          // If the number is smaller than the normal-groups found so\n          // far, then it is a reference...\n          return createReference(res[0]);\n        } else {\n          // ... otherwise it needs to be interpreted as a octal (if the\n          // number is in an octal format). If it is NOT octal format,\n          // then the slash is ignored and the number is matched later\n          // as normal characters.\n\n          // Recall the negative decision to decide if the input must be parsed\n          // a second time with the total normal-groups.\n          backrefDenied.push(refIdx);\n\n          // Reset the position again, as maybe only parts of the previous\n          // matched numbers are actual octal numbers. E.g. in '019' only\n          // the '01' should be matched.\n          incr(-res[0].length);\n          if (res = matchReg(/^[0-7]{1,3}/)) {\n            return createEscaped('octal', parseInt(res[0], 8), res[0], 1);\n          } else {\n            // If we end up here, we have a case like /\\91/. Then the\n            // first slash is to be ignored and the 9 & 1 to be treated\n            // like ordinary characters. Create a character for the\n            // first number only here - other number-characters\n            // (if available) will be matched later.\n            res = createCharacter(matchReg(/^[89]/));\n            return updateRawStart(res, res.range[0] - 1);\n          }\n        }\n      }\n      // Only allow octal numbers in the following. All matched numbers start\n      // with a zero (if the do not, the previous if-branch is executed).\n      // If the number is not octal format and starts with zero (e.g. `091`)\n      // then only the zeros `0` is treated here and the `91` are ordinary\n      // characters.\n      // Example:\n      //   /\\091/.exec('\\091')[0].length === 3\n      else if (res = matchReg(/^[0-7]{1,3}/)) {\n        match = res[0];\n        if (/^0{1,3}$/.test(match)) {\n          // If they are all zeros, then only take the first one.\n          return createEscaped('null', 0x0000, '0', match.length + 1);\n        } else {\n          return createEscaped('octal', parseInt(match, 8), match, 1);\n        }\n      } else if (res = matchReg(/^[dDsSwW]/)) {\n        return createCharacterClassEscape(res[0]);\n      }\n      return false;\n    }\n\n    function parseCharacterEscape() {\n      // CharacterEscape ::\n      //      ControlEscape\n      //      c ControlLetter\n      //      HexEscapeSequence\n      //      UnicodeEscapeSequence\n      //      IdentityEscape\n\n      var res;\n      if (res = matchReg(/^[fnrtv]/)) {\n        // ControlEscape\n        var codePoint = 0;\n        switch (res[0]) {\n          case 't': codePoint = 0x009; break;\n          case 'n': codePoint = 0x00A; break;\n          case 'v': codePoint = 0x00B; break;\n          case 'f': codePoint = 0x00C; break;\n          case 'r': codePoint = 0x00D; break;\n        }\n        return createEscaped('singleEscape', codePoint, '\\\\' + res[0]);\n      } else if (res = matchReg(/^c([a-zA-Z])/)) {\n        // c ControlLetter\n        return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);\n      } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {\n        // HexEscapeSequence\n        return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);\n      } else if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {\n        // UnicodeEscapeSequence\n        return parseUnicodeSurrogatePairEscape(\n          createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2)\n        );\n      } else if (hasUnicodeFlag && (res = matchReg(/^u\\{([0-9a-fA-F]+)\\}/))) {\n        // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)\n        return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);\n      } else {\n        // IdentityEscape\n        return parseIdentityEscape();\n      }\n    }\n\n    // Taken from the Esprima parser.\n    function isIdentifierPart(ch) {\n      // Generated by `tools/generate-identifier-regex.js`.\n      var NonAsciiIdentifierPart = new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]');\n\n      return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)\n        (ch >= 65 && ch <= 90) ||         // A..Z\n        (ch >= 97 && ch <= 122) ||        // a..z\n        (ch >= 48 && ch <= 57) ||         // 0..9\n        (ch === 92) ||                    // \\ (backslash)\n        ((ch >= 0x80) && NonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n    }\n\n    function parseIdentityEscape() {\n      // IdentityEscape ::\n      //      SourceCharacter but not IdentifierPart\n      //      <ZWJ>\n      //      <ZWNJ>\n\n      var ZWJ = '\\u200C';\n      var ZWNJ = '\\u200D';\n\n      var tmp;\n\n      if (!isIdentifierPart(lookahead())) {\n        tmp = incr();\n        return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);\n      }\n\n      if (match(ZWJ)) {\n        // <ZWJ>\n        return createEscaped('identifier', 0x200C, ZWJ);\n      } else if (match(ZWNJ)) {\n        // <ZWNJ>\n        return createEscaped('identifier', 0x200D, ZWNJ);\n      }\n\n      return null;\n    }\n\n    function parseCharacterClass() {\n      // CharacterClass ::\n      //      [ [lookahead ∉ {^}] ClassRanges ]\n      //      [ ^ ClassRanges ]\n\n      var res, from = pos;\n      if (res = matchReg(/^\\[\\^/)) {\n        res = parseClassRanges();\n        skip(']');\n        return createCharacterClass(res, true, from, pos);\n      } else if (match('[')) {\n        res = parseClassRanges();\n        skip(']');\n        return createCharacterClass(res, false, from, pos);\n      }\n\n      return null;\n    }\n\n    function parseClassRanges() {\n      // ClassRanges ::\n      //      [empty]\n      //      NonemptyClassRanges\n\n      var res;\n      if (current(']')) {\n        // Empty array means nothing insinde of the ClassRange.\n        return [];\n      } else {\n        res = parseNonemptyClassRanges();\n        if (!res) {\n          bail('nonEmptyClassRanges');\n        }\n        return res;\n      }\n    }\n\n    function parseHelperClassRanges(atom) {\n      var from, to, res;\n      if (current('-') && !next(']')) {\n        // ClassAtom - ClassAtom ClassRanges\n        skip('-');\n\n        res = parseClassAtom();\n        if (!res) {\n          bail('classAtom');\n        }\n        to = pos;\n        var classRanges = parseClassRanges();\n        if (!classRanges) {\n          bail('classRanges');\n        }\n        from = atom.range[0];\n        if (classRanges.type === 'empty') {\n          return [createClassRange(atom, res, from, to)];\n        }\n        return [createClassRange(atom, res, from, to)].concat(classRanges);\n      }\n\n      res = parseNonemptyClassRangesNoDash();\n      if (!res) {\n        bail('nonEmptyClassRangesNoDash');\n      }\n\n      return [atom].concat(res);\n    }\n\n    function parseNonemptyClassRanges() {\n      // NonemptyClassRanges ::\n      //      ClassAtom\n      //      ClassAtom NonemptyClassRangesNoDash\n      //      ClassAtom - ClassAtom ClassRanges\n\n      var atom = parseClassAtom();\n      if (!atom) {\n        bail('classAtom');\n      }\n\n      if (current(']')) {\n        // ClassAtom\n        return [atom];\n      }\n\n      // ClassAtom NonemptyClassRangesNoDash\n      // ClassAtom - ClassAtom ClassRanges\n      return parseHelperClassRanges(atom);\n    }\n\n    function parseNonemptyClassRangesNoDash() {\n      // NonemptyClassRangesNoDash ::\n      //      ClassAtom\n      //      ClassAtomNoDash NonemptyClassRangesNoDash\n      //      ClassAtomNoDash - ClassAtom ClassRanges\n\n      var res = parseClassAtom();\n      if (!res) {\n        bail('classAtom');\n      }\n      if (current(']')) {\n        //      ClassAtom\n        return res;\n      }\n\n      // ClassAtomNoDash NonemptyClassRangesNoDash\n      // ClassAtomNoDash - ClassAtom ClassRanges\n      return parseHelperClassRanges(res);\n    }\n\n    function parseClassAtom() {\n      // ClassAtom ::\n      //      -\n      //      ClassAtomNoDash\n      if (match('-')) {\n        return createCharacter('-');\n      } else {\n        return parseClassAtomNoDash();\n      }\n    }\n\n    function parseClassAtomNoDash() {\n      // ClassAtomNoDash ::\n      //      SourceCharacter but not one of \\ or ] or -\n      //      \\ ClassEscape\n\n      var res;\n      if (res = matchReg(/^[^\\\\\\]-]/)) {\n        return createCharacter(res[0]);\n      } else if (match('\\\\')) {\n        res = parseClassEscape();\n        if (!res) {\n          bail('classEscape');\n        }\n\n        return parseUnicodeSurrogatePairEscape(res);\n      }\n    }\n\n    function bail(message, details, from, to) {\n      from = from == null ? pos : from;\n      to = to == null ? from : to;\n\n      var contextStart = Math.max(0, from - 10);\n      var contextEnd = Math.min(to + 10, str.length);\n\n      // Output a bit of context and a line pointing to where our error is.\n      //\n      // We are assuming that there are no actual newlines in the content as this is a regular expression.\n      var context = '    ' + str.substring(contextStart, contextEnd);\n      var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';\n\n      throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\\n' + context + '\\n' + pointer);\n    }\n\n    var backrefDenied = [];\n    var closedCaptureCounter = 0;\n    var firstIteration = true;\n    var hasUnicodeFlag = (flags || \"\").indexOf(\"u\") !== -1;\n    var pos = 0;\n\n    // Convert the input to a string and treat the empty string special.\n    str = String(str);\n    if (str === '') {\n      str = '(?:)';\n    }\n\n    var result = parseDisjunction();\n\n    if (result.range[1] !== str.length) {\n      bail('Could not parse entire input - got stuck', '', result.range[1]);\n    }\n\n    // The spec requires to interpret the `\\2` in `/\\2()()/` as backreference.\n    // As the parser collects the number of capture groups as the string is\n    // parsed it is impossible to make these decisions at the point when the\n    // `\\2` is handled. In case the local decision turns out to be wrong after\n    // the parsing has finished, the input string is parsed a second time with\n    // the total number of capture groups set.\n    //\n    // SEE: https://github.com/jviereck/regjsparser/issues/70\n    for (var i = 0; i < backrefDenied.length; i++) {\n      if (backrefDenied[i] <= closedCaptureCounter) {\n        // Parse the input a second time.\n        pos = 0;\n        firstIteration = false;\n        return parseDisjunction();\n      }\n    }\n\n    return result;\n  }\n\n  var regjsparser = {\n    parse: parse\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = regjsparser;\n  } else {\n    window.regjsparser = regjsparser;\n  }\n\n}());\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/regjsparser/parser.js","/*!\n * RegJSGen\n * Copyright 2014 Benjamin Tan <https://d10.github.io/>\n * Available under MIT license <http://d10.mit-license.org/>\n */\n;(function() {\n  'use strict';\n\n  /** Used to determine if values are of the language type `Object` */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Backup possible global object */\n  var oldRoot = root;\n\n  /** Detect free variable `exports` */\n  var freeExports = objectTypes[typeof exports] && exports;\n\n  /** Detect free variable `module` */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /*! Based on https://mths.be/fromcodepoint v0.2.0 by @mathias */\n\n  var stringFromCharCode = String.fromCharCode;\n  var floor = Math.floor;\n  function fromCodePoint() {\n    var MAX_SIZE = 0x4000;\n    var codeUnits = [];\n    var highSurrogate;\n    var lowSurrogate;\n    var index = -1;\n    var length = arguments.length;\n    if (!length) {\n      return '';\n    }\n    var result = '';\n    while (++index < length) {\n      var codePoint = Number(arguments[index]);\n      if (\n        !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n        codePoint < 0 || // not a valid Unicode code point\n        codePoint > 0x10FFFF || // not a valid Unicode code point\n        floor(codePoint) != codePoint // not an integer\n      ) {\n        throw RangeError('Invalid code point: ' + codePoint);\n      }\n      if (codePoint <= 0xFFFF) {\n        // BMP code point\n        codeUnits.push(codePoint);\n      } else {\n        // Astral code point; split in surrogate halves\n        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        codePoint -= 0x10000;\n        highSurrogate = (codePoint >> 10) + 0xD800;\n        lowSurrogate = (codePoint % 0x400) + 0xDC00;\n        codeUnits.push(highSurrogate, lowSurrogate);\n      }\n      if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n        result += stringFromCharCode.apply(null, codeUnits);\n        codeUnits.length = 0;\n      }\n    }\n    return result;\n  }\n\n  function assertType(type, expected) {\n    if (expected.indexOf('|') == -1) {\n      if (type == expected) {\n        return;\n      }\n\n      throw Error('Invalid node type: ' + type);\n    }\n\n    expected = assertType.hasOwnProperty(expected)\n      ? assertType[expected]\n      : (assertType[expected] = RegExp('^(?:' + expected + ')$'));\n\n    if (expected.test(type)) {\n      return;\n    }\n\n    throw Error('Invalid node type: ' + type);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generate(node) {\n    var type = node.type;\n\n    if (generate.hasOwnProperty(type) && typeof generate[type] == 'function') {\n      return generate[type](node);\n    }\n\n    throw Error('Invalid node type: ' + type);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generateAlternative(node) {\n    assertType(node.type, 'alternative');\n\n    var terms = node.body,\n        length = terms ? terms.length : 0;\n\n    if (length == 1) {\n      return generateTerm(terms[0]);\n    } else {\n      var i = -1,\n          result = '';\n\n      while (++i < length) {\n        result += generateTerm(terms[i]);\n      }\n\n      return result;\n    }\n  }\n\n  function generateAnchor(node) {\n    assertType(node.type, 'anchor');\n\n    switch (node.kind) {\n      case 'start':\n        return '^';\n      case 'end':\n        return '$';\n      case 'boundary':\n        return '\\\\b';\n      case 'not-boundary':\n        return '\\\\B';\n      default:\n        throw Error('Invalid assertion');\n    }\n  }\n\n  function generateAtom(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');\n\n    return generate(node);\n  }\n\n  function generateCharacterClass(node) {\n    assertType(node.type, 'characterClass');\n\n    var classRanges = node.body,\n        length = classRanges ? classRanges.length : 0;\n\n    var i = -1,\n        result = '[';\n\n    if (node.negative) {\n      result += '^';\n    }\n\n    while (++i < length) {\n      result += generateClassAtom(classRanges[i]);\n    }\n\n    result += ']';\n\n    return result;\n  }\n\n  function generateCharacterClassEscape(node) {\n    assertType(node.type, 'characterClassEscape');\n\n    return '\\\\' + node.value;\n  }\n\n  function generateCharacterClassRange(node) {\n    assertType(node.type, 'characterClassRange');\n\n    var min = node.min,\n        max = node.max;\n\n    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {\n      throw Error('Invalid character class range');\n    }\n\n    return generateClassAtom(min) + '-' + generateClassAtom(max);\n  }\n\n  function generateClassAtom(node) {\n    assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');\n\n    return generate(node);\n  }\n\n  function generateDisjunction(node) {\n    assertType(node.type, 'disjunction');\n\n    var body = node.body,\n        length = body ? body.length : 0;\n\n    if (length == 0) {\n      throw Error('No body');\n    } else if (length == 1) {\n      return generate(body[0]);\n    } else {\n      var i = -1,\n          result = '';\n\n      while (++i < length) {\n        if (i != 0) {\n          result += '|';\n        }\n        result += generate(body[i]);\n      }\n\n      return result;\n    }\n  }\n\n  function generateDot(node) {\n    assertType(node.type, 'dot');\n\n    return '.';\n  }\n\n  function generateGroup(node) {\n    assertType(node.type, 'group');\n\n    var result = '(';\n\n    switch (node.behavior) {\n      case 'normal':\n        break;\n      case 'ignore':\n        result += '?:';\n        break;\n      case 'lookahead':\n        result += '?=';\n        break;\n      case 'negativeLookahead':\n        result += '?!';\n        break;\n      default:\n        throw Error('Invalid behaviour: ' + node.behaviour);\n    }\n\n    var body = node.body,\n        length = body ? body.length : 0;\n\n    if (length == 1) {\n      result += generate(body[0]);\n    } else {\n      var i = -1;\n\n      while (++i < length) {\n        result += generate(body[i]);\n      }\n    }\n\n    result += ')';\n\n    return result;\n  }\n\n  function generateQuantifier(node) {\n    assertType(node.type, 'quantifier');\n\n    var quantifier = '',\n        min = node.min,\n        max = node.max;\n\n    switch (max) {\n      case undefined:\n      case null:\n        switch (min) {\n          case 0:\n            quantifier = '*'\n            break;\n          case 1:\n            quantifier = '+';\n            break;\n          default:\n            quantifier = '{' + min + ',}';\n            break;\n        }\n        break;\n      default:\n        if (min == max) {\n          quantifier = '{' + min + '}';\n        }\n        else if (min == 0 && max == 1) {\n          quantifier = '?';\n        } else {\n          quantifier = '{' + min + ',' + max + '}';\n        }\n        break;\n    }\n\n    if (!node.greedy) {\n      quantifier += '?';\n    }\n\n    return generateAtom(node.body[0]) + quantifier;\n  }\n\n  function generateReference(node) {\n    assertType(node.type, 'reference');\n\n    return '\\\\' + node.matchIndex;\n  }\n\n  function generateTerm(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value');\n\n    return generate(node);\n  }\n\n  function generateValue(node) {\n    assertType(node.type, 'value');\n\n    var kind = node.kind,\n        codePoint = node.codePoint;\n\n    switch (kind) {\n      case 'controlLetter':\n        return '\\\\c' + fromCodePoint(codePoint + 64);\n      case 'hexadecimalEscape':\n        return '\\\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);\n      case 'identifier':\n        return '\\\\' + fromCodePoint(codePoint);\n      case 'null':\n        return '\\\\' + codePoint;\n      case 'octal':\n        return '\\\\' + codePoint.toString(8);\n      case 'singleEscape':\n        switch (codePoint) {\n          case 0x0008:\n            return '\\\\b';\n          case 0x009:\n            return '\\\\t';\n          case 0x00A:\n            return '\\\\n';\n          case 0x00B:\n            return '\\\\v';\n          case 0x00C:\n            return '\\\\f';\n          case 0x00D:\n            return '\\\\r';\n          default:\n            throw Error('Invalid codepoint: ' + codePoint);\n        }\n      case 'symbol':\n        return fromCodePoint(codePoint);\n      case 'unicodeEscape':\n        return '\\\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);\n      case 'unicodeCodePointEscape':\n        return '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n      default:\n        throw Error('Unsupported node kind: ' + kind);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  generate.alternative = generateAlternative;\n  generate.anchor = generateAnchor;\n  generate.characterClass = generateCharacterClass;\n  generate.characterClassEscape = generateCharacterClassEscape;\n  generate.characterClassRange = generateCharacterClassRange;\n  generate.disjunction = generateDisjunction;\n  generate.dot = generateDot;\n  generate.group = generateGroup;\n  generate.quantifier = generateQuantifier;\n  generate.reference = generateReference;\n  generate.value = generateValue;\n\n  /*--------------------------------------------------------------------------*/\n\n  // export regjsgen\n  // some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // define as an anonymous module so, through path mapping, it can be aliased\n    define(function() {\n      return {\n        'generate': generate\n      };\n    });\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (freeExports && freeModule) {\n    // in Narwhal, Node.js, Rhino -require, or RingoJS\n    freeExports.generate = generate;\n  }\n  // in a browser or Rhino\n  else {\n    root.regjsgen = {\n      'generate': generate\n    };\n  }\n}.call(this));\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/regjsgen/regjsgen.js","var generate = require('regjsgen').generate;\nvar parse = require('regjsparser').parse;\nvar regenerate = require('regenerate');\nvar iuMappings = require('./data/iu-mappings.json');\nvar ESCAPE_SETS = require('./data/character-class-escape-sets.js');\n\nfunction getCharacterClassEscapeSet(character) {\n\tif (unicode) {\n\t\tif (ignoreCase) {\n\t\t\treturn ESCAPE_SETS.UNICODE_IGNORE_CASE[character];\n\t\t}\n\t\treturn ESCAPE_SETS.UNICODE[character];\n\t}\n\treturn ESCAPE_SETS.REGULAR[character];\n}\n\nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nfunction has(object, property) {\n\treturn hasOwnProperty.call(object, property);\n}\n\n// Prepare a Regenerate set containing all code points, used for negative\n// character classes (if any).\nvar UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF);\n// Without the `u` flag, the range stops at 0xFFFF.\n// https://mths.be/es6#sec-pattern-semantics\nvar BMP_SET = regenerate().addRange(0x0, 0xFFFF);\n\n// Prepare a Regenerate set containing all code points that are supposed to be\n// matched by `/./u`. https://mths.be/es6#sec-atom\nvar DOT_SET_UNICODE = UNICODE_SET.clone() // all Unicode code points\n\t.remove(\n\t\t// minus `LineTerminator`s (https://mths.be/es6#sec-line-terminators):\n\t\t0x000A, // Line Feed <LF>\n\t\t0x000D, // Carriage Return <CR>\n\t\t0x2028, // Line Separator <LS>\n\t\t0x2029  // Paragraph Separator <PS>\n\t);\n// Prepare a Regenerate set containing all code points that are supposed to be\n// matched by `/./` (only BMP code points).\nvar DOT_SET = DOT_SET_UNICODE.clone()\n\t.intersection(BMP_SET);\n\n// Add a range of code points + any case-folded code points in that range to a\n// set.\nregenerate.prototype.iuAddRange = function(min, max) {\n\tvar $this = this;\n\tdo {\n\t\tvar folded = caseFold(min);\n\t\tif (folded) {\n\t\t\t$this.add(folded);\n\t\t}\n\t} while (++min <= max);\n\treturn $this;\n};\n\nfunction assign(target, source) {\n\tfor (var key in source) {\n\t\t// Note: `hasOwnProperty` is not needed here.\n\t\ttarget[key] = source[key];\n\t}\n}\n\nfunction update(item, pattern) {\n\t// TODO: Test if memoizing `pattern` here is worth the effort.\n\tif (!pattern) {\n\t\treturn;\n\t}\n\tvar tree = parse(pattern, '');\n\tswitch (tree.type) {\n\t\tcase 'characterClass':\n\t\tcase 'group':\n\t\tcase 'value':\n\t\t\t// No wrapping needed.\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// Wrap the pattern in a non-capturing group.\n\t\t\ttree = wrap(tree, pattern);\n\t}\n\tassign(item, tree);\n}\n\nfunction wrap(tree, pattern) {\n\t// Wrap the pattern in a non-capturing group.\n\treturn {\n\t\t'type': 'group',\n\t\t'behavior': 'ignore',\n\t\t'body': [tree],\n\t\t'raw': '(?:' + pattern + ')'\n\t};\n}\n\nfunction caseFold(codePoint) {\n\treturn has(iuMappings, codePoint) ? iuMappings[codePoint] : false;\n}\n\nvar ignoreCase = false;\nvar unicode = false;\nfunction processCharacterClass(characterClassItem) {\n\tvar set = regenerate();\n\tvar body = characterClassItem.body.forEach(function(item) {\n\t\tswitch (item.type) {\n\t\t\tcase 'value':\n\t\t\t\tset.add(item.codePoint);\n\t\t\t\tif (ignoreCase && unicode) {\n\t\t\t\t\tvar folded = caseFold(item.codePoint);\n\t\t\t\t\tif (folded) {\n\t\t\t\t\t\tset.add(folded);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'characterClassRange':\n\t\t\t\tvar min = item.min.codePoint;\n\t\t\t\tvar max = item.max.codePoint;\n\t\t\t\tset.addRange(min, max);\n\t\t\t\tif (ignoreCase && unicode) {\n\t\t\t\t\tset.iuAddRange(min, max);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'characterClassEscape':\n\t\t\t\tset.add(getCharacterClassEscapeSet(item.value));\n\t\t\t\tbreak;\n\t\t\t// The `default` clause is only here as a safeguard; it should never be\n\t\t\t// reached. Code coverage tools should ignore it.\n\t\t\t/* istanbul ignore next */\n\t\t\tdefault:\n\t\t\t\tthrow Error('Unknown term type: ' + item.type);\n\t\t}\n\t});\n\tif (characterClassItem.negative) {\n\t\tset = (unicode ? UNICODE_SET : BMP_SET).clone().remove(set);\n\t}\n\tupdate(characterClassItem, set.toString());\n\treturn characterClassItem;\n}\n\nfunction processTerm(item) {\n\tswitch (item.type) {\n\t\tcase 'dot':\n\t\t\tupdate(\n\t\t\t\titem,\n\t\t\t\t(unicode ? DOT_SET_UNICODE : DOT_SET).toString()\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'characterClass':\n\t\t\titem = processCharacterClass(item);\n\t\t\tbreak;\n\t\tcase 'characterClassEscape':\n\t\t\tupdate(\n\t\t\t\titem,\n\t\t\t\tgetCharacterClassEscapeSet(item.value).toString()\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'alternative':\n\t\tcase 'disjunction':\n\t\tcase 'group':\n\t\tcase 'quantifier':\n\t\t\titem.body = item.body.map(processTerm);\n\t\t\tbreak;\n\t\tcase 'value':\n\t\t\tvar codePoint = item.codePoint;\n\t\t\tvar set = regenerate(codePoint);\n\t\t\tif (ignoreCase && unicode) {\n\t\t\t\tvar folded = caseFold(codePoint);\n\t\t\t\tif (folded) {\n\t\t\t\t\tset.add(folded);\n\t\t\t\t}\n\t\t\t}\n\t\t\tupdate(item, set.toString());\n\t\t\tbreak;\n\t\tcase 'anchor':\n\t\tcase 'empty':\n\t\tcase 'group':\n\t\tcase 'reference':\n\t\t\t// Nothing to do here.\n\t\t\tbreak;\n\t\t// The `default` clause is only here as a safeguard; it should never be\n\t\t// reached. Code coverage tools should ignore it.\n\t\t/* istanbul ignore next */\n\t\tdefault:\n\t\t\tthrow Error('Unknown term type: ' + item.type);\n\t}\n\treturn item;\n};\n\nmodule.exports = function(pattern, flags) {\n\tvar tree = parse(pattern, flags);\n\tignoreCase = flags ? flags.indexOf('i') > -1 : false;\n\tunicode = flags ? flags.indexOf('u') > -1 : false;\n\tassign(tree, processTerm(tree));\n\treturn generate(tree);\n};\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/regexpu-core/rewrite-pattern.js","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\nimport rewritePattern from 'regexpu-core';\n\nexport default class Literal extends Node {\n\tinitialise () {\n\t\tif ( typeof this.value === 'string' ) {\n\t\t\tthis.program.indentExclusionElements.push( this );\n\t\t}\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.numericLiteral ) {\n\t\t\tconst leading = this.raw.slice( 0, 2 );\n\t\t\tif ( leading === '0b' || leading === '0o' ) {\n\t\t\t\tcode.overwrite( this.start, this.end, String( this.value ), true );\n\t\t\t}\n\t\t}\n\n\t\tif ( this.regex ) {\n\t\t\tconst { pattern, flags } = this.regex;\n\n\t\t\tif ( transforms.stickyRegExp && /y/.test( flags ) ) throw new CompileError( this, 'Regular expression sticky flag is not supported' );\n\t\t\tif ( transforms.unicodeRegExp && /u/.test( flags ) ) {\n\t\t\t\tcode.overwrite( this.start, this.end, `/${rewritePattern( pattern, flags )}/${flags.replace( 'u', '' )}` );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/Literal.js","import Node from '../Node.js';\nimport reserved from '../../utils/reserved.js';\n\nexport default class MemberExpression extends Node {\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.reservedProperties && reserved[ this.property.name ] ) {\n\t\t\tcode.overwrite( this.object.end, this.property.start, `['` );\n\t\t\tcode.insertLeft( this.property.end, `']` );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/MemberExpression.js","import Node from '../Node.js';\nimport spread, { isArguments } from '../../utils/spread.js';\n\nexport default class NewExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.spreadRest && this.arguments.length ) {\n\t\t\tconst lexicalBoundary = this.findLexicalBoundary();\n\n\t\t\tlet i = this.arguments.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tconst arg = this.arguments[i];\n\t\t\t\tif ( arg.type === 'SpreadElement' && isArguments( arg.argument ) ) {\n\t\t\t\t\tthis.argumentsArrayAlias = lexicalBoundary.getArgumentsArrayAlias();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.spreadRest && this.arguments.length ) {\n\t\t\tconst firstArgument = this.arguments[0];\n\t\t\tconst isNew = true;\n\t\t\tlet hasSpreadElements = spread( code, this.arguments, firstArgument.start, this.argumentsArrayAlias, isNew );\n\n\t\t\tif ( hasSpreadElements ) {\n\t\t\t\tcode.insertRight( this.start + 'new'.length, ' (Function.prototype.bind.apply(' );\n\t\t\t\tcode.overwrite( this.callee.end, firstArgument.start, ', [ null ].concat( ' );\n\t\t\t\tcode.insertLeft( this.end, ' ))' );\n\t\t\t}\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/NewExpression.js","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class ObjectExpression extends Node {\n\ttranspile ( code, transforms ) {\n\t\tsuper.transpile( code, transforms );\n\n\t\tlet firstPropertyStart = this.start + 1;\n\t\tlet regularPropertyCount = 0;\n\t\tlet spreadPropertyCount = 0;\n\t\tlet computedPropertyCount = 0;\n\n\t\tfor ( let prop of this.properties ) {\n\t\t\tif ( prop.type === 'SpreadProperty' ) {\n\t\t\t\tspreadPropertyCount += 1;\n\t\t\t} else if ( prop.computed ) {\n\t\t\t\tcomputedPropertyCount += 1;\n\t\t\t} else if ( prop.type === 'Property' ) {\n\t\t\t\tregularPropertyCount += 1;\n\t\t\t}\n\t\t}\n\n\t\tif ( spreadPropertyCount ) {\n\t\t\tif ( !this.program.options.objectAssign ) {\n\t\t\t\tthrow new CompileError( this, 'Object spread operator requires specified objectAssign option with \\'Object.assign\\' or polyfill helper.' );\n\t\t\t}\n\t\t\t// enclose run of non-spread properties in curlies\n\t\t\tlet i = this.properties.length;\n\t\t\tif ( regularPropertyCount ) {\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tconst prop = this.properties[i];\n\n\t\t\t\t\tif ( prop.type === 'Property' && !prop.computed ) {\n\t\t\t\t\t\tconst lastProp = this.properties[ i - 1 ];\n\t\t\t\t\t\tconst nextProp = this.properties[ i + 1 ];\n\n\t\t\t\t\t\tif ( !lastProp || lastProp.type !== 'Property' || lastProp.computed ) {\n\t\t\t\t\t\t\tcode.insertRight( prop.start, '{' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( !nextProp || nextProp.type !== 'Property' || nextProp.computed ) {\n\t\t\t\t\t\t\tcode.insertLeft( prop.end, '}' );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// wrap the whole thing in Object.assign\n\t\t\tfirstPropertyStart = this.properties[0].start;\n\t\t\tcode.overwrite( this.start, firstPropertyStart, `${this.program.options.objectAssign}({}, `);\n\t\t\tcode.overwrite( this.properties[ this.properties.length - 1 ].end, this.end, ')' );\n\t\t}\n\n\t\tif ( computedPropertyCount && transforms.computedProperty ) {\n\t\t\tconst i0 = this.getIndentation();\n\n\t\t\tlet isSimpleAssignment;\n\t\t\tlet name;\n\n\t\t\tif ( this.parent.type === 'VariableDeclarator' && this.parent.parent.declarations.length === 1 ) {\n\t\t\t\tisSimpleAssignment = true;\n\t\t\t\tname = this.parent.id.alias || this.parent.id.name; // TODO is this right?\n\t\t\t} else if ( this.parent.type === 'AssignmentExpression' && this.parent.parent.type === 'ExpressionStatement' && this.parent.left.type === 'Identifier' ) {\n\t\t\t\tisSimpleAssignment = true;\n\t\t\t\tname = this.parent.left.alias || this.parent.left.name; // TODO is this right?\n\t\t\t} else if ( this.parent.type === 'AssignmentPattern' && this.parent.left.type === 'Identifier' ) {\n\t\t\t\tisSimpleAssignment = true;\n\t\t\t\tname = this.parent.left.alias || this.parent.left.name; // TODO is this right?\n\t\t\t}\n\n\t\t\t// handle block scoping\n\t\t\tconst declaration = this.findScope( false ).findDeclaration( name );\n\t\t\tif ( declaration ) name = declaration.name;\n\n\t\t\tconst start = firstPropertyStart;\n\t\t\tconst end = this.end;\n\n\t\t\tif ( isSimpleAssignment ) {\n\t\t\t\t// ???\n\t\t\t} else {\n\t\t\t\tname = this.findScope( true ).createIdentifier( 'obj' );\n\n\t\t\t\tconst statement = this.findNearest( /(?:Statement|Declaration)$/ );\n\t\t\t\tcode.insertLeft( statement.end, `\\n${i0}var ${name};` );\n\n\t\t\t\tcode.insertRight( this.start, `( ${name} = ` );\n\t\t\t}\n\n\t\t\tconst len = this.properties.length;\n\t\t\tlet lastComputedProp;\n\t\t\tlet sawNonComputedProperty = false;\n\n\t\t\tfor ( let i = 0; i < len; i += 1 ) {\n\t\t\t\tconst prop = this.properties[i];\n\n\t\t\t\tif ( prop.computed ) {\n\t\t\t\t\tlastComputedProp = prop;\n\t\t\t\t\tlet moveStart = i > 0 ? this.properties[ i - 1 ].end : start;\n\n\t\t\t\t\tconst propId = isSimpleAssignment ? `;\\n${i0}${name}` : `, ${name}`;\n\n\t\t\t\t\tif (moveStart < prop.start) {\n\t\t\t\t\t\tcode.overwrite( moveStart, prop.start, propId );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcode.insertRight( prop.start, propId );\n\t\t\t\t\t}\n\n\t\t\t\t\tlet c = prop.key.end;\n\t\t\t\t\twhile ( code.original[c] !== ']' ) c += 1;\n\t\t\t\t\tc += 1;\n\n\t\t\t\t\tif ( prop.value.start > c ) code.remove( c, prop.value.start );\n\t\t\t\t\tcode.insertLeft( c, ' = ' );\n\t\t\t\t\tcode.move( moveStart, prop.end, end );\n\n\t\t\t\t\tif ( i < len - 1 && ! sawNonComputedProperty ) {\n\t\t\t\t\t\t// remove trailing comma\n\t\t\t\t\t\tc = prop.end;\n\t\t\t\t\t\twhile ( code.original[c] !== ',' ) c += 1;\n\n\t\t\t\t\t\tcode.remove( prop.end, c + 1 );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( prop.method && transforms.conciseMethodProperty ) {\n\t\t\t\t\t\tcode.insertRight( prop.value.start, 'function ' );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsawNonComputedProperty = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// special case\n\t\t\tif ( computedPropertyCount === len ) {\n\t\t\t\tcode.remove( this.properties[ len - 1 ].end, this.end - 1 );\n\t\t\t}\n\n\t\t\tif ( !isSimpleAssignment ) {\n\t\t\t\tcode.insertLeft( lastComputedProp.end, `, ${name} )` );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ObjectExpression.js","import Node from '../Node.js';\nimport reserved from '../../utils/reserved.js';\n\nexport default class Property extends Node {\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.conciseMethodProperty && !this.computed && this.parent.type !== 'ObjectPattern' ) {\n\t\t\tif ( this.shorthand ) {\n\t\t\t\tcode.insertRight( this.start, `${this.key.name}: ` );\n\t\t\t} else if ( this.method ) {\n\t\t\t\tlet name = '';\n\t\t\t\tif ( this.program.options.namedFunctionExpressions !== false ) {\n\t\t\t\t\tif ( this.key.type === 'Literal' && typeof this.key.value === 'number' ) {\n\t\t\t\t\t\tname = \"\";\n\t\t\t\t\t} else if ( this.key.type === 'Identifier' ) {\n\t\t\t\t\t\tif ( reserved[ this.key.name ] ||\n\t\t\t\t\t\t\t ! /^[a-z_$][a-z0-9_$]*$/i.test( this.key.name ) ||\n\t\t\t\t\t\t     this.value.body.scope.references[this.key.name] ) {\n\t\t\t\t\t\t\tname = this.findScope( true ).createIdentifier( this.key.name );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tname = this.key.name;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tname = this.findScope( true ).createIdentifier( this.key.value );\n\t\t\t\t\t}\n\t\t\t\t\tname = ' ' + name;\n\t\t\t\t}\n\n\t\t\t\tif ( this.value.generator ) code.remove( this.start, this.key.start );\n\t\t\t\tcode.insertLeft( this.key.end, `: function${this.value.generator ? '*' : ''}${name}` );\n\t\t\t}\n\t\t}\n\n\t\tif ( transforms.reservedProperties && reserved[ this.key.name ] ) {\n\t\t\tcode.insertRight( this.key.start, `'` );\n\t\t\tcode.insertLeft( this.key.end, `'` );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/Property.js","import Node from '../Node.js';\nimport { loopStatement } from '../../utils/patterns.js';\n\nexport default class ReturnStatement extends Node {\n\tinitialise ( transforms ) {\n\t\tthis.loop = this.findNearest( loopStatement );\n\t\tthis.nearestFunction = this.findNearest( /Function/ );\n\n\t\tif ( this.loop && ( !this.nearestFunction || this.loop.depth > this.nearestFunction.depth ) ) {\n\t\t\tthis.loop.canReturn = true;\n\t\t\tthis.shouldWrap = true;\n\t\t}\n\n\t\tif ( this.argument ) this.argument.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tconst shouldWrap = this.shouldWrap && this.loop && this.loop.shouldRewriteAsFunction;\n\n\t\tif ( this.argument ) {\n\t\t\tif ( shouldWrap ) code.insertRight( this.argument.start, `{ v: ` );\n\t\t\tthis.argument.transpile( code, transforms );\n\t\t\tif ( shouldWrap ) code.insertLeft( this.argument.end, ` }` );\n\t\t} else if ( shouldWrap ) {\n\t\t\tcode.insertLeft( this.start + 6, ' {}' );\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ReturnStatement.js","import Node from '../Node.js';\n\nexport default class SpreadProperty extends Node {\n\ttranspile ( code, transforms ) {\n\t\tcode.remove( this.start, this.argument.start );\n\t\tcode.remove( this.argument.end, this.end );\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/SpreadProperty.js","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\nimport { loopStatement } from '../../utils/patterns.js';\n\nexport default class Super extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.classes ) {\n\t\t\tthis.method = this.findNearest( 'MethodDefinition' );\n\t\t\tif ( !this.method ) throw new CompileError( this, 'use of super outside class method' );\n\n\t\t\tconst parentClass = this.findNearest( 'ClassBody' ).parent;\n\t\t\tthis.superClassName = parentClass.superClass && (parentClass.superClass.name || 'superclass');\n\n\t\t\tif ( !this.superClassName ) throw new CompileError( this, 'super used in base class' );\n\n\t\t\tthis.isCalled = this.parent.type === 'CallExpression' && this === this.parent.callee;\n\n\t\t\tif ( this.method.kind !== 'constructor' && this.isCalled ) {\n\t\t\t\tthrow new CompileError( this, 'super() not allowed outside class constructor' );\n\t\t\t}\n\n\t\t\tthis.isMember = this.parent.type === 'MemberExpression';\n\n\t\t\tif ( !this.isCalled && !this.isMember ) {\n\t\t\t\tthrow new CompileError( this, 'Unexpected use of `super` (expected `super(...)` or `super.*`)' );\n\t\t\t}\n\t\t}\n\n\t\tif ( transforms.arrow ) {\n\t\t\tconst lexicalBoundary = this.findLexicalBoundary();\n\t\t\tconst arrowFunction = this.findNearest( 'ArrowFunctionExpression' );\n\t\t\tconst loop = this.findNearest( loopStatement );\n\n\t\t\tif ( arrowFunction && arrowFunction.depth > lexicalBoundary.depth ) {\n\t\t\t\tthis.thisAlias = lexicalBoundary.getThisAlias();\n\t\t\t}\n\n\t\t\tif ( loop && loop.body.contains( this ) && loop.depth > lexicalBoundary.depth ) {\n\t\t\t\tthis.thisAlias = lexicalBoundary.getThisAlias();\n\t\t\t}\n\t\t}\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.classes ) {\n\t\t\tconst expression = ( this.isCalled || this.method.static ) ?\n\t\t\t\tthis.superClassName :\n\t\t\t\t`${this.superClassName}.prototype`;\n\n\t\t\tcode.overwrite( this.start, this.end, expression, true );\n\n\t\t\tconst callExpression = this.isCalled ? this.parent : this.parent.parent;\n\n\t\t\tif ( callExpression && callExpression.type === 'CallExpression' ) {\n\t\t\t\tif ( !this.noCall ) { // special case – `super( ...args )`\n\t\t\t\t\tcode.insertLeft( callExpression.callee.end, '.call' );\n\t\t\t\t}\n\n\t\t\t\tconst thisAlias = this.thisAlias || 'this';\n\n\t\t\t\tif ( callExpression.arguments.length ) {\n\t\t\t\t\tcode.insertLeft( callExpression.arguments[0].start, `${thisAlias}, ` );\n\t\t\t\t} else {\n\t\t\t\t\tcode.insertLeft( callExpression.end - 1, `${thisAlias}` );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/Super.js","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class TaggedTemplateExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.templateString && !transforms.dangerousTaggedTemplateString ) {\n\t\t\tthrow new CompileError( this, 'Tagged template strings are not supported. Use `transforms: { templateString: false }` to skip transformation and disable this error, or `transforms: { dangerousTaggedTemplateString: true }` if you know what you\\'re doing' );\n\t\t}\n\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.templateString && transforms.dangerousTaggedTemplateString ) {\n\t\t\tconst ordered = this.quasi.expressions.concat( this.quasi.quasis ).sort( ( a, b ) => a.start - b.start );\n\n\t\t\t// insert strings at start\n\t\t\tconst templateStrings = this.quasi.quasis.map( quasi => JSON.stringify( quasi.value.cooked ) );\n\t\t\tcode.overwrite( this.tag.end, ordered[0].start, `([${templateStrings.join(', ')}]` );\n\n\t\t\tlet lastIndex = ordered[0].start;\n\t\t\tordered.forEach( node => {\n\t\t\t\tif ( node.type === 'TemplateElement' ) {\n\t\t\t\t\tcode.remove( lastIndex, node.end );\n\t\t\t\t} else {\n\t\t\t\t\tcode.overwrite( lastIndex, node.start, ', ' );\n\t\t\t\t}\n\n\t\t\t\tlastIndex = node.end;\n\t\t\t});\n\n\t\t\tcode.overwrite( lastIndex, this.end, ')' );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/TaggedTemplateExpression.js","import Node from '../Node.js';\n\nexport default class TemplateElement extends Node {\n\tinitialise () {\n\t\tthis.program.indentExclusionElements.push( this );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/TemplateElement.js","import Node from '../Node.js';\n\nexport default class TemplateLiteral extends Node {\n\ttranspile ( code, transforms ) {\n\t\tif ( transforms.templateString && this.parent.type !== 'TaggedTemplateExpression' ) {\n\t\t\tlet ordered = this.expressions.concat( this.quasis )\n\t\t\t\t.sort( ( a, b ) => a.start - b.start || a.end - b.end )\n\t\t\t\t.filter( ( node, i ) => {\n\t\t\t\t\t// include all expressions\n\t\t\t\t\tif ( node.type !== 'TemplateElement' ) return true;\n\n\t\t\t\t\t// include all non-empty strings\n\t\t\t\t\tif ( node.value.raw ) return true;\n\n\t\t\t\t\t// exclude all empty strings not at the head\n\t\t\t\t\treturn !i;\n\t\t\t\t});\n\n\t\t\t// special case – we may be able to skip the first element,\n\t\t\t// if it's the empty string, but only if the second and\n\t\t\t// third elements aren't both expressions (since they maybe\n\t\t\t// be numeric, and `1 + 2 + '3' === '33'`)\n\t\t\tif ( ordered.length >= 3 ) {\n\t\t\t\tconst [ first, , third ] = ordered;\n\t\t\t\tif ( first.type === 'TemplateElement' && first.value.raw === '' && third.type === 'TemplateElement' ) {\n\t\t\t\t\tordered.shift();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst parenthesise = ( this.quasis.length !== 1 || this.expressions.length !== 0 ) &&\n\t\t\t                     this.parent.type !== 'AssignmentExpression' &&\n\t\t\t                     this.parent.type !== 'AssignmentPattern' &&\n\t\t\t                     this.parent.type !== 'VariableDeclarator' &&\n\t\t\t                     ( this.parent.type !== 'BinaryExpression' || this.parent.operator !== '+' );\n\n\t\t\tif ( parenthesise ) code.insertRight( this.start, '(' );\n\n\t\t\tlet lastIndex = this.start;\n\n\t\t\tordered.forEach( ( node, i ) => {\n\t\t\t\tif ( node.type === 'TemplateElement' ) {\n\t\t\t\t\tlet replacement = '';\n\t\t\t\t\tif ( i ) replacement += ' + ';\n\t\t\t\t\treplacement += JSON.stringify( node.value.cooked );\n\n\t\t\t\t\tcode.overwrite( lastIndex, node.end, replacement );\n\t\t\t\t} else {\n\t\t\t\t\tconst parenthesise = node.type !== 'Identifier'; // TODO other cases where it's safe\n\n\t\t\t\t\tlet replacement = '';\n\t\t\t\t\tif ( i ) replacement += ' + ';\n\t\t\t\t\tif ( parenthesise ) replacement += '(';\n\n\t\t\t\t\tcode.overwrite( lastIndex, node.start, replacement );\n\n\t\t\t\t\tif ( parenthesise ) code.insertLeft( node.end, ')' );\n\t\t\t\t}\n\n\t\t\t\tlastIndex = node.end;\n\t\t\t});\n\n\t\t\tlet close = '';\n\t\t\tif ( parenthesise ) close += ')';\n\n\t\t\tcode.overwrite( lastIndex, this.end, close );\n\t\t}\n\n\t\tsuper.transpile( code, transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/TemplateLiteral.js","import Node from '../Node.js';\nimport { loopStatement } from '../../utils/patterns.js';\n\nexport default class ThisExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( transforms.arrow ) {\n\t\t\tconst lexicalBoundary = this.findLexicalBoundary();\n\t\t\tconst arrowFunction = this.findNearest( 'ArrowFunctionExpression' );\n\t\t\tconst loop = this.findNearest( loopStatement );\n\n\t\t\tif ( ( arrowFunction && arrowFunction.depth > lexicalBoundary.depth )\n\t\t\t|| ( loop && loop.body.contains( this ) && loop.depth > lexicalBoundary.depth )\n\t\t\t|| ( loop && loop.right && loop.right.contains( this ) ) ) {\n\t\t\t\tthis.alias = lexicalBoundary.getThisAlias();\n\t\t\t}\n\t\t}\n\t}\n\n\ttranspile ( code ) {\n\t\tif ( this.alias ) {\n\t\t\tcode.overwrite( this.start, this.end, this.alias, true );\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/ThisExpression.js","import Node from '../Node.js';\nimport CompileError from '../../utils/CompileError.js';\n\nexport default class UpdateExpression extends Node {\n\tinitialise ( transforms ) {\n\t\tif ( this.argument.type === 'Identifier' ) {\n\t\t\tconst declaration = this.findScope( false ).findDeclaration( this.argument.name );\n\t\t\tif ( declaration && declaration.kind === 'const' ) {\n\t\t\t\tthrow new CompileError( this, `${this.argument.name} is read-only` );\n\t\t\t}\n\n\t\t\t// special case – https://gitlab.com/Rich-Harris/buble/issues/150\n\t\t\tconst statement = declaration && declaration.node.ancestor( 3 );\n\t\t\tif ( statement && statement.type === 'ForStatement' && statement.body.contains( this ) ) {\n\t\t\t\tstatement.reassigned[ this.argument.name ] = true;\n\t\t\t}\n\t\t}\n\n\t\tsuper.initialise( transforms );\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/UpdateExpression.js","import Node from '../Node.js';\nimport destructure from '../../utils/destructure.js';\nimport { loopStatement } from '../../utils/patterns.js';\n\nexport default class VariableDeclaration extends Node {\n\tinitialise ( transforms ) {\n\t\tthis.scope = this.findScope( this.kind === 'var' );\n\t\tthis.declarations.forEach( declarator => declarator.initialise( transforms ) );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tconst i0 = this.getIndentation();\n\t\tlet kind = this.kind;\n\n\t\tif ( transforms.letConst && kind !== 'var' ) {\n\t\t\tkind = 'var';\n\t\t\tcode.overwrite( this.start, this.start + this.kind.length, kind, true );\n\t\t}\n\n\t\tif ( transforms.destructuring && this.parent.type !== 'ForOfStatement' ) {\n\t\t\tlet c = this.start;\n\t\t\tlet lastDeclaratorIsPattern;\n\n\t\t\tthis.declarations.forEach( ( declarator, i ) => {\n\t\t\t\tif ( declarator.id.type === 'Identifier' ) {\n\t\t\t\t\tif ( i > 0 && this.declarations[ i - 1 ].id.type !== 'Identifier' ) {\n\t\t\t\t\t\tcode.overwrite( c, declarator.id.start, `var ` );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst inline = loopStatement.test( this.parent.type );\n\n\t\t\t\t\tif ( i === 0 ) {\n\t\t\t\t\t\tcode.remove( c, declarator.id.start );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcode.overwrite( c, declarator.id.start, `;\\n${i0}` );\n\t\t\t\t\t}\n\n\t\t\t\t\tconst simple = declarator.init.type === 'Identifier' && !declarator.init.rewritten;\n\n\t\t\t\t\tconst name = simple ? declarator.init.name : declarator.findScope( true ).createIdentifier( 'ref' );\n\n\t\t\t\t\tlet c = declarator.start;\n\n\t\t\t\t\tlet statementGenerators = [];\n\n\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\tcode.remove( declarator.id.end, declarator.end );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstatementGenerators.push( ( start, prefix, suffix ) => {\n\t\t\t\t\t\t\tcode.insertRight( declarator.id.end, `var ${name}` );\n\t\t\t\t\t\t\tcode.insertLeft( declarator.init.end, `${suffix}` );\n\t\t\t\t\t\t\tcode.move( declarator.id.end, declarator.end, start );\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tdestructure( code, declarator.findScope( false ), declarator.id, name, inline, statementGenerators );\n\n\t\t\t\t\tlet prefix = inline ? 'var ' : '';\n\t\t\t\t\tlet suffix = inline ? `, ` : `;\\n${i0}`;\n\t\t\t\t\tstatementGenerators.forEach( ( fn, j ) => {\n\t\t\t\t\t\tif ( i === this.declarations.length - 1 && j === statementGenerators.length - 1 ) {\n\t\t\t\t\t\t\tsuffix = inline ? '' : ';';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfn( declarator.start, j === 0 ? prefix : '', suffix );\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdeclarator.transpile( code, transforms );\n\n\t\t\t\tc = declarator.end;\n\t\t\t\tlastDeclaratorIsPattern = declarator.id.type !== 'Identifier';\n\t\t\t});\n\n\t\t\tif ( lastDeclaratorIsPattern ) {\n\t\t\t\tcode.remove( c, this.end );\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\tthis.declarations.forEach( declarator => {\n\t\t\t\tdeclarator.transpile( code, transforms );\n\t\t\t});\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/VariableDeclaration.js","import Node from '../Node.js';\n\nexport default class VariableDeclarator extends Node {\n\tinitialise ( transforms ) {\n\t\tlet kind = this.parent.kind;\n\t\tif ( kind === 'let' && this.parent.parent.type === 'ForStatement' ) {\n\t\t\tkind = 'for.let'; // special case...\n\t\t}\n\n\t\tthis.parent.scope.addDeclaration( this.id, kind );\n\t\tsuper.initialise( transforms );\n\t}\n\n\ttranspile ( code, transforms ) {\n\t\tif ( !this.init && transforms.letConst && this.parent.kind !== 'var' ) {\n\t\t\tlet inLoop = this.findNearest( /Function|^For(In|Of)?Statement|^(?:Do)?WhileStatement/ );\n\t\t\tif ( inLoop && ! /Function/.test( inLoop.type ) && ! this.isLeftDeclaratorOfLoop() ) {\n\t\t\t\tcode.insertLeft( this.id.end, ' = (void 0)' );\n\t\t\t}\n\t\t}\n\n\t\tif ( this.id ) this.id.transpile( code, transforms );\n\t\tif ( this.init ) this.init.transpile( code, transforms );\n\t}\n\n\tisLeftDeclaratorOfLoop () {\n\t\treturn this.parent\n\t\t\t&& this.parent.type === 'VariableDeclaration'\n\t\t\t&& this.parent.parent\n\t\t\t&& (this.parent.parent.type === 'ForInStatement'\n\t\t\t\t|| this.parent.parent.type === 'ForOfStatement')\n\t\t\t&& this.parent.parent.left\n\t\t\t&& this.parent.parent.left.declarations[0] === this;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/VariableDeclarator.js","import ArrayExpression from './ArrayExpression.js';\nimport ArrowFunctionExpression from './ArrowFunctionExpression.js';\nimport AssignmentExpression from './AssignmentExpression.js';\nimport BinaryExpression from './BinaryExpression.js';\nimport BreakStatement from './BreakStatement.js';\nimport CallExpression from './CallExpression.js';\nimport ClassBody from './ClassBody.js';\nimport ClassDeclaration from './ClassDeclaration.js';\nimport ClassExpression from './ClassExpression.js';\nimport ContinueStatement from './ContinueStatement.js';\nimport ExportDefaultDeclaration from './ExportDefaultDeclaration.js';\nimport ExportNamedDeclaration from './ExportNamedDeclaration.js';\nimport ForStatement from './ForStatement.js';\nimport ForInStatement from './ForInStatement.js';\nimport ForOfStatement from './ForOfStatement.js';\nimport FunctionDeclaration from './FunctionDeclaration.js';\nimport FunctionExpression from './FunctionExpression.js';\nimport Identifier from './Identifier.js';\nimport IfStatement from './IfStatement.js';\nimport ImportDeclaration from './ImportDeclaration.js';\nimport ImportDefaultSpecifier from './ImportDefaultSpecifier.js';\nimport ImportSpecifier from './ImportSpecifier.js';\nimport JSXAttribute from './JSXAttribute.js';\nimport JSXClosingElement from './JSXClosingElement.js';\nimport JSXElement from './JSXElement.js';\nimport JSXExpressionContainer from './JSXExpressionContainer.js';\nimport JSXOpeningElement from './JSXOpeningElement.js';\nimport JSXSpreadAttribute from './JSXSpreadAttribute.js';\nimport Literal from './Literal.js';\nimport LoopStatement from './shared/LoopStatement.js';\nimport MemberExpression from './MemberExpression.js';\nimport NewExpression from './NewExpression.js';\nimport ObjectExpression from './ObjectExpression.js';\nimport Property from './Property.js';\nimport ReturnStatement from './ReturnStatement.js';\nimport SpreadProperty from './SpreadProperty.js';\nimport Super from './Super.js';\nimport TaggedTemplateExpression from './TaggedTemplateExpression.js';\nimport TemplateElement from './TemplateElement.js';\nimport TemplateLiteral from './TemplateLiteral.js';\nimport ThisExpression from './ThisExpression.js';\nimport UpdateExpression from './UpdateExpression.js';\nimport VariableDeclaration from './VariableDeclaration.js';\nimport VariableDeclarator from './VariableDeclarator.js';\n\nexport default {\n\tArrayExpression,\n\tArrowFunctionExpression,\n\tAssignmentExpression,\n\tBinaryExpression,\n\tBreakStatement,\n\tCallExpression,\n\tClassBody,\n\tClassDeclaration,\n\tClassExpression,\n\tContinueStatement,\n\tDoWhileStatement: LoopStatement,\n\tExportNamedDeclaration,\n\tExportDefaultDeclaration,\n\tForStatement,\n\tForInStatement,\n\tForOfStatement,\n\tFunctionDeclaration,\n\tFunctionExpression,\n\tIdentifier,\n\tIfStatement,\n\tImportDeclaration,\n\tImportDefaultSpecifier,\n\tImportSpecifier,\n\tJSXAttribute,\n\tJSXClosingElement,\n\tJSXElement,\n\tJSXExpressionContainer,\n\tJSXOpeningElement,\n\tJSXSpreadAttribute,\n\tLiteral,\n\tMemberExpression,\n\tNewExpression,\n\tObjectExpression,\n\tProperty,\n\tReturnStatement,\n\tSpreadProperty,\n\tSuper,\n\tTaggedTemplateExpression,\n\tTemplateElement,\n\tTemplateLiteral,\n\tThisExpression,\n\tUpdateExpression,\n\tVariableDeclaration,\n\tVariableDeclarator,\n\tWhileStatement: LoopStatement\n};\n\n\n\n// WEBPACK FOOTER //\n// ../src/program/types/index.js","export const matrix = {\n\tchrome: {\n\t\t    48: 0b1001111011111100111110101111101,\n\t\t    49: 0b1001111111111100111111111111111,\n\t\t    50: 0b1011111111111100111111111111111,\n\t\t    51: 0b1011111111111100111111111111111,\n\t\t    52: 0b1111111111111100111111111111111\n\t},\n\tfirefox: {\n\t\t    43: 0b1000111111101100000110111011101,\n\t\t    44: 0b1000111111101100000110111011101,\n\t\t    45: 0b1000111111101100000110111011101,\n\t\t    46: 0b1010111111111100000110111011101,\n\t\t    47: 0b1010111111111100111111111011111,\n\t\t    48: 0b1010111111111100111111111011111\n\t},\n\tsafari: {\n\t\t     8: 0b1000000000000000000000000000000,\n\t\t     9: 0b1001111001101100000011101011110\n\t},\n\tie: {\n\t\t     8: 0b0000000000000000000000000000000,\n\t\t     9: 0b1000000000000000000000000000000,\n\t\t    10: 0b1000000000000000000000000000000,\n\t\t    11: 0b1000000000000000111000001100000\n\t},\n\tedge: {\n\t\t    12: 0b1011110110111100011010001011101,\n\t\t    13: 0b1011111110111100011111001011111\n\t},\n\tnode: {\n\t\t'0.10': 0b1000000000101000000000001000000,\n\t\t'0.12': 0b1000001000101000000010001000100,\n\t\t     4: 0b1001111000111100111111001111111,\n\t\t     5: 0b1001111000111100111111001111111,\n\t\t     6: 0b1011111111111100111111111111111\n\t}\n};\n\nexport const features = [\n\t'arrow',\n\t'classes',\n\t'collections',\n\t'computedProperty',\n\t'conciseMethodProperty',\n\t'constLoop',\n\t'constRedef',\n\t'defaultParameter',\n\t'destructuring',\n\t'extendNatives',\n\t'forOf',\n\t'generator',\n\t'letConst',\n\t'letLoop',\n\t'letLoopScope',\n\t'moduleExport',\n\t'moduleImport',\n\t'numericLiteral',\n\t'objectProto',\n\t'objectSuper',\n\t'oldOctalLiteral',\n\t'parameterDestructuring',\n\t'spreadRest',\n\t'stickyRegExp',\n\t'symbol',\n\t'templateString',\n\t'unicodeEscape',\n\t'unicodeIdentifier',\n\t'unicodeRegExp',\n\n\t// ES2016\n\t'exponentiation',\n\n\t// additional transforms, not from\n\t// https://featuretests.io\n\t'reservedProperties'\n];\n\n\n\n// WEBPACK FOOTER //\n// ../src/support.js","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ieee754/index.js\n// module id = /home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/ieee754/index.js\n// module chunks = 0","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/isarray/index.js\n// module id = /home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/isarray/index.js\n// module chunks = 0","export default function Chunk ( start, end, content ) {\n\tthis.start = start;\n\tthis.end = end;\n\tthis.original = content;\n\n\tthis.intro = '';\n\tthis.outro = '';\n\n\tthis.content = content;\n\tthis.storeName = false;\n\tthis.edited = false;\n\n\t// we make these non-enumerable, for sanity while debugging\n\tObject.defineProperties( this, {\n\t\tprevious: { writable: true, value: null },\n\t\tnext: { writable: true, value: null }\n\t});\n}\n\nChunk.prototype = {\n\tappend ( content ) {\n\t\tthis.outro += content;\n\t},\n\n\tclone () {\n\t\tconst chunk = new Chunk( this.start, this.end, this.original );\n\n\t\tchunk.intro = this.intro;\n\t\tchunk.outro = this.outro;\n\t\tchunk.content = this.content;\n\t\tchunk.storeName = this.storeName;\n\t\tchunk.edited = this.edited;\n\n\t\treturn chunk;\n\t},\n\n\tcontains ( index ) {\n\t\treturn this.start < index && index < this.end;\n\t},\n\n\teachNext ( fn ) {\n\t\tlet chunk = this;\n\t\twhile ( chunk ) {\n\t\t\tfn( chunk );\n\t\t\tchunk = chunk.next;\n\t\t}\n\t},\n\n\teachPrevious ( fn ) {\n\t\tlet chunk = this;\n\t\twhile ( chunk ) {\n\t\t\tfn( chunk );\n\t\t\tchunk = chunk.previous;\n\t\t}\n\t},\n\n\tedit ( content, storeName ) {\n\t\tthis.content = content;\n\t\tthis.storeName = storeName;\n\n\t\tthis.edited = true;\n\n\t\treturn this;\n\t},\n\n\tprepend ( content ) {\n\t\tthis.intro = content + this.intro;\n\t},\n\n\tsplit ( index ) {\n\t\tconst sliceIndex = index - this.start;\n\n\t\tconst originalBefore = this.original.slice( 0, sliceIndex );\n\t\tconst originalAfter = this.original.slice( sliceIndex );\n\n\t\tthis.original = originalBefore;\n\n\t\tconst newChunk = new Chunk( index, this.end, originalAfter );\n\t\tnewChunk.outro = this.outro;\n\t\tthis.outro = '';\n\n\t\tthis.end = index;\n\n\t\tif ( this.edited ) {\n\t\t\t// TODO is this block necessary?...\n\t\t\tnewChunk.edit( '', false );\n\t\t\tthis.content = '';\n\t\t} else {\n\t\t\tthis.content = originalBefore;\n\t\t}\n\n\t\tnewChunk.next = this.next;\n\t\tif ( newChunk.next ) newChunk.next.previous = newChunk;\n\t\tnewChunk.previous = this;\n\t\tthis.next = newChunk;\n\n\t\treturn newChunk;\n\t},\n\n\ttoString () {\n\t\treturn this.intro + this.content + this.outro;\n\t},\n\n\ttrimEnd ( rx ) {\n\t\tthis.outro = this.outro.replace( rx, '' );\n\t\tif ( this.outro.length ) return true;\n\n\t\tconst trimmed = this.content.replace( rx, '' );\n\n\t\tif ( trimmed.length ) {\n\t\t\tif ( trimmed !== this.content ) {\n\t\t\t\tthis.split( this.start + trimmed.length ).edit( '', false );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.edit( '', false );\n\n\t\t\tthis.intro = this.intro.replace( rx, '' );\n\t\t\tif ( this.intro.length ) return true;\n\t\t}\n\t},\n\n\ttrimStart ( rx ) {\n\t\tthis.intro = this.intro.replace( rx, '' );\n\t\tif ( this.intro.length ) return true;\n\n\t\tconst trimmed = this.content.replace( rx, '' );\n\n\t\tif ( trimmed.length ) {\n\t\t\tif ( trimmed !== this.content ) {\n\t\t\t\tthis.split( this.end - trimmed.length );\n\t\t\t\tthis.edit( '', false );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.edit( '', false );\n\n\t\t\tthis.outro = this.outro.replace( rx, '' );\n\t\t\tif ( this.outro.length ) return true;\n\t\t}\n\t}\n};\n\n\n\n// WEBPACK FOOTER //\n// ../src/Chunk.js","import btoa from './btoa.js';\n\nexport default function SourceMap ( properties ) {\n\tthis.version = 3;\n\n\tthis.file           = properties.file;\n\tthis.sources        = properties.sources;\n\tthis.sourcesContent = properties.sourcesContent;\n\tthis.names          = properties.names;\n\tthis.mappings       = properties.mappings;\n}\n\nSourceMap.prototype = {\n\ttoString () {\n\t\treturn JSON.stringify( this );\n\t},\n\n\ttoUrl () {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa( this.toString() );\n\t}\n};\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/SourceMap.js","export default function guessIndent ( code ) {\n\tconst lines = code.split( '\\n' );\n\n\tconst tabbed = lines.filter( line => /^\\t+/.test( line ) );\n\tconst spaced = lines.filter( line => /^ {2,}/.test( line ) );\n\n\tif ( tabbed.length === 0 && spaced.length === 0 ) {\n\t\treturn null;\n\t}\n\n\t// More lines tabbed than spaced? Assume tabs, and\n\t// default to tabs in the case of a tie (or nothing\n\t// to go on)\n\tif ( tabbed.length >= spaced.length ) {\n\t\treturn '\\t';\n\t}\n\n\t// Otherwise, we need to guess the multiple\n\tconst min = spaced.reduce( ( previous, current ) => {\n\t\tconst numSpaces = /^ +/.exec( current )[0].length;\n\t\treturn Math.min( numSpaces, previous );\n\t}, Infinity );\n\n\treturn new Array( min + 1 ).join( ' ' );\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/guessIndent.js","export default function getLocator ( source ) {\n\tlet originalLines = source.split( '\\n' );\n\n\tlet start = 0;\n\tlet lineRanges = originalLines.map( ( line, i ) => {\n\t\tconst end = start + line.length + 1;\n\t\tconst range = { start, end, line: i };\n\n\t\tstart = end;\n\t\treturn range;\n\t});\n\n\tlet i = 0;\n\n\tfunction rangeContains ( range, index ) {\n\t\treturn range.start <= index && index < range.end;\n\t}\n\n\tfunction getLocation ( range, index ) {\n\t\treturn { line: range.line, column: index - range.start };\n\t}\n\n\treturn function locate ( index ) {\n\t\tlet range = lineRanges[i];\n\n\t\tconst d = index >= range.end ? 1 : -1;\n\n\t\twhile ( range ) {\n\t\t\tif ( rangeContains( range, index ) ) return getLocation( range, index );\n\n\t\t\ti += d;\n\t\t\trange = lineRanges[i];\n\t\t}\n\t};\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/getLocator.js","import { encode } from 'vlq';\nimport getLocator from './getLocator.js';\n\nexport default function encodeMappings ( original, intro, chunk, hires, sourcemapLocations, sourceIndex, offsets, names ) {\n\tlet rawLines = [];\n\n\tlet generatedCodeLine = intro.split( '\\n' ).length - 1;\n\tlet rawSegments = rawLines[ generatedCodeLine ] = [];\n\n\tlet generatedCodeColumn = 0;\n\n\tconst locate = getLocator( original );\n\n\tfunction addEdit ( content, original, loc, nameIndex, i ) {\n\t\tif ( i || content.length ) {\n\t\t\trawSegments.push({\n\t\t\t\tgeneratedCodeLine,\n\t\t\t\tgeneratedCodeColumn,\n\t\t\t\tsourceCodeLine: loc.line,\n\t\t\t\tsourceCodeColumn: loc.column,\n\t\t\t\tsourceCodeName: nameIndex,\n\t\t\t\tsourceIndex\n\t\t\t});\n\t\t}\n\n\t\tlet lines = content.split( '\\n' );\n\t\tlet lastLine = lines.pop();\n\n\t\tif ( lines.length ) {\n\t\t\tgeneratedCodeLine += lines.length;\n\t\t\trawLines[ generatedCodeLine ] = rawSegments = [];\n\t\t\tgeneratedCodeColumn = lastLine.length;\n\t\t} else {\n\t\t\tgeneratedCodeColumn += lastLine.length;\n\t\t}\n\n\t\tlines = original.split( '\\n' );\n\t\tlastLine = lines.pop();\n\n\t\tif ( lines.length ) {\n\t\t\tloc.line += lines.length;\n\t\t\tloc.column = lastLine.length;\n\t\t} else {\n\t\t\tloc.column += lastLine.length;\n\t\t}\n\t}\n\n\tfunction addUneditedChunk ( chunk, loc ) {\n\t\tlet originalCharIndex = chunk.start;\n\t\tlet first = true;\n\n\t\twhile ( originalCharIndex < chunk.end ) {\n\t\t\tif ( hires || first || sourcemapLocations[ originalCharIndex ] ) {\n\t\t\t\trawSegments.push({\n\t\t\t\t\tgeneratedCodeLine,\n\t\t\t\t\tgeneratedCodeColumn,\n\t\t\t\t\tsourceCodeLine: loc.line,\n\t\t\t\t\tsourceCodeColumn: loc.column,\n\t\t\t\t\tsourceCodeName: -1,\n\t\t\t\t\tsourceIndex\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif ( original[ originalCharIndex ] === '\\n' ) {\n\t\t\t\tloc.line += 1;\n\t\t\t\tloc.column = 0;\n\t\t\t\tgeneratedCodeLine += 1;\n\t\t\t\trawLines[ generatedCodeLine ] = rawSegments = [];\n\t\t\t\tgeneratedCodeColumn = 0;\n\t\t\t} else {\n\t\t\t\tloc.column += 1;\n\t\t\t\tgeneratedCodeColumn += 1;\n\t\t\t}\n\n\t\t\toriginalCharIndex += 1;\n\t\t\tfirst = false;\n\t\t}\n\t}\n\n\twhile ( chunk ) {\n\t\tlet loc = locate( chunk.start );\n\n\t\tif ( chunk.intro.length ) {\n\t\t\taddEdit( chunk.intro, '', loc, -1, !!chunk.previous );\n\t\t}\n\n\t\tif ( chunk.edited ) {\n\t\t\taddEdit( chunk.content, chunk.original, loc, chunk.storeName ? names.indexOf( chunk.original ) : -1, !!chunk.previous );\n\t\t} else {\n\t\t\taddUneditedChunk( chunk, loc );\n\t\t}\n\n\t\tif ( chunk.outro.length ) {\n\t\t\taddEdit( chunk.outro, '', loc, -1, !!chunk.previous );\n\t\t}\n\n\t\tconst nextChunk = chunk.next;\n\t\tchunk = nextChunk;\n\t}\n\n\toffsets.sourceIndex = offsets.sourceIndex || 0;\n\toffsets.sourceCodeLine = offsets.sourceCodeLine || 0;\n\toffsets.sourceCodeColumn = offsets.sourceCodeColumn || 0;\n\toffsets.sourceCodeName = offsets.sourceCodeName || 0;\n\n\tconst encoded = rawLines.map( segments => {\n\t\tlet generatedCodeColumn = 0;\n\n\t\treturn segments.map( segment => {\n\t\t\tlet arr = [\n\t\t\t\tsegment.generatedCodeColumn - generatedCodeColumn,\n\t\t\t\tsegment.sourceIndex - offsets.sourceIndex,\n\t\t\t\tsegment.sourceCodeLine - offsets.sourceCodeLine,\n\t\t\t\tsegment.sourceCodeColumn - offsets.sourceCodeColumn\n\t\t\t];\n\n\t\t\tgeneratedCodeColumn = segment.generatedCodeColumn;\n\t\t\toffsets.sourceIndex = segment.sourceIndex;\n\t\t\toffsets.sourceCodeLine = segment.sourceCodeLine;\n\t\t\toffsets.sourceCodeColumn = segment.sourceCodeColumn;\n\n\t\t\tif ( ~segment.sourceCodeName ) {\n\t\t\t\tarr.push( segment.sourceCodeName - offsets.sourceCodeName );\n\t\t\t\toffsets.sourceCodeName = segment.sourceCodeName;\n\t\t\t}\n\n\t\t\treturn encode( arr );\n\t\t}).join( ',' );\n\t}).join( ';' );\n\n\treturn encoded;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/encodeMappings.js","export default function getRelativePath ( from, to ) {\n\tlet fromParts = from.split( /[\\/\\\\]/ );\n\tlet toParts = to.split( /[\\/\\\\]/ );\n\n\tfromParts.pop(); // get dirname\n\n\twhile ( fromParts[0] === toParts[0] ) {\n\t\tfromParts.shift();\n\t\ttoParts.shift();\n\t}\n\n\tif ( fromParts.length ) {\n\t\tlet i = fromParts.length;\n\t\twhile ( i-- ) fromParts[i] = '..';\n\t}\n\n\treturn fromParts.concat( toParts ).join( '/' );\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/getRelativePath.js","const toString = Object.prototype.toString;\n\nexport default function isObject ( thing ) {\n\treturn toString.call( thing ) === '[object Object]';\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/isObject.js","import Chunk from './Chunk.js';\nimport SourceMap from './utils/SourceMap.js';\nimport guessIndent from './utils/guessIndent.js';\nimport encodeMappings from './utils/encodeMappings.js';\nimport getRelativePath from './utils/getRelativePath.js';\nimport isObject from './utils/isObject.js';\nimport getLocator from './utils/getLocator.js';\nimport Stats from './utils/Stats.js';\n\nexport default function MagicString ( string, options = {} ) {\n\tconst chunk = new Chunk( 0, string.length, string );\n\n\tObject.defineProperties( this, {\n\t\toriginal:              { writable: true, value: string },\n\t\toutro:                 { writable: true, value: '' },\n\t\tintro:                 { writable: true, value: '' },\n\t\tfirstChunk:            { writable: true, value: chunk },\n\t\tlastChunk:             { writable: true, value: chunk },\n\t\tlastSearchedChunk:     { writable: true, value: chunk },\n\t\tbyStart:               { writable: true, value: {} },\n\t\tbyEnd:                 { writable: true, value: {} },\n\t\tfilename:              { writable: true, value: options.filename },\n\t\tindentExclusionRanges: { writable: true, value: options.indentExclusionRanges },\n\t\tsourcemapLocations:    { writable: true, value: {} },\n\t\tstoredNames:           { writable: true, value: {} },\n\t\tindentStr:             { writable: true, value: guessIndent( string ) }\n\t});\n\n\tif ( DEBUG ) {\n\t\tObject.defineProperty( this, 'stats', { value: new Stats() });\n\t}\n\n\tthis.byStart[ 0 ] = chunk;\n\tthis.byEnd[ string.length ] = chunk;\n}\n\nMagicString.prototype = {\n\taddSourcemapLocation ( char ) {\n\t\tthis.sourcemapLocations[ char ] = true;\n\t},\n\n\tappend ( content ) {\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'outro content must be a string' );\n\n\t\tthis.outro += content;\n\t\treturn this;\n\t},\n\n\tclone () {\n\t\tlet cloned = new MagicString( this.original, { filename: this.filename });\n\n\t\tlet originalChunk = this.firstChunk;\n\t\tlet clonedChunk = cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone();\n\n\t\twhile ( originalChunk ) {\n\t\t\tcloned.byStart[ clonedChunk.start ] = clonedChunk;\n\t\t\tcloned.byEnd[ clonedChunk.end ] = clonedChunk;\n\n\t\t\tconst nextOriginalChunk = originalChunk.next;\n\t\t\tconst nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();\n\n\t\t\tif ( nextClonedChunk ) {\n\t\t\t\tclonedChunk.next = nextClonedChunk;\n\t\t\t\tnextClonedChunk.previous = clonedChunk;\n\n\t\t\t\tclonedChunk = nextClonedChunk;\n\t\t\t}\n\n\t\t\toriginalChunk = nextOriginalChunk;\n\t\t}\n\n\t\tcloned.lastChunk = clonedChunk;\n\n\t\tif ( this.indentExclusionRanges ) {\n\t\t\tcloned.indentExclusionRanges = typeof this.indentExclusionRanges[0] === 'number' ?\n\t\t\t\t[ this.indentExclusionRanges[0], this.indentExclusionRanges[1] ] :\n\t\t\t\tthis.indentExclusionRanges.map( range => [ range.start, range.end ] );\n\t\t}\n\n\t\tObject.keys( this.sourcemapLocations ).forEach( loc => {\n\t\t\tcloned.sourcemapLocations[ loc ] = true;\n\t\t});\n\n\t\treturn cloned;\n\t},\n\n\tgenerateMap ( options ) {\n\t\toptions = options || {};\n\n\t\tconst names = Object.keys( this.storedNames );\n\n\t\tif ( DEBUG ) this.stats.time( 'generateMap' );\n\t\tconst map = new SourceMap({\n\t\t\tfile: ( options.file ? options.file.split( /[\\/\\\\]/ ).pop() : null ),\n\t\t\tsources: [ options.source ? getRelativePath( options.file || '', options.source ) : null ],\n\t\t\tsourcesContent: options.includeContent ? [ this.original ] : [ null ],\n\t\t\tnames,\n\t\t\tmappings: this.getMappings( options.hires, 0, {}, names )\n\t\t});\n\t\tif ( DEBUG ) this.stats.timeEnd( 'generateMap' );\n\n\t\treturn map;\n\t},\n\n\tgetIndentString () {\n\t\treturn this.indentStr === null ? '\\t' : this.indentStr;\n\t},\n\n\tgetMappings ( hires, sourceIndex, offsets, names ) {\n\t\treturn encodeMappings( this.original, this.intro, this.firstChunk, hires, this.sourcemapLocations, sourceIndex, offsets, names );\n\t},\n\n\tindent ( indentStr, options ) {\n\t\tconst pattern = /^[^\\r\\n]/gm;\n\n\t\tif ( isObject( indentStr ) ) {\n\t\t\toptions = indentStr;\n\t\t\tindentStr = undefined;\n\t\t}\n\n\t\tindentStr = indentStr !== undefined ? indentStr : ( this.indentStr || '\\t' );\n\n\t\tif ( indentStr === '' ) return this; // noop\n\n\t\toptions = options || {};\n\n\t\t// Process exclusion ranges\n\t\tlet isExcluded = {};\n\n\t\tif ( options.exclude ) {\n\t\t\tlet exclusions = typeof options.exclude[0] === 'number' ? [ options.exclude ] : options.exclude;\n\t\t\texclusions.forEach( exclusion => {\n\t\t\t\tfor ( let i = exclusion[0]; i < exclusion[1]; i += 1 ) {\n\t\t\t\t\tisExcluded[i] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet shouldIndentNextCharacter = options.indentStart !== false;\n\t\tconst replacer = match => {\n\t\t\tif ( shouldIndentNextCharacter ) return `${indentStr}${match}`;\n\t\t\tshouldIndentNextCharacter = true;\n\t\t\treturn match;\n\t\t};\n\n\t\tthis.intro = this.intro.replace( pattern, replacer );\n\n\t\tlet charIndex = 0;\n\n\t\tlet chunk = this.firstChunk;\n\n\t\twhile ( chunk ) {\n\t\t\tconst end = chunk.end;\n\n\t\t\tif ( chunk.edited ) {\n\t\t\t\tif ( !isExcluded[ charIndex ] ) {\n\t\t\t\t\tchunk.content = chunk.content.replace( pattern, replacer );\n\n\t\t\t\t\tif ( chunk.content.length ) {\n\t\t\t\t\t\tshouldIndentNextCharacter = chunk.content[ chunk.content.length - 1 ] === '\\n';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcharIndex = chunk.start;\n\n\t\t\t\twhile ( charIndex < end ) {\n\t\t\t\t\tif ( !isExcluded[ charIndex ] ) {\n\t\t\t\t\t\tconst char = this.original[ charIndex ];\n\n\t\t\t\t\t\tif ( char === '\\n' ) {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = true;\n\t\t\t\t\t\t} else if ( char !== '\\r' && shouldIndentNextCharacter ) {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = false;\n\n\t\t\t\t\t\t\tif ( charIndex === chunk.start ) {\n\t\t\t\t\t\t\t\tchunk.prepend( indentStr );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst rhs = chunk.split( charIndex );\n\t\t\t\t\t\t\t\trhs.prepend( indentStr );\n\n\t\t\t\t\t\t\t\tthis.byStart[ charIndex ] = rhs;\n\t\t\t\t\t\t\t\tthis.byEnd[ charIndex ] = chunk;\n\n\t\t\t\t\t\t\t\tchunk = rhs;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcharIndex += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcharIndex = chunk.end;\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tthis.outro = this.outro.replace( pattern, replacer );\n\n\t\treturn this;\n\t},\n\n\tinsert () {\n\t\tthrow new Error( 'magicString.insert(...) is deprecated. Use insertRight(...) or insertLeft(...)' );\n\t},\n\n\tinsertLeft ( index, content ) {\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'inserted content must be a string' );\n\n\t\tif ( DEBUG ) this.stats.time( 'insertLeft' );\n\n\t\tthis._split( index );\n\n\t\tconst chunk = this.byEnd[ index ];\n\n\t\tif ( chunk ) {\n\t\t\tchunk.append( content );\n\t\t} else {\n\t\t\tthis.intro += content;\n\t\t}\n\n\t\tif ( DEBUG ) this.stats.timeEnd( 'insertLeft' );\n\t\treturn this;\n\t},\n\n\tinsertRight ( index, content ) {\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'inserted content must be a string' );\n\n\t\tif ( DEBUG ) this.stats.time( 'insertRight' );\n\n\t\tthis._split( index );\n\n\t\tconst chunk = this.byStart[ index ];\n\n\t\tif ( chunk ) {\n\t\t\tchunk.prepend( content );\n\t\t} else {\n\t\t\tthis.outro += content;\n\t\t}\n\n\t\tif ( DEBUG ) this.stats.timeEnd( 'insertRight' );\n\t\treturn this;\n\t},\n\n\tmove ( start, end, index ) {\n\t\tif ( index >= start && index <= end ) throw new Error( 'Cannot move a selection inside itself' );\n\n\t\tif ( DEBUG ) this.stats.time( 'move' );\n\n\t\tthis._split( start );\n\t\tthis._split( end );\n\t\tthis._split( index );\n\n\t\tconst first = this.byStart[ start ];\n\t\tconst last = this.byEnd[ end ];\n\n\t\tconst oldLeft = first.previous;\n\t\tconst oldRight = last.next;\n\n\t\tconst newRight = this.byStart[ index ];\n\t\tif ( !newRight && last === this.lastChunk ) return this;\n\t\tconst newLeft = newRight ? newRight.previous : this.lastChunk;\n\n\t\tif ( oldLeft ) oldLeft.next = oldRight;\n\t\tif ( oldRight ) oldRight.previous = oldLeft;\n\n\t\tif ( newLeft ) newLeft.next = first;\n\t\tif ( newRight ) newRight.previous = last;\n\n\t\tif ( !first.previous ) this.firstChunk = last.next;\n\t\tif ( !last.next ) {\n\t\t\tthis.lastChunk = first.previous;\n\t\t\tthis.lastChunk.next = null;\n\t\t}\n\n\t\tfirst.previous = newLeft;\n\t\tlast.next = newRight;\n\n\t\tif ( !newLeft ) this.firstChunk = first;\n\t\tif ( !newRight ) this.lastChunk = last;\n\n\t\tif ( DEBUG ) this.stats.timeEnd( 'move' );\n\t\treturn this;\n\t},\n\n\toverwrite ( start, end, content, storeName ) {\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'replacement content must be a string' );\n\n\t\twhile ( start < 0 ) start += this.original.length;\n\t\twhile ( end < 0 ) end += this.original.length;\n\n\t\tif ( end > this.original.length ) throw new Error( 'end is out of bounds' );\n\t\tif ( start === end ) throw new Error( 'Cannot overwrite a zero-length range – use insertLeft or insertRight instead' );\n\n\t\tif ( DEBUG ) this.stats.time( 'overwrite' );\n\n\t\tthis._split( start );\n\t\tthis._split( end );\n\n\t\tif ( storeName ) {\n\t\t\tconst original = this.original.slice( start, end );\n\t\t\tthis.storedNames[ original ] = true;\n\t\t}\n\n\t\tconst first = this.byStart[ start ];\n\t\tconst last = this.byEnd[ end ];\n\n\t\tif ( first ) {\n\t\t\tfirst.edit( content, storeName );\n\n\t\t\tif ( first !== last ) {\n\t\t\t\tfirst.outro = '';\n\n\t\t\t\tlet chunk = first.next;\n\t\t\t\twhile ( chunk !== last ) {\n\t\t\t\t\tchunk.edit( '', false );\n\t\t\t\t\tchunk.intro = chunk.outro = '';\n\t\t\t\t\tchunk = chunk.next;\n\t\t\t\t}\n\n\t\t\t\tchunk.edit( '', false );\n\t\t\t\tchunk.intro = '';\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\t// must be inserting at the end\n\t\t\tconst newChunk = new Chunk( start, end, '' ).edit( content, storeName );\n\n\t\t\t// TODO last chunk in the array may not be the last chunk, if it's moved...\n\t\t\tlast.next = newChunk;\n\t\t\tnewChunk.previous = last;\n\t\t}\n\n\t\tif ( DEBUG ) this.stats.timeEnd( 'overwrite' );\n\t\treturn this;\n\t},\n\n\tprepend ( content ) {\n\t\tif ( typeof content !== 'string' ) throw new TypeError( 'outro content must be a string' );\n\n\t\tthis.intro = content + this.intro;\n\t\treturn this;\n\t},\n\n\tremove ( start, end ) {\n\t\twhile ( start < 0 ) start += this.original.length;\n\t\twhile ( end < 0 ) end += this.original.length;\n\n\t\tif ( start === end ) return this;\n\n\t\tif ( start < 0 || end > this.original.length ) throw new Error( 'Character is out of bounds' );\n\t\tif ( start > end ) throw new Error( 'end must be greater than start' );\n\n\t\treturn this.overwrite( start, end, '', false );\n\t},\n\n\tslice ( start = 0, end = this.original.length ) {\n\t\twhile ( start < 0 ) start += this.original.length;\n\t\twhile ( end < 0 ) end += this.original.length;\n\n\t\tlet result = '';\n\n\t\t// find start chunk\n\t\tlet chunk = this.firstChunk;\n\t\twhile ( chunk && ( chunk.start > start || chunk.end <= start ) ) {\n\n\t\t\t// found end chunk before start\n\t\t\tif ( chunk.start < end && chunk.end >= end ) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tif ( chunk && chunk.edited && chunk.start !== start ) throw new Error(`Cannot use replaced character ${start} as slice start anchor.`);\n\n\t\tlet startChunk = chunk;\n\t\twhile ( chunk ) {\n\t\t\tif ( chunk.intro && ( startChunk !== chunk || chunk.start === start ) ) {\n\t\t\t\tresult += chunk.intro;\n\t\t\t}\n\n\t\t\tconst containsEnd = chunk.start < end && chunk.end >= end;\n\t\t\tif ( containsEnd && chunk.edited && chunk.end !== end ) throw new Error(`Cannot use replaced character ${end} as slice end anchor.`);\n\n\t\t\tconst sliceStart = startChunk === chunk ? start - chunk.start : 0;\n\t\t\tconst sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;\n\n\t\t\tresult += chunk.content.slice( sliceStart, sliceEnd );\n\n\t\t\tif ( chunk.outro && ( !containsEnd || chunk.end === end ) ) {\n\t\t\t\tresult += chunk.outro;\n\t\t\t}\n\n\t\t\tif ( containsEnd ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t// TODO deprecate this? not really very useful\n\tsnip ( start, end ) {\n\t\tconst clone = this.clone();\n\t\tclone.remove( 0, start );\n\t\tclone.remove( end, clone.original.length );\n\n\t\treturn clone;\n\t},\n\n\t_split ( index ) {\n\t\tif ( this.byStart[ index ] || this.byEnd[ index ] ) return;\n\n\t\tif ( DEBUG ) this.stats.time( '_split' );\n\n\t\tlet chunk = this.lastSearchedChunk;\n\t\tconst searchForward = index > chunk.end;\n\n\t\twhile ( true ) {\n\t\t\tif ( chunk.contains( index ) ) return this._splitChunk( chunk, index );\n\n\t\t\tchunk = searchForward ?\n\t\t\t\tthis.byStart[ chunk.end ] :\n\t\t\t\tthis.byEnd[ chunk.start ];\n\t\t}\n\t},\n\n\t_splitChunk ( chunk, index ) {\n\t\tif ( chunk.edited && chunk.content.length ) { // zero-length edited chunks are a special case (overlapping replacements)\n\t\t\tconst loc = getLocator( this.original )( index );\n\t\t\tthrow new Error( `Cannot split a chunk that has already been edited (${loc.line}:${loc.column} – \"${chunk.original}\")` );\n\t\t}\n\n\t\tconst newChunk = chunk.split( index );\n\n\t\tthis.byEnd[ index ] = chunk;\n\t\tthis.byStart[ index ] = newChunk;\n\t\tthis.byEnd[ newChunk.end ] = newChunk;\n\n\t\tif ( chunk === this.lastChunk ) this.lastChunk = newChunk;\n\n\t\tthis.lastSearchedChunk = chunk;\n\t\tif ( DEBUG ) this.stats.timeEnd( '_split' );\n\t\treturn true;\n\t},\n\n\ttoString () {\n\t\tlet str = this.intro;\n\n\t\tlet chunk = this.firstChunk;\n\t\twhile ( chunk ) {\n\t\t\tstr += chunk.toString();\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn str + this.outro;\n\t},\n\n\ttrimLines () {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t},\n\n\ttrim ( charType ) {\n\t\treturn this.trimStart( charType ).trimEnd( charType );\n\t},\n\n\ttrimEnd ( charType ) {\n\t\tconst rx = new RegExp( ( charType || '\\\\s' ) + '+$' );\n\n\t\tthis.outro = this.outro.replace( rx, '' );\n\t\tif ( this.outro.length ) return this;\n\n\t\tlet chunk = this.lastChunk;\n\n\t\tdo {\n\t\t\tconst end = chunk.end;\n\t\t\tconst aborted = chunk.trimEnd( rx );\n\n\t\t\t// if chunk was trimmed, we have a new lastChunk\n\t\t\tif ( chunk.end !== end ) {\n\t\t\t\tthis.lastChunk = chunk.next;\n\n\t\t\t\tthis.byEnd[ chunk.end ] = chunk;\n\t\t\t\tthis.byStart[ chunk.next.start ] = chunk.next;\n\t\t\t}\n\n\t\t\tif ( aborted ) return this;\n\t\t\tchunk = chunk.previous;\n\t\t} while ( chunk );\n\n\t\treturn this;\n\t},\n\n\ttrimStart ( charType ) {\n\t\tconst rx = new RegExp( '^' + ( charType || '\\\\s' ) + '+' );\n\n\t\tthis.intro = this.intro.replace( rx, '' );\n\t\tif ( this.intro.length ) return this;\n\n\t\tlet chunk = this.firstChunk;\n\n\t\tdo {\n\t\t\tconst end = chunk.end;\n\t\t\tconst aborted = chunk.trimStart( rx );\n\n\t\t\tif ( chunk.end !== end ) {\n\t\t\t\t// special case...\n\t\t\t\tif ( chunk === this.lastChunk ) this.lastChunk = chunk.next;\n\n\t\t\t\tthis.byEnd[ chunk.end ] = chunk;\n\t\t\t\tthis.byStart[ chunk.next.start ] = chunk.next;\n\t\t\t}\n\n\t\t\tif ( aborted ) return this;\n\t\t\tchunk = chunk.next;\n\t\t} while ( chunk );\n\n\t\treturn this;\n\t}\n};\n\n\n\n// WEBPACK FOOTER //\n// ../src/MagicString.js","import MagicString from './MagicString.js';\nimport SourceMap from './utils/SourceMap.js';\nimport getRelativePath from './utils/getRelativePath.js';\nimport hasOwnProp from './utils/hasOwnProp.js';\nimport isObject from './utils/isObject.js';\n\nexport default function Bundle ( options = {} ) {\n\tthis.intro = options.intro || '';\n\tthis.separator = options.separator !== undefined ? options.separator : '\\n';\n\n\tthis.sources = [];\n\n\tthis.uniqueSources = [];\n\tthis.uniqueSourceIndexByFilename = {};\n}\n\nBundle.prototype = {\n\taddSource ( source ) {\n\t\tif ( source instanceof MagicString ) {\n\t\t\treturn this.addSource({\n\t\t\t\tcontent: source,\n\t\t\t\tfilename: source.filename,\n\t\t\t\tseparator: this.separator\n\t\t\t});\n\t\t}\n\n\t\tif ( !isObject( source ) || !source.content ) {\n\t\t\tthrow new Error( 'bundle.addSource() takes an object with a `content` property, which should be an instance of MagicString, and an optional `filename`' );\n\t\t}\n\n\t\t[ 'filename', 'indentExclusionRanges', 'separator' ].forEach( option => {\n\t\t\tif ( !hasOwnProp.call( source, option ) ) source[ option ] = source.content[ option ];\n\t\t});\n\n\t\tif ( source.separator === undefined ) { // TODO there's a bunch of this sort of thing, needs cleaning up\n\t\t\tsource.separator = this.separator;\n\t\t}\n\n\t\tif ( source.filename ) {\n\t\t\tif ( !hasOwnProp.call( this.uniqueSourceIndexByFilename, source.filename ) ) {\n\t\t\t\tthis.uniqueSourceIndexByFilename[ source.filename ] = this.uniqueSources.length;\n\t\t\t\tthis.uniqueSources.push({ filename: source.filename, content: source.content.original });\n\t\t\t} else {\n\t\t\t\tconst uniqueSource = this.uniqueSources[ this.uniqueSourceIndexByFilename[ source.filename ] ];\n\t\t\t\tif ( source.content.original !== uniqueSource.content ) {\n\t\t\t\t\tthrow new Error( `Illegal source: same filename (${source.filename}), different contents` );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.sources.push( source );\n\t\treturn this;\n\t},\n\n\tappend ( str, options ) {\n\t\tthis.addSource({\n\t\t\tcontent: new MagicString( str ),\n\t\t\tseparator: ( options && options.separator ) || ''\n\t\t});\n\n\t\treturn this;\n\t},\n\n\tclone () {\n\t\tconst bundle = new Bundle({\n\t\t\tintro: this.intro,\n\t\t\tseparator: this.separator\n\t\t});\n\n\t\tthis.sources.forEach( source => {\n\t\t\tbundle.addSource({\n\t\t\t\tfilename: source.filename,\n\t\t\t\tcontent: source.content.clone(),\n\t\t\t\tseparator: source.separator\n\t\t\t});\n\t\t});\n\n\t\treturn bundle;\n\t},\n\n\tgenerateMap ( options ) {\n\t\tlet offsets = {};\n\n\t\tlet names = [];\n\t\tthis.sources.forEach( source => {\n\t\t\tObject.keys( source.content.storedNames ).forEach( name => {\n\t\t\t\tif ( !~names.indexOf( name ) ) names.push( name );\n\t\t\t});\n\t\t});\n\n\t\tconst encoded = (\n\t\t\tgetSemis( this.intro ) +\n\t\t\tthis.sources.map( ( source, i ) => {\n\t\t\t\tconst prefix = ( i > 0 ) ? ( getSemis( source.separator ) || ',' ) : '';\n\t\t\t\tlet mappings;\n\n\t\t\t\t// we don't bother encoding sources without a filename\n\t\t\t\tif ( !source.filename ) {\n\t\t\t\t\tmappings = getSemis( source.content.toString() );\n\t\t\t\t} else {\n\t\t\t\t\tconst sourceIndex = this.uniqueSourceIndexByFilename[ source.filename ];\n\t\t\t\t\tmappings = source.content.getMappings( options.hires, sourceIndex, offsets, names );\n\t\t\t\t}\n\n\t\t\t\treturn prefix + mappings;\n\t\t\t}).join( '' )\n\t\t);\n\n\t\treturn new SourceMap({\n\t\t\tfile: ( options.file ? options.file.split( /[\\/\\\\]/ ).pop() : null ),\n\t\t\tsources: this.uniqueSources.map( source => {\n\t\t\t\treturn options.file ? getRelativePath( options.file, source.filename ) : source.filename;\n\t\t\t}),\n\t\t\tsourcesContent: this.uniqueSources.map( source => {\n\t\t\t\treturn options.includeContent ? source.content : null;\n\t\t\t}),\n\t\t\tnames,\n\t\t\tmappings: encoded\n\t\t});\n\t},\n\n\tgetIndentString () {\n\t\tlet indentStringCounts = {};\n\n\t\tthis.sources.forEach( source => {\n\t\t\tconst indentStr = source.content.indentStr;\n\n\t\t\tif ( indentStr === null ) return;\n\n\t\t\tif ( !indentStringCounts[ indentStr ] ) indentStringCounts[ indentStr ] = 0;\n\t\t\tindentStringCounts[ indentStr ] += 1;\n\t\t});\n\n\t\treturn ( Object.keys( indentStringCounts ).sort( ( a, b ) => {\n\t\t\treturn indentStringCounts[a] - indentStringCounts[b];\n\t\t})[0] ) || '\\t';\n\t},\n\n\tindent ( indentStr ) {\n\t\tif ( !arguments.length ) {\n\t\t\tindentStr = this.getIndentString();\n\t\t}\n\n\t\tif ( indentStr === '' ) return this; // noop\n\n\t\tlet trailingNewline = !this.intro || this.intro.slice( -1 ) === '\\n';\n\n\t\tthis.sources.forEach( ( source, i ) => {\n\t\t\tconst separator = source.separator !== undefined ? source.separator : this.separator;\n\t\t\tconst indentStart = trailingNewline || ( i > 0 && /\\r?\\n$/.test( separator ) );\n\n\t\t\tsource.content.indent( indentStr, {\n\t\t\t\texclude: source.indentExclusionRanges,\n\t\t\t\tindentStart//: trailingNewline || /\\r?\\n$/.test( separator )  //true///\\r?\\n/.test( separator )\n\t\t\t});\n\n\t\t\t// TODO this is a very slow way to determine this\n\t\t\ttrailingNewline = source.content.toString().slice( 0, -1 ) === '\\n';\n\t\t});\n\n\t\tif ( this.intro ) {\n\t\t\tthis.intro = indentStr + this.intro.replace( /^[^\\n]/gm, ( match, index ) => {\n\t\t\t\treturn index > 0 ? indentStr + match : match;\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tprepend ( str ) {\n\t\tthis.intro = str + this.intro;\n\t\treturn this;\n\t},\n\n\ttoString () {\n\t\tconst body = this.sources.map( ( source, i ) => {\n\t\t\tconst separator = source.separator !== undefined ? source.separator : this.separator;\n\t\t\tlet str = ( i > 0 ? separator : '' ) + source.content.toString();\n\n\t\t\treturn str;\n\t\t}).join( '' );\n\n\t\treturn this.intro + body;\n\t},\n\n\ttrimLines () {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t},\n\n\ttrim ( charType ) {\n\t\treturn this.trimStart( charType ).trimEnd( charType );\n\t},\n\n\ttrimStart ( charType ) {\n\t\tconst rx = new RegExp( '^' + ( charType || '\\\\s' ) + '+' );\n\t\tthis.intro = this.intro.replace( rx, '' );\n\n\t\tif ( !this.intro ) {\n\t\t\tlet source;\n\t\t\tlet i = 0;\n\n\t\t\tdo {\n\t\t\t\tsource = this.sources[i];\n\n\t\t\t\tif ( !source ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tsource.content.trimStart( charType );\n\t\t\t\ti += 1;\n\t\t\t} while ( source.content.toString() === '' ); // TODO faster way to determine non-empty source?\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttrimEnd ( charType ) {\n\t\tconst rx = new RegExp( ( charType || '\\\\s' ) + '+$' );\n\n\t\tlet source;\n\t\tlet i = this.sources.length - 1;\n\n\t\tdo {\n\t\t\tsource = this.sources[i];\n\n\t\t\tif ( !source ) {\n\t\t\t\tthis.intro = this.intro.replace( rx, '' );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tsource.content.trimEnd( charType );\n\t\t\ti -= 1;\n\t\t} while ( source.content.toString() === '' ); // TODO faster way to determine non-empty source?\n\n\t\treturn this;\n\t}\n};\n\nfunction getSemis ( str ) {\n\treturn new Array( str.split( '\\n' ).length ).join( ';' );\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/Bundle.js","let _btoa;\n\nif ( typeof window !== 'undefined' && typeof window.btoa === 'function' ) {\n\t_btoa = window.btoa;\n} else if ( typeof Buffer === 'function' ) {\n\t_btoa = str => new Buffer( str ).toString( 'base64' );\n} else {\n\t_btoa = () => {\n\t\tthrow new Error( 'Unsupported environment: `window.btoa` or `Buffer` should be supported.' );\n\t};\n}\n\nexport default _btoa;\n\n\n\n// WEBPACK FOOTER //\n// ../src/utils/btoa.js","export default Object.prototype.hasOwnProperty;\n\n\n// WEBPACK FOOTER //\n// ../src/utils/hasOwnProp.js","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/node-libs-browser/node_modules/buffer/index.js\n// module id = /home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/node-libs-browser/node_modules/buffer/index.js\n// module chunks = 0","var charToInteger = {};\nvar integerToChar = {};\n\n'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split( '' ).forEach( function ( char, i ) {\n\tcharToInteger[ char ] = i;\n\tintegerToChar[ i ] = char;\n});\n\nexport function decode ( string ) {\n\tvar result = [];\n\tvar shift = 0;\n\tvar value = 0;\n\n\tfor ( var i = 0; i < string.length; i += 1 ) {\n\t\tvar integer = charToInteger[ string[i] ];\n\n\t\tif ( integer === undefined ) {\n\t\t\tthrow new Error( 'Invalid character (' + string[i] + ')' );\n\t\t}\n\n\t\tvar hasContinuationBit = integer & 32;\n\n\t\tinteger &= 31;\n\t\tvalue += integer << shift;\n\n\t\tif ( hasContinuationBit ) {\n\t\t\tshift += 5;\n\t\t} else {\n\t\t\tvar shouldNegate = value & 1;\n\t\t\tvalue >>= 1;\n\n\t\t\tresult.push( shouldNegate ? -value : value );\n\n\t\t\t// reset\n\t\t\tvalue = shift = 0;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function encode ( value ) {\n\tvar result;\n\n\tif ( typeof value === 'number' ) {\n\t\tresult = encodeInteger( value );\n\t} else {\n\t\tresult = '';\n\t\tfor ( var i = 0; i < value.length; i += 1 ) {\n\t\t\tresult += encodeInteger( value[i] );\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction encodeInteger ( num ) {\n\tvar result = '';\n\n\tif ( num < 0 ) {\n\t\tnum = ( -num << 1 ) | 1;\n\t} else {\n\t\tnum <<= 1;\n\t}\n\n\tdo {\n\t\tvar clamped = num & 31;\n\t\tnum >>= 5;\n\n\t\tif ( num > 0 ) {\n\t\t\tclamped |= 32;\n\t\t}\n\n\t\tresult += integerToChar[ clamped ];\n\t} while ( num > 0 );\n\n\treturn result;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vlq/src/vlq.js\n// module id = /home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/vlq/src/vlq.js\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = /home/travis/build/DSchau/css-in-js-playground/node_modules/source-map-loader/index.js!/home/travis/build/DSchau/css-in-js-playground/node_modules/webpack/buildin/global.js\n// module chunks = 0"],"sourceRoot":""}